#!/usr/bin/env bash

set -o errexit
set -o nounset
set -o pipefail

BUILD_IMAGE_REPO=quay.io/weaveworks
# Override if you want to push images elsewhere, e.g,. a locally-running registry
IMAGE_REPOSITORY=${IMAGE_REPOSITORY:-${BUILD_IMAGE_REPO}}

echo ""
if [ "$IMAGE_REPOSITORY" == "$BUILD_IMAGE_REPO" ]; then \
    echo "When pushing to quay.io, you will *not* be prompted to log in. To get your password:"
    echo ""
    echo "  1. Go to http://quay.io"
    echo "  2. Log in with e.g. GitHub"
    echo "  3. Go to settings and generate an encrypted password"
    echo "  4. Follow instructions"
    echo ""
    echo ""
fi

SINCE=false
DEPLOY=false
while [ $# -gt 0 ]; do
    case "${1:-}" in
        --if-changed-since=*)
            SINCE=${1#--if-changed-since}
            shift 1
            ;;
        --if-changed-since)
            SINCE=${2:-HEAD~1}
            shift 2
            ;;
        --and-deploy)
            DEPLOY=true
            shift 1
            ;;
        *)
            break
            ;;
    esac
done

MONITORING_COMPONENTS="monitoring/prometheus monitoring/grafana monitoring/gfdatasource monitoring/loadgen monitoring/alertmanager monitoring/fluentd-loggly"

COMPONENTS="$@"
if [ "${COMPONENTS}" == "" ]
then
    COMPONENTS="authfe ui-server frontend-mt users metrics logging pr-assigner $MONITORING_COMPONENTS"
elif [ "${COMPONENTS}" == "monitoring" ] # Special case
then
    COMPONENTS="$MONITORING_COMPONENTS"
fi
echo "Using components: ${COMPONENTS}"

IMAGE_TAG=$(./tools/image-tag)

for c in ${COMPONENTS}
do
    if [ "$SINCE" != 'false' ] && [ ! -d "$c" ]; then
        echo "Component $c does not have a corresponding directory"
        exit 1
    fi
    image=$(basename $c)
    build_image="${BUILD_IMAGE_REPO}/${image}:${IMAGE_TAG}"
    if ! docker inspect ${build_image} >/dev/null; then
        echo "Expected image ${build_image} to exist, given the working directory state:" >&2
        echo "    ${IMAGE_TAG}" >&2
        echo "and the components to push:" >&2
        echo "    ${COMPONENTS}" >&2
        echo "But it does not exist. The local build may not have resulted in a new image." >&2
        exit 1
    fi
done

for c in ${COMPONENTS}
do
    # NB this only works if the code is in directories named for the
    # components, of course.
    image=$(basename $c)
    push_image="${IMAGE_REPOSITORY}/${image}:${IMAGE_TAG}"
    if [ "$SINCE" = 'false' ] || ! git diff --quiet "$SINCE" -- "$c"/; then
        build_image="${BUILD_IMAGE_REPO}/${image}:${IMAGE_TAG}"
        if [ "$IMAGE_REPOSITORY" != "$BUILD_IMAGE_REPO" ]; then
            echo "Tagging built image ${build_image} for pushing as ${push_image}"
            docker tag -f "${build_image}" "${push_image}"
        fi
        echo "Pushing ${push_image}"
        docker push "${push_image}"

        WCLOUD_ARGS=
        if [ -n "${CIRCLECI}" ]; then
            WCLOUD_ARGS="-u circle"
        fi

        if [ "$DEPLOY" = 'true' ]; then
            wcloud deploy ${WCLOUD_ARGS} "${push_image}"
        fi
    else
        echo "Not pushing image for $push_image, because no changes in $c since commit $SINCE"
    fi
done
