# Prometheus instrumentation
lua_shared_dict prometheus_metrics 10M;
lua_package_path "/lua/?.lua";
init_by_lua '
  prometheus = require("prometheus").init("prometheus_metrics")
  metric_requests = prometheus:counter(
    "nginx_http_requests_total", "Number of HTTP requests", {"status"})
  metric_latency = prometheus:histogram(
    "nginx_http_request_duration_seconds", "HTTP request latency", {})
';
log_by_lua '
  metric_requests:inc(1, {ngx.var.status})
  metric_latency:observe(ngx.now() - ngx.req.start_time(), {})
';

server {
    # NB this is the default server, for requests that don't match (ie
    #Â ones that go to frontend.default.svc.cluster.local or fronend.dev.weave.works)
    # This will not perform any redirection.

    # Listen on port 80 insecurely until the probes all support https
    listen 80 default_server;
    server_name cloud.weave.works;

    # Generated by the https://mozilla.github.io/server-side-tls/ssl-config-generator/
    listen 443 ssl default_server;

    # certs sent to the client in SERVER HELLO are concatenated in ssl_certificate
    ssl_certificate     /tls/cloud.weave.works.crt;
    ssl_certificate_key /tls/secret/cloud.weave.works.key; # mounted through k8s secret
    ssl_session_timeout 1d;
    ssl_session_cache   shared:SSL:50m;

    # Diffie-Hellman parameter for DHE ciphersuites, recommended 2048 bits
    ssl_dhparam         /tls/dhparam.pem;

    # intermediate configuration. tweak to your needs.
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:ECDHE-RSA-DES-CBC3-SHA:ECDHE-ECDSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA';
    ssl_prefer_server_ciphers on;

    # HSTS (ngx_http_headers_module is required) (15768000 seconds = 6 months)
    add_header Strict-Transport-Security "max-age=15724800; includeSubdomains; preload";

    # Compression for assets and JSON
    gzip on;
    gzip_disable "msie6";

    gzip_comp_level 6;
    gzip_min_length 1100;
    gzip_buffers 16 8k;
    gzip_proxied any;
    gzip_types
        text/plain
        text/css
        text/js
        text/xml
        text/javascript
        application/javascript
        application/x-javascript
        application/json
        application/xml
        application/rss+xml
        image/svg+xml;

	# Increase allowed POST request content max to 10MB to allow freakish massive reports
	client_max_body_size 10m;

    # The resolver is hardcoded to the DNS server in all local/dev/prod k8s
    # clusters. Also, the 'cluster.local' domain that is in reverse-proxy targets is
    # configurable, but all local/dev/prod k8s cluster are configured
    # identically.
    include /etc/nginx/k8s-resolver.conf;

    include /etc/nginx/routes.conf;
}

server {
    # Listen on port 80 insecurely until the probes all support https
    listen 80;
    server_name scope.weave.works;

    # Generated by the https://mozilla.github.io/server-side-tls/ssl-config-generator/
    listen 443 ssl;

    # certs sent to the client in SERVER HELLO are concatenated in ssl_certificate
    ssl_certificate     /tls/scope.weave.works.crt;
    ssl_certificate_key /tls/secret/scope.weave.works.key; # mounted through k8s secret
    ssl_session_timeout 1d;
    ssl_session_cache   shared:SSL:50m;

    # Diffie-Hellman parameter for DHE ciphersuites, recommended 2048 bits
    ssl_dhparam         /tls/dhparam.pem;

    # intermediate configuration. tweak to your needs.
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:ECDHE-RSA-DES-CBC3-SHA:ECDHE-ECDSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA';
    ssl_prefer_server_ciphers on;

    # HSTS (ngx_http_headers_module is required) (15768000 seconds = 6 months)
    add_header Strict-Transport-Security "max-age=15724800; includeSubdomains; preload";

    # Redirect to cloud.weave.works
    location / {
        rewrite ^/(.*)$ https://cloud.weave.works$request_uri permanent;
    }
}

server {
  listen 9145;
  allow all;
  location /metrics {
    content_by_lua 'prometheus:collect()';
  }
}
