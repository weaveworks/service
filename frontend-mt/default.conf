# Each $binary_remote_addr occupies 64 bytes.
# So, 64 MB should allow tracking roughly 1 million clients
# (64*2^20/64 = 2^20 = 1048576), limit after which nginx will start
# returning 503s for the rate-limited locations.
limit_req_zone $binary_remote_addr zone=antibf:64m rate=1r/s;
limit_req_zone $binary_remote_addr zone=antidos:64m rate=10r/s;

server {
    # Listen on port 80 insecurely until the probes all support https
    listen 80;


    # Generated by the https://mozilla.github.io/server-side-tls/ssl-config-generator/
    listen 443 ssl;

    # certs sent to the client in SERVER HELLO are concatenated in ssl_certificate
    ssl_certificate     /tls/scope.weave.works.crt;
    ssl_certificate_key /tls/secret/scope.weave.works.key; # mounted through k8s secret
    ssl_session_timeout 1d;
    ssl_session_cache   shared:SSL:50m;

    # Diffie-Hellman parameter for DHE ciphersuites, recommended 2048 bits
    ssl_dhparam         /tls/dhparam.pem;

    # intermediate configuration. tweak to your needs.
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:ECDHE-RSA-DES-CBC3-SHA:ECDHE-ECDSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA';
    ssl_prefer_server_ciphers on;

    # HSTS (ngx_http_headers_module is required) (15768000 seconds = 6 months)
    add_header Strict-Transport-Security "max-age=15724800; includeSubdomains; preload";


    # The resolver is hardcoded to the DNS server in all local/dev/prod k8s
    # clusters. Also, the 'cluster.local' domain is in reverse-proxy targets is
    # configurable, but all local/dev/prod k8s cluster are configured
    # identically.
    include /etc/nginx/k8s-resolver.conf;


    # Users service
    location = /api/users/login {
        # Apply anti-bruteforce rate-limitting to login.
        # Any additional requests coming from clients exceeding the
        # rate-limit are put into a shared queue of 5 requests (which
        # will start discarding requests with 503s when full)
        limit_req zone=antibf burst=5;
        proxy_pass http://users.default.svc.cluster.local$request_uri;
    }

    # Apply a more relaxed anti-DoS rate-limiting to all
    # authentication-unrelated endpoints
    limit_req zone=antidos burst=10;

    location /api/users/ {
        proxy_pass http://users.default.svc.cluster.local$request_uri;
    }

    location /api/app/ {
        proxy_pass http://authfe.default.svc.cluster.local$request_uri;
    }

    location /api/org/ {
        proxy_pass http://authfe.default.svc.cluster.local$request_uri;
    }

    location = /api/report {
        proxy_pass http://authfe.default.svc.cluster.local$request_uri;
    }

    # pipe delete requests from probe
    location ~ ^/api/pipe/pipe-[^/]+$ {
        proxy_pass http://authfe.default.svc.cluster.local$request_uri;
    }

    # topology (from UI), pipe (from both UI and probe) and control (from probe) websockets
    location ~ ^/api/(app/[^/]+/api/(topology/[^/]+/ws|pipe/pipe-[^/]+)|pipe/pipe-[^/]+/probe|control/ws)$ {
        proxy_pass http://authfe.default.svc.cluster.local$request_uri;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }

    # Static version file
    location = /api {
        alias /home/weave/api.json;
    }

    location /launch/k8s/ {
        proxy_pass http://launch-generator.default.svc.cluster.local$request_uri;
    }

    # The rest will be served by the ui-server
    location / {
        proxy_pass http://ui-server.default.svc.cluster.local$request_uri;
    }
}
