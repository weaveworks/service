# Define error rate
job:scope_request_errors:rate1m =
   (sum(rate(scope_request_duration_nanoseconds_count{namespace="default",status_code=~"5.."}[1m])) by (job)) /
   (sum(rate(scope_request_duration_nanoseconds_count{namespace="default"}[1m])) by (job))

# Define non-ws latency by route
job_route:scope_request_latency:max =
   max(scope_request_duration_nanoseconds{namespace="default", quantile="0.9", ws="false"}/1e6) by (job, route)

# Define non-ws latency
job:scope_request_latency:max =
   max(scope_request_duration_nanoseconds{namespace="default", quantile="0.9", ws="false"}/1e6) by (job)

# For each service, an alert on error rate

ALERT AuthFEErrorRate
  IF          job:scope_request_errors:rate1m{job="authfe"} > 0.1
  FOR         5m
  LABELS      { severity="critical" }
  ANNOTATIONS {
    summary = "authfe service: high error rate",
    description = "The authfe service has an error rate (response code >= 500) of {{$value}} errors per second.",
  }

ALERT UsersErrorRate
  IF          job:scope_request_errors:rate1m{job="users"} > 0.1
  FOR         5m
  LABELS      { severity="critical" }
  ANNOTATIONS {
    summary = "users service: high error rate",
    description = "The users service has an error rate (response code >= 500) of {{$value}} errors per second.",
  }

ALERT CollectionErrorRate
  IF          job:scope_request_errors:rate1m{job="collection"} > 0.1
  FOR         5m
  LABELS      { severity="critical" }
  ANNOTATIONS {
    summary =  "collection service: high error rate",
    description = "The collection service has an error rate (response code >= 500) of {{$value}} errors per second.",
  }

ALERT QueryErrorRate
  IF          job:scope_request_errors:rate1m{job="query"} > 0.1
  FOR         5m
  LABELS      { severity="critical" }
  ANNOTATIONS {
    summary = "query service: high error rate",
    description = "The query service has an error rate (response code >= 500) of {{$value}} errors per second.",
  }

# For each service, an alert on latency

ALERT AuthFELatency
  IF          max(job_route:scope_request_latency:max{job="authfe",route!~"admin|grafana"}) by (job) > 5000.0
  FOR         5m
  LABELS      { severity="warning" }
  ANNOTATIONS {
    summary = "authfe service: high latency",
    description = "The authfe service has a max 90th-quantile latency of {{$value}} ms.",
  }

ALERT UsersLatency
  IF          job:scope_request_latency:max{job="users"} > 5000.0
  FOR         5m
  LABELS      { severity="warning" }
  ANNOTATIONS {
    summary = "users service: high latency",
    description = "The users service has a max 90th-quantile latency of {{$value}} ms.",
  }

ALERT CollectionLatency
  IF          job:scope_request_latency:max{job="collection"} > 5000.0
  FOR         5m
  LABELS      { severity="warning" }
  ANNOTATIONS {
    summary = "collection service: high latency",
    description = "The collection service has a max 90th-quantile latency of {{$value}} ms.",
  }

ALERT QueryLatency
  IF          job:scope_request_latency:max{job="query"} > 5000.0
  FOR         5m
  LABELS      { severity="warning" }
  ANNOTATIONS {
    summary = "query service: high latency",
    description = "The query service has a max 90th-quantile latency of {{$value}} ms.",
  }

# For each service, an alert if it's absent

ALERT AuthFENoInstances
  IF          absent(scope_request_duration_nanoseconds{job="authfe"})
  FOR         5m
  LABELS      { severity="critical" }
  ANNOTATIONS {
    summary = "authfe service: no instances",
    description = "The authfe service has no running instances.",
  }

ALERT UsersNoInstances
  IF          absent(scope_request_duration_nanoseconds{job="users"})
  FOR         5m
  LABELS      { severity="critical" }
  ANNOTATIONS {
    summary = "users service: no instances",
    description = "The users service has no running instances.",
  }

ALERT CollectionNoInstances
  IF          absent(scope_request_duration_nanoseconds{job="collection"})
  FOR         5m
  LABELS      { severity="critical" }
  ANNOTATIONS {
    summary = "collection service: no instances",
    description = "The collection service has no running instances.",
  }

ALERT UsersNoInstances
  IF          absent(scope_request_duration_nanoseconds{job="query"})
  FOR         5m
  LABELS      { severity="critical" }
  ANNOTATIONS {
    summary = "query service: no instances",
    description = "The query service has no running instances.",
  }
