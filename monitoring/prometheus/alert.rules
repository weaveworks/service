# Define error rate
job:scope_request_errors:rate1m =
   (sum(rate(scope_request_duration_seconds_count{status_code=~"5.."}[1m])) by (job)) /
   (sum(rate(scope_request_duration_seconds_count[1m])) by (job))

# Alert if there is a kubediff or terradiff

ALERT Kubediff
  IF          max(command_exit_code{job="monitoring/kubediff"}) != 0
  FOR         2h
  LABELS      { severity="warning" }
  ANNOTATIONS {
    summary = "Kubediff has detected a difference in running config.",
    description = "Kubediff has detected a difference in running config.",
  }

ALERT Terradiff
  IF          max(command_exit_code{job="monitoring/terradiff"}) != 0
  FOR         2h
  LABELS      { severity="warning" }
  ANNOTATIONS {
    summary = "Terradiff has detected a difference in running config.",
    description = "Terradiff has detected a difference in running config.",
  }

# For each service, an alert on error rate

ALERT AuthFEErrorRate
  IF          job:scope_request_errors:rate1m{job="default/authfe"} > 0.1
  FOR         5m
  LABELS      { severity="critical" }
  ANNOTATIONS {
    summary = "authfe service: high error rate",
    description = "The authfe service has an error rate (response code >= 500) of {{$value}} errors per second.",
  }

ALERT UsersErrorRate
  IF          job:scope_request_errors:rate1m{job="default/users"} > 0.1
  FOR         5m
  LABELS      { severity="critical" }
  ANNOTATIONS {
    summary = "users service: high error rate",
    description = "The users service has an error rate (response code >= 500) of {{$value}} errors per second.",
  }

ALERT CollectionErrorRate
  IF          job:scope_request_errors:rate1m{job="scope/collection"} > 0.1
  FOR         5m
  LABELS      { severity="critical" }
  ANNOTATIONS {
    summary =  "collection service: high error rate",
    description = "The collection service has an error rate (response code >= 500) of {{$value}} errors per second.",
  }

ALERT QueryErrorRate
  IF          job:scope_request_errors:rate1m{job="scope/query"} > 0.1
  FOR         5m
  LABELS      { severity="critical" }
  ANNOTATIONS {
    summary = "query service: high error rate",
    description = "The query service has an error rate (response code >= 500) of {{$value}} errors per second.",
  }

# For each service, an alert on latency

ALERT AuthFELatency
  IF          :scope_authfe_request_duration_seconds:95quantile > 5.0
  FOR         5m
  LABELS      { severity="warning" }
  ANNOTATIONS {
    summary = "authfe service: high latency",
    description = "The authfe service has a max 95th-quantile latency of {{$value}} ms.",
  }

ALERT UsersLatency
  IF          job:scope_request_duration_seconds:95quantile{job="default/users"} > 5.0
  FOR         5m
  LABELS      { severity="warning" }
  ANNOTATIONS {
    summary = "users service: high latency",
    description = "The users service has a max 95th-quantile latency of {{$value}} ms.",
  }

ALERT CollectionLatency
  IF          job:scope_request_duration_seconds:95quantile{job="scope/collection"} > 5.0
  FOR         5m
  LABELS      { severity="warning" }
  ANNOTATIONS {
    summary = "collection service: high latency",
    description = "The collection service has a max 95th-quantile latency of {{$value}} ms.",
  }

ALERT QueryLatency
  IF          job:scope_request_duration_seconds:95quantile{job="scope/query"} > 5.0
  FOR         5m
  LABELS      { severity="warning" }
  ANNOTATIONS {
    summary = "query service: high latency",
    description = "The query service has a max 95th-quantile latency of {{$value}} ms.",
  }

# For each service, an alert if it's absent

ALERT AuthFENoInstances
  IF          absent(scope_request_duration_seconds_count{job="default/authfe"})
  FOR         5m
  LABELS      { severity="critical" }
  ANNOTATIONS {
    summary = "authfe service: no instances",
    description = "The authfe service has no running instances.",
  }

ALERT UsersNoInstances
  IF          absent(scope_request_duration_seconds_count{job="default/users"})
  FOR         5m
  LABELS      { severity="critical" }
  ANNOTATIONS {
    summary = "users service: no instances",
    description = "The users service has no running instances.",
  }

ALERT CollectionNoInstances
  IF          absent(scope_request_duration_seconds_count{job="scope/collection"})
  FOR         5m
  LABELS      { severity="critical" }
  ANNOTATIONS {
    summary = "collection service: no instances",
    description = "The collection service has no running instances.",
  }

ALERT QueryNoInstances
  IF          absent(scope_request_duration_seconds_count{job="scope/query"})
  FOR         5m
  LABELS      { severity="critical" }
  ANNOTATIONS {
    summary = "query service: no instances",
    description = "The query service has no running instances.",
  }

# Deployment-related alerts

ALERT DeploymentGenerationMismatch
  IF          k8s_deployment_status_observedGeneration{job="monitoring/kube-api-exporter"} != k8s_deployment_metadata_generation{job="monitoring/kube-api-exporter"}
  FOR         5m
  LABELS      { severity="critical" }
  ANNOTATIONS {
    summary = "Deployment of {{$labels.exported_namespace}}/{{$labels.name}} failed",
    description = "Deployment of {{$labels.exported_namespace}}/{{$labels.name}} failed - observed generation != intended generation.",
  }

ALERT DeploymentReplicasMismatch
  IF          (k8s_deployment_spec_replicas{job="monitoring/kube-api-exporter"} != k8s_deployment_status_availableReplicas{job="monitoring/kube-api-exporter"}) or (k8s_deployment_spec_replicas{job="monitoring/kube-api-exporter"} unless k8s_deployment_status_availableReplicas{job="monitoring/kube-api-exporter"})
  FOR         5m
  LABELS      { severity="critical" }
  ANNOTATIONS {
    summary = "Deployment of {{$labels.exported_namespace}}/{{$labels.name}} failed",
    description = "Deployment of {{$labels.exported_namespace}}/{{$labels.name}} failed - observed replicas != intended replicas.",
  }
