version: 2
defaults: &defaults
  machine:
    docker_layer_caching: true
  working_directory: /home/circleci/src/github.com/weaveworks/service
  environment:
    GOPATH: /home/circleci/
jobs:
  lint:
    <<: *defaults
    steps:
      - checkout
      - run: make RM= lint

  build:
    <<: *defaults
    steps:
      - checkout
      - run: sudo docker info >/dev/null 2>&1 || sudo service docker start;
      - run: |
          cd build
          ../tools/rebuild-image weaveworks/build . build.sh Dockerfile
          touch .uptodate
      - run: make RM=
      - run: make generated
      - run: |
          set -e
          set -o pipefail
          if [ $(./tools/image-tag | grep -e '-WIP$') ]; then
            echo "WIP build; exiting with error to mark as a failure"
            git --no-pager diff
            exit 1
          fi
      - run:
          name: Save docker images
          command: |
            IMAGE_TAG="$(./tools/image-tag)"
            IMAGES=$(make images)
            for image in ${IMAGES}; do
              if [[ "$image" == *"build"* ]]; then
                continue
              fi
              mkdir -p "build-images/$(dirname "$image")"
              docker save "${image}:${IMAGE_TAG}" -o "build-images/$image"
            done
      - persist_to_workspace:
          root: .
          paths:
            - build-images
            - gcp-service/grpc/gcp-service.pb.go
            - users/users.pb.go
            - users-sync/api/users-sync.pb.go
            - common/billing/grpc/billing.pb.go
            - kubectl-service/grpc/kubectl-service.pb.go
            - users/mock_users/mock_usersclient.go
            - billing-api/db/mock_db/mock_db.go
            - common/billing/grpc/mock_grpc.go
            - common/gcp/procurement/mock_procurement/mock_client.go
            - notification-eventmanager/templates/wrapper.html
            - notification-eventmanager/templates/wrapper.text
  test:
    <<: *defaults
    steps:
      - checkout
      - run: go get github.com/mattn/goveralls
      - run: COVERDIR=./coverage make RM= test
      - run: ./tools/cover/gather_coverage.sh ./coverage $CIRCLE_WORKING_DIRECTORY/coverage
      - run: ~/bin/goveralls -repotoken $COVERALLS_REPO_TOKEN -coverprofile=$CIRCLE_WORKING_DIRECTORY/profile.cov -service=circleci || true
      - run: mkdir /tmp/coverage && cp coverage.* /tmp/coverage
      - store_artifacts:
          path: /tmp/coverage

  integration-test:
    <<: *defaults
    steps:
      - checkout
      - attach_workspace:
          at: .
      - &pull-tmp-images
        run:
          name: Load docker images
          command: |
            find build-images -type f -exec docker load -i {} \;
            # Update files that would otherwise trigger a rebuild
            make build/.uptodate
            touch gcp-service/grpc/gcp-service.pb.go users/users.pb.go users-sync/api/users-sync.pb.go common/billing/grpc/billing.pb.go kubectl-service/grpc/kubectl-service.pb.go
            touch users/mock_users/mock_usersclient.go billing-api/db/mock_db/mock_db.go common/billing/grpc/mock_grpc.go common/gcp/procurement/mock_procurement/mock_client.go
            touch kubectl-service/kubectl-service gcp-service/gcp-service notification-eventmanager/cmd/eventmanager/eventmanager notification-sender/cmd/sender/sender
            touch kubectl-service/.uptodate gcp-service/.uptodate notification-eventmanager/.uptodate notification-sender/.uptodate
            touch notification-eventmanager/templates/wrapper.html notification-eventmanager/templates/wrapper.text
            # Set 'latest' tag on current images to override anything cached on host
            IMAGE_TAG="$(./tools/image-tag)"
            for image in $(make images); do
              docker tag "${image}:${IMAGE_TAG}" "${image}:latest"
            done

      - run: docker run -d -p 4222:4222 nats
      - run: make notebooks-integration-test
      - run: make users-integration-test
      - run: make billing-integration-test
      - run: make pubsub-integration-test
      - run: make flux-integration-test
      - run: make kubectl-service-integration-test
      - run: make gcp-service-integration-test
      - run: make notification-integration-test

  upload:
    <<: *defaults
    steps:
      - checkout
      - attach_workspace:
          at: .
      - <<: *pull-tmp-images
      - run:
          name: Publish docker images to final repository
          command: |
            set -o pipefail
            export LAST_BUILD_COMMIT=$(curl -sS 'https://circleci.com/api/v1/project/weaveworks/service/tree/'$CIRCLE_BRANCH'?circle-token='$CIRCLE_TOKEN'&filter=successful&limit=50' | jq -r 'map(select(.build_parameters.CIRCLE_JOB == "upload")) | .[0].vcs_revision')
            echo Last successful build was commit $LAST_BUILD_COMMIT
            mkdir ~/.aws
            echo $AWS_ECR_CREDENTIALS | base64 -d > ~/.aws/credentials
            $(aws ecr get-login --no-include-email --region us-east-1)
            IMAGE_REPOSITORY=664268111851.dkr.ecr.us-east-1.amazonaws.com ./push-images --if-changed-since $LAST_BUILD_COMMIT

  dry-run-upload:
    <<: *defaults
    steps:
      - checkout
      - attach_workspace:
          at: .
      - <<: *pull-tmp-images
      - run:
          name: Dry-run of publishing docker images
          command: |
            set -o pipefail
            export LAST_BUILD_COMMIT=$(curl -sS 'https://circleci.com/api/v1/project/weaveworks/service/tree/master?circle-token='$CIRCLE_TOKEN'&filter=successful&limit=50' | jq -r 'map(select(.build_parameters.CIRCLE_JOB == "upload")) | .[0].vcs_revision')
            echo Last successful build was commit $LAST_BUILD_COMMIT
            mkdir ~/.aws
            echo $AWS_ECR_CREDENTIALS | base64 -d > ~/.aws/credentials
            $(aws ecr get-login --no-include-email --region us-east-1)
            IMAGE_REPOSITORY=664268111851.dkr.ecr.us-east-1.amazonaws.com ./push-images --dry-run --if-changed-since $LAST_BUILD_COMMIT

workflows:
  version: 2
  build_test_and_upload:
    jobs:
      - lint
      - test
      - build
      # - integration-test:
      #     requires:
      #       - build
      #       - lint
      #       - test
      - upload:
          requires:
            - build
          filters:
            branches:
              only:
                - master
                - jp-authfe-handle-400s
      # - dry-run-upload:
      #     requires:
      #       - integration-test
      #     filters:
      #       branches:
      #         ignore: master
