// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: users.proto

package users

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type AuthorizedAction int32

const (
	OTHER AuthorizedAction = 0
	// Allows reading data
	INSTANCE_DATA_ACCESS AuthorizedAction = 1
	// Allows writing data
	INSTANCE_DATA_UPLOAD AuthorizedAction = 2
)

var AuthorizedAction_name = map[int32]string{
	0: "OTHER",
	1: "INSTANCE_DATA_ACCESS",
	2: "INSTANCE_DATA_UPLOAD",
}

var AuthorizedAction_value = map[string]int32{
	"OTHER":                0,
	"INSTANCE_DATA_ACCESS": 1,
	"INSTANCE_DATA_UPLOAD": 2,
}

func (AuthorizedAction) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_030765f334c86cea, []int{0}
}

type LookupOrgRequest struct {
	Cookie        string           `protobuf:"bytes,1,opt,name=Cookie,proto3" json:"Cookie,omitempty"`
	OrgExternalID string           `protobuf:"bytes,2,opt,name=OrgExternalID,proto3" json:"OrgExternalID,omitempty"`
	AuthorizeFor  AuthorizedAction `protobuf:"varint,4,opt,name=AuthorizeFor,proto3,enum=users.AuthorizedAction" json:"AuthorizeFor,omitempty"`
}

func (m *LookupOrgRequest) Reset()      { *m = LookupOrgRequest{} }
func (*LookupOrgRequest) ProtoMessage() {}
func (*LookupOrgRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_030765f334c86cea, []int{0}
}
func (m *LookupOrgRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LookupOrgRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LookupOrgRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LookupOrgRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LookupOrgRequest.Merge(m, src)
}
func (m *LookupOrgRequest) XXX_Size() int {
	return m.Size()
}
func (m *LookupOrgRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LookupOrgRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LookupOrgRequest proto.InternalMessageInfo

func (m *LookupOrgRequest) GetCookie() string {
	if m != nil {
		return m.Cookie
	}
	return ""
}

func (m *LookupOrgRequest) GetOrgExternalID() string {
	if m != nil {
		return m.OrgExternalID
	}
	return ""
}

func (m *LookupOrgRequest) GetAuthorizeFor() AuthorizedAction {
	if m != nil {
		return m.AuthorizeFor
	}
	return OTHER
}

type LookupOrgResponse struct {
	OrganizationID string   `protobuf:"bytes,1,opt,name=OrganizationID,proto3" json:"organizationID,omitempty"`
	UserID         string   `protobuf:"bytes,2,opt,name=UserID,proto3" json:"userID,omitempty"`
	FeatureFlags   []string `protobuf:"bytes,3,rep,name=FeatureFlags,proto3" json:"featureFlags,omitempty"`
}

func (m *LookupOrgResponse) Reset()      { *m = LookupOrgResponse{} }
func (*LookupOrgResponse) ProtoMessage() {}
func (*LookupOrgResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_030765f334c86cea, []int{1}
}
func (m *LookupOrgResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LookupOrgResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LookupOrgResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LookupOrgResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LookupOrgResponse.Merge(m, src)
}
func (m *LookupOrgResponse) XXX_Size() int {
	return m.Size()
}
func (m *LookupOrgResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LookupOrgResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LookupOrgResponse proto.InternalMessageInfo

func (m *LookupOrgResponse) GetOrganizationID() string {
	if m != nil {
		return m.OrganizationID
	}
	return ""
}

func (m *LookupOrgResponse) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *LookupOrgResponse) GetFeatureFlags() []string {
	if m != nil {
		return m.FeatureFlags
	}
	return nil
}

type LookupUsingTokenRequest struct {
	Token        string           `protobuf:"bytes,1,opt,name=Token,proto3" json:"Token,omitempty"`
	AuthorizeFor AuthorizedAction `protobuf:"varint,2,opt,name=AuthorizeFor,proto3,enum=users.AuthorizedAction" json:"AuthorizeFor,omitempty"`
}

func (m *LookupUsingTokenRequest) Reset()      { *m = LookupUsingTokenRequest{} }
func (*LookupUsingTokenRequest) ProtoMessage() {}
func (*LookupUsingTokenRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_030765f334c86cea, []int{2}
}
func (m *LookupUsingTokenRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LookupUsingTokenRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LookupUsingTokenRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LookupUsingTokenRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LookupUsingTokenRequest.Merge(m, src)
}
func (m *LookupUsingTokenRequest) XXX_Size() int {
	return m.Size()
}
func (m *LookupUsingTokenRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LookupUsingTokenRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LookupUsingTokenRequest proto.InternalMessageInfo

func (m *LookupUsingTokenRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *LookupUsingTokenRequest) GetAuthorizeFor() AuthorizedAction {
	if m != nil {
		return m.AuthorizeFor
	}
	return OTHER
}

type LookupUsingTokenResponse struct {
	OrganizationID string   `protobuf:"bytes,1,opt,name=OrganizationID,proto3" json:"organizationID,omitempty"`
	FeatureFlags   []string `protobuf:"bytes,2,rep,name=FeatureFlags,proto3" json:"featureFlags,omitempty"`
}

func (m *LookupUsingTokenResponse) Reset()      { *m = LookupUsingTokenResponse{} }
func (*LookupUsingTokenResponse) ProtoMessage() {}
func (*LookupUsingTokenResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_030765f334c86cea, []int{3}
}
func (m *LookupUsingTokenResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LookupUsingTokenResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LookupUsingTokenResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LookupUsingTokenResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LookupUsingTokenResponse.Merge(m, src)
}
func (m *LookupUsingTokenResponse) XXX_Size() int {
	return m.Size()
}
func (m *LookupUsingTokenResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LookupUsingTokenResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LookupUsingTokenResponse proto.InternalMessageInfo

func (m *LookupUsingTokenResponse) GetOrganizationID() string {
	if m != nil {
		return m.OrganizationID
	}
	return ""
}

func (m *LookupUsingTokenResponse) GetFeatureFlags() []string {
	if m != nil {
		return m.FeatureFlags
	}
	return nil
}

type LookupAdminRequest struct {
	Cookie string `protobuf:"bytes,1,opt,name=Cookie,proto3" json:"Cookie,omitempty"`
}

func (m *LookupAdminRequest) Reset()      { *m = LookupAdminRequest{} }
func (*LookupAdminRequest) ProtoMessage() {}
func (*LookupAdminRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_030765f334c86cea, []int{4}
}
func (m *LookupAdminRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LookupAdminRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LookupAdminRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LookupAdminRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LookupAdminRequest.Merge(m, src)
}
func (m *LookupAdminRequest) XXX_Size() int {
	return m.Size()
}
func (m *LookupAdminRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LookupAdminRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LookupAdminRequest proto.InternalMessageInfo

func (m *LookupAdminRequest) GetCookie() string {
	if m != nil {
		return m.Cookie
	}
	return ""
}

type LookupAdminResponse struct {
	AdminID string `protobuf:"bytes,1,opt,name=AdminID,proto3" json:"adminID,omitempty"`
}

func (m *LookupAdminResponse) Reset()      { *m = LookupAdminResponse{} }
func (*LookupAdminResponse) ProtoMessage() {}
func (*LookupAdminResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_030765f334c86cea, []int{5}
}
func (m *LookupAdminResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LookupAdminResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LookupAdminResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LookupAdminResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LookupAdminResponse.Merge(m, src)
}
func (m *LookupAdminResponse) XXX_Size() int {
	return m.Size()
}
func (m *LookupAdminResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LookupAdminResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LookupAdminResponse proto.InternalMessageInfo

func (m *LookupAdminResponse) GetAdminID() string {
	if m != nil {
		return m.AdminID
	}
	return ""
}

type LookupUserRequest struct {
	Cookie string `protobuf:"bytes,1,opt,name=Cookie,proto3" json:"Cookie,omitempty"`
}

func (m *LookupUserRequest) Reset()      { *m = LookupUserRequest{} }
func (*LookupUserRequest) ProtoMessage() {}
func (*LookupUserRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_030765f334c86cea, []int{6}
}
func (m *LookupUserRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LookupUserRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LookupUserRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LookupUserRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LookupUserRequest.Merge(m, src)
}
func (m *LookupUserRequest) XXX_Size() int {
	return m.Size()
}
func (m *LookupUserRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LookupUserRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LookupUserRequest proto.InternalMessageInfo

func (m *LookupUserRequest) GetCookie() string {
	if m != nil {
		return m.Cookie
	}
	return ""
}

type LookupUserResponse struct {
	UserID string `protobuf:"bytes,1,opt,name=UserID,proto3" json:"userID,omitempty"`
}

func (m *LookupUserResponse) Reset()      { *m = LookupUserResponse{} }
func (*LookupUserResponse) ProtoMessage() {}
func (*LookupUserResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_030765f334c86cea, []int{7}
}
func (m *LookupUserResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LookupUserResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LookupUserResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LookupUserResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LookupUserResponse.Merge(m, src)
}
func (m *LookupUserResponse) XXX_Size() int {
	return m.Size()
}
func (m *LookupUserResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LookupUserResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LookupUserResponse proto.InternalMessageInfo

func (m *LookupUserResponse) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

// GetOrganizationsRequest requests a list of organizations.
type GetOrganizationsRequest struct {
	// Query restricts the organizations returned. If specified, will find
	// only organizations that have Query as a substring of the organization
	// name.
	Query string `protobuf:"bytes,1,opt,name=Query,proto3" json:"Query,omitempty"`
	// If 0 or less, return everything. Otherwise, return a single page of
	// implementation-dependent results (currently 30).
	PageNumber     int32 `protobuf:"varint,2,opt,name=PageNumber,proto3" json:"PageNumber,omitempty"`
	IncludeDeleted bool  `protobuf:"varint,3,opt,name=IncludeDeleted,proto3" json:"IncludeDeleted,omitempty"`
}

func (m *GetOrganizationsRequest) Reset()      { *m = GetOrganizationsRequest{} }
func (*GetOrganizationsRequest) ProtoMessage() {}
func (*GetOrganizationsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_030765f334c86cea, []int{8}
}
func (m *GetOrganizationsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetOrganizationsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetOrganizationsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetOrganizationsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetOrganizationsRequest.Merge(m, src)
}
func (m *GetOrganizationsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetOrganizationsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetOrganizationsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetOrganizationsRequest proto.InternalMessageInfo

func (m *GetOrganizationsRequest) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

func (m *GetOrganizationsRequest) GetPageNumber() int32 {
	if m != nil {
		return m.PageNumber
	}
	return 0
}

func (m *GetOrganizationsRequest) GetIncludeDeleted() bool {
	if m != nil {
		return m.IncludeDeleted
	}
	return false
}

type GetOrganizationsResponse struct {
	Organizations []Organization `protobuf:"bytes,1,rep,name=Organizations,proto3" json:"Organizations"`
}

func (m *GetOrganizationsResponse) Reset()      { *m = GetOrganizationsResponse{} }
func (*GetOrganizationsResponse) ProtoMessage() {}
func (*GetOrganizationsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_030765f334c86cea, []int{9}
}
func (m *GetOrganizationsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetOrganizationsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetOrganizationsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetOrganizationsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetOrganizationsResponse.Merge(m, src)
}
func (m *GetOrganizationsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetOrganizationsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetOrganizationsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetOrganizationsResponse proto.InternalMessageInfo

func (m *GetOrganizationsResponse) GetOrganizations() []Organization {
	if m != nil {
		return m.Organizations
	}
	return nil
}

// An organization is billable if its trial period has expired.
type GetBillableOrganizationsRequest struct {
	// The current time for the purposes of determining whether the trial
	// period has expired.
	Now time.Time `protobuf:"bytes,1,opt,name=Now,proto3,stdtime" json:"Now"`
}

func (m *GetBillableOrganizationsRequest) Reset()      { *m = GetBillableOrganizationsRequest{} }
func (*GetBillableOrganizationsRequest) ProtoMessage() {}
func (*GetBillableOrganizationsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_030765f334c86cea, []int{10}
}
func (m *GetBillableOrganizationsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetBillableOrganizationsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetBillableOrganizationsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetBillableOrganizationsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBillableOrganizationsRequest.Merge(m, src)
}
func (m *GetBillableOrganizationsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetBillableOrganizationsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBillableOrganizationsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetBillableOrganizationsRequest proto.InternalMessageInfo

func (m *GetBillableOrganizationsRequest) GetNow() time.Time {
	if m != nil {
		return m.Now
	}
	return time.Time{}
}

type GetBillableOrganizationsResponse struct {
	Organizations []Organization `protobuf:"bytes,1,rep,name=Organizations,proto3" json:"Organizations"`
}

func (m *GetBillableOrganizationsResponse) Reset()      { *m = GetBillableOrganizationsResponse{} }
func (*GetBillableOrganizationsResponse) ProtoMessage() {}
func (*GetBillableOrganizationsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_030765f334c86cea, []int{11}
}
func (m *GetBillableOrganizationsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetBillableOrganizationsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetBillableOrganizationsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetBillableOrganizationsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBillableOrganizationsResponse.Merge(m, src)
}
func (m *GetBillableOrganizationsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetBillableOrganizationsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBillableOrganizationsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetBillableOrganizationsResponse proto.InternalMessageInfo

func (m *GetBillableOrganizationsResponse) GetOrganizations() []Organization {
	if m != nil {
		return m.Organizations
	}
	return nil
}

type GetTrialOrganizationsRequest struct {
	// The current time for the purposes of determining whether the trial
	// period has expired.
	Now time.Time `protobuf:"bytes,1,opt,name=Now,proto3,stdtime" json:"Now"`
}

func (m *GetTrialOrganizationsRequest) Reset()      { *m = GetTrialOrganizationsRequest{} }
func (*GetTrialOrganizationsRequest) ProtoMessage() {}
func (*GetTrialOrganizationsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_030765f334c86cea, []int{12}
}
func (m *GetTrialOrganizationsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTrialOrganizationsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTrialOrganizationsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTrialOrganizationsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTrialOrganizationsRequest.Merge(m, src)
}
func (m *GetTrialOrganizationsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetTrialOrganizationsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTrialOrganizationsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTrialOrganizationsRequest proto.InternalMessageInfo

func (m *GetTrialOrganizationsRequest) GetNow() time.Time {
	if m != nil {
		return m.Now
	}
	return time.Time{}
}

type GetTrialOrganizationsResponse struct {
	Organizations []Organization `protobuf:"bytes,1,rep,name=Organizations,proto3" json:"Organizations"`
}

func (m *GetTrialOrganizationsResponse) Reset()      { *m = GetTrialOrganizationsResponse{} }
func (*GetTrialOrganizationsResponse) ProtoMessage() {}
func (*GetTrialOrganizationsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_030765f334c86cea, []int{13}
}
func (m *GetTrialOrganizationsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTrialOrganizationsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTrialOrganizationsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTrialOrganizationsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTrialOrganizationsResponse.Merge(m, src)
}
func (m *GetTrialOrganizationsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetTrialOrganizationsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTrialOrganizationsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetTrialOrganizationsResponse proto.InternalMessageInfo

func (m *GetTrialOrganizationsResponse) GetOrganizations() []Organization {
	if m != nil {
		return m.Organizations
	}
	return nil
}

// An organization is delinquent if its trial period is expired and no
// associated payment account exists.
type GetDelinquentOrganizationsRequest struct {
	// The current time for the purposes of determining whether the trial
	// period has expired.
	Now time.Time `protobuf:"bytes,1,opt,name=Now,proto3,stdtime" json:"Now"`
}

func (m *GetDelinquentOrganizationsRequest) Reset()      { *m = GetDelinquentOrganizationsRequest{} }
func (*GetDelinquentOrganizationsRequest) ProtoMessage() {}
func (*GetDelinquentOrganizationsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_030765f334c86cea, []int{14}
}
func (m *GetDelinquentOrganizationsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetDelinquentOrganizationsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetDelinquentOrganizationsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetDelinquentOrganizationsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDelinquentOrganizationsRequest.Merge(m, src)
}
func (m *GetDelinquentOrganizationsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetDelinquentOrganizationsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDelinquentOrganizationsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetDelinquentOrganizationsRequest proto.InternalMessageInfo

func (m *GetDelinquentOrganizationsRequest) GetNow() time.Time {
	if m != nil {
		return m.Now
	}
	return time.Time{}
}

type GetDelinquentOrganizationsResponse struct {
	Organizations []Organization `protobuf:"bytes,1,rep,name=Organizations,proto3" json:"Organizations"`
}

func (m *GetDelinquentOrganizationsResponse) Reset()      { *m = GetDelinquentOrganizationsResponse{} }
func (*GetDelinquentOrganizationsResponse) ProtoMessage() {}
func (*GetDelinquentOrganizationsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_030765f334c86cea, []int{15}
}
func (m *GetDelinquentOrganizationsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetDelinquentOrganizationsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetDelinquentOrganizationsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetDelinquentOrganizationsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDelinquentOrganizationsResponse.Merge(m, src)
}
func (m *GetDelinquentOrganizationsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetDelinquentOrganizationsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDelinquentOrganizationsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetDelinquentOrganizationsResponse proto.InternalMessageInfo

func (m *GetDelinquentOrganizationsResponse) GetOrganizations() []Organization {
	if m != nil {
		return m.Organizations
	}
	return nil
}

type GetOrganizationRequest struct {
	// Types that are valid to be assigned to ID:
	//	*GetOrganizationRequest_ExternalID
	//	*GetOrganizationRequest_GCPExternalAccountID
	//	*GetOrganizationRequest_InternalID
	ID isGetOrganizationRequest_ID `protobuf_oneof:"ID"`
}

func (m *GetOrganizationRequest) Reset()      { *m = GetOrganizationRequest{} }
func (*GetOrganizationRequest) ProtoMessage() {}
func (*GetOrganizationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_030765f334c86cea, []int{16}
}
func (m *GetOrganizationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetOrganizationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetOrganizationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetOrganizationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetOrganizationRequest.Merge(m, src)
}
func (m *GetOrganizationRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetOrganizationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetOrganizationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetOrganizationRequest proto.InternalMessageInfo

type isGetOrganizationRequest_ID interface {
	isGetOrganizationRequest_ID()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GetOrganizationRequest_ExternalID struct {
	ExternalID string `protobuf:"bytes,1,opt,name=ExternalID,proto3,oneof" json:"ExternalID,omitempty"`
}
type GetOrganizationRequest_GCPExternalAccountID struct {
	GCPExternalAccountID string `protobuf:"bytes,2,opt,name=GCPExternalAccountID,proto3,oneof" json:"GCPExternalAccountID,omitempty"`
}
type GetOrganizationRequest_InternalID struct {
	InternalID string `protobuf:"bytes,3,opt,name=InternalID,proto3,oneof" json:"InternalID,omitempty"`
}

func (*GetOrganizationRequest_ExternalID) isGetOrganizationRequest_ID()           {}
func (*GetOrganizationRequest_GCPExternalAccountID) isGetOrganizationRequest_ID() {}
func (*GetOrganizationRequest_InternalID) isGetOrganizationRequest_ID()           {}

func (m *GetOrganizationRequest) GetID() isGetOrganizationRequest_ID {
	if m != nil {
		return m.ID
	}
	return nil
}

func (m *GetOrganizationRequest) GetExternalID() string {
	if x, ok := m.GetID().(*GetOrganizationRequest_ExternalID); ok {
		return x.ExternalID
	}
	return ""
}

func (m *GetOrganizationRequest) GetGCPExternalAccountID() string {
	if x, ok := m.GetID().(*GetOrganizationRequest_GCPExternalAccountID); ok {
		return x.GCPExternalAccountID
	}
	return ""
}

func (m *GetOrganizationRequest) GetInternalID() string {
	if x, ok := m.GetID().(*GetOrganizationRequest_InternalID); ok {
		return x.InternalID
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GetOrganizationRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GetOrganizationRequest_ExternalID)(nil),
		(*GetOrganizationRequest_GCPExternalAccountID)(nil),
		(*GetOrganizationRequest_InternalID)(nil),
	}
}

type GetOrganizationResponse struct {
	Organization Organization `protobuf:"bytes,1,opt,name=Organization,proto3" json:"Organization"`
}

func (m *GetOrganizationResponse) Reset()      { *m = GetOrganizationResponse{} }
func (*GetOrganizationResponse) ProtoMessage() {}
func (*GetOrganizationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_030765f334c86cea, []int{17}
}
func (m *GetOrganizationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetOrganizationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetOrganizationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetOrganizationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetOrganizationResponse.Merge(m, src)
}
func (m *GetOrganizationResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetOrganizationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetOrganizationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetOrganizationResponse proto.InternalMessageInfo

func (m *GetOrganizationResponse) GetOrganization() Organization {
	if m != nil {
		return m.Organization
	}
	return Organization{}
}

type Organization struct {
	ID                   string     `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	ExternalID           string     `protobuf:"bytes,2,opt,name=ExternalID,proto3" json:"ExternalID,omitempty"`
	Name                 string     `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
	ProbeToken           string     `protobuf:"bytes,4,opt,name=ProbeToken,proto3" json:"ProbeToken,omitempty"`
	CreatedAt            time.Time  `protobuf:"bytes,5,opt,name=CreatedAt,proto3,stdtime" json:"CreatedAt"`
	FeatureFlags         []string   `protobuf:"bytes,6,rep,name=FeatureFlags,proto3" json:"FeatureFlags,omitempty"`
	RefuseDataAccess     bool       `protobuf:"varint,7,opt,name=RefuseDataAccess,proto3" json:"RefuseDataAccess,omitempty"`
	RefuseDataUpload     bool       `protobuf:"varint,8,opt,name=RefuseDataUpload,proto3" json:"RefuseDataUpload,omitempty"`
	FirstSeenConnectedAt *time.Time `protobuf:"bytes,9,opt,name=FirstSeenConnectedAt,proto3,stdtime" json:"FirstSeenConnectedAt,omitempty"`
	Platform             string     `protobuf:"bytes,10,opt,name=Platform,proto3" json:"Platform,omitempty"`
	Environment          string     `protobuf:"bytes,11,opt,name=Environment,proto3" json:"Environment,omitempty"`
	// When the organization's trial period expires.
	TrialExpiresAt        time.Time  `protobuf:"bytes,12,opt,name=TrialExpiresAt,proto3,stdtime" json:"TrialExpiresAt"`
	ZuoraAccountNumber    string     `protobuf:"bytes,13,opt,name=ZuoraAccountNumber,proto3" json:"ZuoraAccountNumber,omitempty"`
	ZuoraAccountCreatedAt *time.Time `protobuf:"bytes,14,opt,name=ZuoraAccountCreatedAt,proto3,stdtime" json:"ZuoraAccountCreatedAt,omitempty"`
	// When we sent a «trial expiring soon» notification at
	TrialPendingExpiryNotifiedAt *time.Time `protobuf:"bytes,15,opt,name=TrialPendingExpiryNotifiedAt,proto3,stdtime" json:"TrialPendingExpiryNotifiedAt,omitempty"`
	// When we sent a «trial expired» notification at
	TrialExpiredNotifiedAt *time.Time `protobuf:"bytes,16,opt,name=TrialExpiredNotifiedAt,proto3,stdtime" json:"TrialExpiredNotifiedAt,omitempty"`
	// For organizations that are coming from GCP
	GCP                       *GoogleCloudPlatform `protobuf:"bytes,17,opt,name=GCP,proto3" json:"GCP,omitempty"`
	TeamID                    string               `protobuf:"bytes,18,opt,name=TeamID,proto3" json:"TeamID,omitempty"`
	TeamExternalID            string               `protobuf:"bytes,19,opt,name=TeamExternalID,proto3" json:"TeamExternalID,omitempty"`
	DeletedAt                 time.Time            `protobuf:"bytes,20,opt,name=DeletedAt,proto3,stdtime" json:"DeletedAt"`
	Cleanup                   bool                 `protobuf:"varint,21,opt,name=Cleanup,proto3" json:"Cleanup,omitempty"`
	FirstSeenFluxConnectedAt  *time.Time           `protobuf:"bytes,22,opt,name=FirstSeenFluxConnectedAt,proto3,stdtime" json:"FirstSeenFluxConnectedAt,omitempty"`
	FirstSeenNetConnectedAt   *time.Time           `protobuf:"bytes,23,opt,name=FirstSeenNetConnectedAt,proto3,stdtime" json:"FirstSeenNetConnectedAt,omitempty"`
	FirstSeenPromConnectedAt  *time.Time           `protobuf:"bytes,24,opt,name=FirstSeenPromConnectedAt,proto3,stdtime" json:"FirstSeenPromConnectedAt,omitempty"`
	FirstSeenScopeConnectedAt *time.Time           `protobuf:"bytes,25,opt,name=FirstSeenScopeConnectedAt,proto3,stdtime" json:"FirstSeenScopeConnectedAt,omitempty"`
	// Replacing the default data refusal reason
	RefuseDataReason string `protobuf:"bytes,26,opt,name=RefuseDataReason,proto3" json:"RefuseDataReason,omitempty"`
	// Keeping track of when weekly report email was last sent for the instance
	LastSentWeeklyReportAt *time.Time `protobuf:"bytes,27,opt,name=LastSentWeeklyReportAt,proto3,stdtime" json:"LastSentWeeklyReportAt,omitempty"`
	// Used by the admin interface
	PlatformVersion string `protobuf:"bytes,28,opt,name=PlatformVersion,proto3" json:"PlatformVersion,omitempty"`
	DeletedBy       string `protobuf:"bytes,29,opt,name=DeletedBy,proto3" json:"DeletedBy,omitempty"`
}

func (m *Organization) Reset()      { *m = Organization{} }
func (*Organization) ProtoMessage() {}
func (*Organization) Descriptor() ([]byte, []int) {
	return fileDescriptor_030765f334c86cea, []int{18}
}
func (m *Organization) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Organization) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Organization.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Organization) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Organization.Merge(m, src)
}
func (m *Organization) XXX_Size() int {
	return m.Size()
}
func (m *Organization) XXX_DiscardUnknown() {
	xxx_messageInfo_Organization.DiscardUnknown(m)
}

var xxx_messageInfo_Organization proto.InternalMessageInfo

func (m *Organization) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Organization) GetExternalID() string {
	if m != nil {
		return m.ExternalID
	}
	return ""
}

func (m *Organization) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Organization) GetProbeToken() string {
	if m != nil {
		return m.ProbeToken
	}
	return ""
}

func (m *Organization) GetCreatedAt() time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return time.Time{}
}

func (m *Organization) GetFeatureFlags() []string {
	if m != nil {
		return m.FeatureFlags
	}
	return nil
}

func (m *Organization) GetRefuseDataAccess() bool {
	if m != nil {
		return m.RefuseDataAccess
	}
	return false
}

func (m *Organization) GetRefuseDataUpload() bool {
	if m != nil {
		return m.RefuseDataUpload
	}
	return false
}

func (m *Organization) GetFirstSeenConnectedAt() *time.Time {
	if m != nil {
		return m.FirstSeenConnectedAt
	}
	return nil
}

func (m *Organization) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *Organization) GetEnvironment() string {
	if m != nil {
		return m.Environment
	}
	return ""
}

func (m *Organization) GetTrialExpiresAt() time.Time {
	if m != nil {
		return m.TrialExpiresAt
	}
	return time.Time{}
}

func (m *Organization) GetZuoraAccountNumber() string {
	if m != nil {
		return m.ZuoraAccountNumber
	}
	return ""
}

func (m *Organization) GetZuoraAccountCreatedAt() *time.Time {
	if m != nil {
		return m.ZuoraAccountCreatedAt
	}
	return nil
}

func (m *Organization) GetTrialPendingExpiryNotifiedAt() *time.Time {
	if m != nil {
		return m.TrialPendingExpiryNotifiedAt
	}
	return nil
}

func (m *Organization) GetTrialExpiredNotifiedAt() *time.Time {
	if m != nil {
		return m.TrialExpiredNotifiedAt
	}
	return nil
}

func (m *Organization) GetGCP() *GoogleCloudPlatform {
	if m != nil {
		return m.GCP
	}
	return nil
}

func (m *Organization) GetTeamID() string {
	if m != nil {
		return m.TeamID
	}
	return ""
}

func (m *Organization) GetTeamExternalID() string {
	if m != nil {
		return m.TeamExternalID
	}
	return ""
}

func (m *Organization) GetDeletedAt() time.Time {
	if m != nil {
		return m.DeletedAt
	}
	return time.Time{}
}

func (m *Organization) GetCleanup() bool {
	if m != nil {
		return m.Cleanup
	}
	return false
}

func (m *Organization) GetFirstSeenFluxConnectedAt() *time.Time {
	if m != nil {
		return m.FirstSeenFluxConnectedAt
	}
	return nil
}

func (m *Organization) GetFirstSeenNetConnectedAt() *time.Time {
	if m != nil {
		return m.FirstSeenNetConnectedAt
	}
	return nil
}

func (m *Organization) GetFirstSeenPromConnectedAt() *time.Time {
	if m != nil {
		return m.FirstSeenPromConnectedAt
	}
	return nil
}

func (m *Organization) GetFirstSeenScopeConnectedAt() *time.Time {
	if m != nil {
		return m.FirstSeenScopeConnectedAt
	}
	return nil
}

func (m *Organization) GetRefuseDataReason() string {
	if m != nil {
		return m.RefuseDataReason
	}
	return ""
}

func (m *Organization) GetLastSentWeeklyReportAt() *time.Time {
	if m != nil {
		return m.LastSentWeeklyReportAt
	}
	return nil
}

func (m *Organization) GetPlatformVersion() string {
	if m != nil {
		return m.PlatformVersion
	}
	return ""
}

func (m *Organization) GetDeletedBy() string {
	if m != nil {
		return m.DeletedBy
	}
	return ""
}

type GoogleCloudPlatform struct {
	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	// External account ID from Google
	ExternalAccountID string `protobuf:"bytes,2,opt,name=ExternalAccountID,proto3" json:"ExternalAccountID,omitempty"`
	// Whether the GCP account has been activated or not. Note that this does not describe the state of the subscription.
	Activated bool      `protobuf:"varint,3,opt,name=Activated,proto3" json:"Activated,omitempty"`
	CreatedAt time.Time `protobuf:"bytes,4,opt,name=CreatedAt,proto3,stdtime" json:"CreatedAt"`
	// Consumer ID to report usage against
	ConsumerID string `protobuf:"bytes,5,opt,name=ConsumerID,proto3" json:"ConsumerID,omitempty"`
	// Name of the running subscription, in the format "entitlements/*"
	SubscriptionName string `protobuf:"bytes,6,opt,name=SubscriptionName,proto3" json:"SubscriptionName,omitempty"`
	// Level of the subscription, can be "standard" or "enterprise"
	SubscriptionLevel string `protobuf:"bytes,7,opt,name=SubscriptionLevel,proto3" json:"SubscriptionLevel,omitempty"`
	// Status of the entitlement, see /common/gcp/procurement.EntitlementState
	SubscriptionStatus string `protobuf:"bytes,8,opt,name=SubscriptionStatus,proto3" json:"SubscriptionStatus,omitempty"`
}

func (m *GoogleCloudPlatform) Reset()      { *m = GoogleCloudPlatform{} }
func (*GoogleCloudPlatform) ProtoMessage() {}
func (*GoogleCloudPlatform) Descriptor() ([]byte, []int) {
	return fileDescriptor_030765f334c86cea, []int{19}
}
func (m *GoogleCloudPlatform) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GoogleCloudPlatform) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GoogleCloudPlatform.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GoogleCloudPlatform) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GoogleCloudPlatform.Merge(m, src)
}
func (m *GoogleCloudPlatform) XXX_Size() int {
	return m.Size()
}
func (m *GoogleCloudPlatform) XXX_DiscardUnknown() {
	xxx_messageInfo_GoogleCloudPlatform.DiscardUnknown(m)
}

var xxx_messageInfo_GoogleCloudPlatform proto.InternalMessageInfo

func (m *GoogleCloudPlatform) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *GoogleCloudPlatform) GetExternalAccountID() string {
	if m != nil {
		return m.ExternalAccountID
	}
	return ""
}

func (m *GoogleCloudPlatform) GetActivated() bool {
	if m != nil {
		return m.Activated
	}
	return false
}

func (m *GoogleCloudPlatform) GetCreatedAt() time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return time.Time{}
}

func (m *GoogleCloudPlatform) GetConsumerID() string {
	if m != nil {
		return m.ConsumerID
	}
	return ""
}

func (m *GoogleCloudPlatform) GetSubscriptionName() string {
	if m != nil {
		return m.SubscriptionName
	}
	return ""
}

func (m *GoogleCloudPlatform) GetSubscriptionLevel() string {
	if m != nil {
		return m.SubscriptionLevel
	}
	return ""
}

func (m *GoogleCloudPlatform) GetSubscriptionStatus() string {
	if m != nil {
		return m.SubscriptionStatus
	}
	return ""
}

type GetGCPRequest struct {
	ExternalAccountID string `protobuf:"bytes,1,opt,name=ExternalAccountID,proto3" json:"ExternalAccountID,omitempty"`
}

func (m *GetGCPRequest) Reset()      { *m = GetGCPRequest{} }
func (*GetGCPRequest) ProtoMessage() {}
func (*GetGCPRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_030765f334c86cea, []int{20}
}
func (m *GetGCPRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetGCPRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetGCPRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetGCPRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetGCPRequest.Merge(m, src)
}
func (m *GetGCPRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetGCPRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetGCPRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetGCPRequest proto.InternalMessageInfo

func (m *GetGCPRequest) GetExternalAccountID() string {
	if m != nil {
		return m.ExternalAccountID
	}
	return ""
}

type GetGCPResponse struct {
	GCP GoogleCloudPlatform `protobuf:"bytes,1,opt,name=GCP,proto3" json:"GCP"`
}

func (m *GetGCPResponse) Reset()      { *m = GetGCPResponse{} }
func (*GetGCPResponse) ProtoMessage() {}
func (*GetGCPResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_030765f334c86cea, []int{21}
}
func (m *GetGCPResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetGCPResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetGCPResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetGCPResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetGCPResponse.Merge(m, src)
}
func (m *GetGCPResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetGCPResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetGCPResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetGCPResponse proto.InternalMessageInfo

func (m *GetGCPResponse) GetGCP() GoogleCloudPlatform {
	if m != nil {
		return m.GCP
	}
	return GoogleCloudPlatform{}
}

type UpdateGCPRequest struct {
	GCP *GoogleCloudPlatform `protobuf:"bytes,1,opt,name=GCP,proto3" json:"GCP,omitempty"`
}

func (m *UpdateGCPRequest) Reset()      { *m = UpdateGCPRequest{} }
func (*UpdateGCPRequest) ProtoMessage() {}
func (*UpdateGCPRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_030765f334c86cea, []int{22}
}
func (m *UpdateGCPRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateGCPRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateGCPRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateGCPRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateGCPRequest.Merge(m, src)
}
func (m *UpdateGCPRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateGCPRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateGCPRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateGCPRequest proto.InternalMessageInfo

func (m *UpdateGCPRequest) GetGCP() *GoogleCloudPlatform {
	if m != nil {
		return m.GCP
	}
	return nil
}

type UpdateGCPResponse struct {
}

func (m *UpdateGCPResponse) Reset()      { *m = UpdateGCPResponse{} }
func (*UpdateGCPResponse) ProtoMessage() {}
func (*UpdateGCPResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_030765f334c86cea, []int{23}
}
func (m *UpdateGCPResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateGCPResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateGCPResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateGCPResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateGCPResponse.Merge(m, src)
}
func (m *UpdateGCPResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateGCPResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateGCPResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateGCPResponse proto.InternalMessageInfo

type SetOrganizationZuoraAccountRequest struct {
	ExternalID string     `protobuf:"bytes,1,opt,name=ExternalID,proto3" json:"ExternalID,omitempty"`
	Number     string     `protobuf:"bytes,2,opt,name=Number,proto3" json:"Number,omitempty"`
	CreatedAt  *time.Time `protobuf:"bytes,3,opt,name=CreatedAt,proto3,stdtime" json:"CreatedAt,omitempty"`
}

func (m *SetOrganizationZuoraAccountRequest) Reset()      { *m = SetOrganizationZuoraAccountRequest{} }
func (*SetOrganizationZuoraAccountRequest) ProtoMessage() {}
func (*SetOrganizationZuoraAccountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_030765f334c86cea, []int{24}
}
func (m *SetOrganizationZuoraAccountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetOrganizationZuoraAccountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetOrganizationZuoraAccountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetOrganizationZuoraAccountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetOrganizationZuoraAccountRequest.Merge(m, src)
}
func (m *SetOrganizationZuoraAccountRequest) XXX_Size() int {
	return m.Size()
}
func (m *SetOrganizationZuoraAccountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetOrganizationZuoraAccountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetOrganizationZuoraAccountRequest proto.InternalMessageInfo

func (m *SetOrganizationZuoraAccountRequest) GetExternalID() string {
	if m != nil {
		return m.ExternalID
	}
	return ""
}

func (m *SetOrganizationZuoraAccountRequest) GetNumber() string {
	if m != nil {
		return m.Number
	}
	return ""
}

func (m *SetOrganizationZuoraAccountRequest) GetCreatedAt() *time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

type SetOrganizationZuoraAccountResponse struct {
}

func (m *SetOrganizationZuoraAccountResponse) Reset()      { *m = SetOrganizationZuoraAccountResponse{} }
func (*SetOrganizationZuoraAccountResponse) ProtoMessage() {}
func (*SetOrganizationZuoraAccountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_030765f334c86cea, []int{25}
}
func (m *SetOrganizationZuoraAccountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetOrganizationZuoraAccountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetOrganizationZuoraAccountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetOrganizationZuoraAccountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetOrganizationZuoraAccountResponse.Merge(m, src)
}
func (m *SetOrganizationZuoraAccountResponse) XXX_Size() int {
	return m.Size()
}
func (m *SetOrganizationZuoraAccountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SetOrganizationZuoraAccountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SetOrganizationZuoraAccountResponse proto.InternalMessageInfo

type SetOrganizationFlagRequest struct {
	ExternalID string `protobuf:"bytes,1,opt,name=ExternalID,proto3" json:"ExternalID,omitempty"`
	Flag       string `protobuf:"bytes,2,opt,name=Flag,proto3" json:"Flag,omitempty"`
	Value      bool   `protobuf:"varint,3,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (m *SetOrganizationFlagRequest) Reset()      { *m = SetOrganizationFlagRequest{} }
func (*SetOrganizationFlagRequest) ProtoMessage() {}
func (*SetOrganizationFlagRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_030765f334c86cea, []int{26}
}
func (m *SetOrganizationFlagRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetOrganizationFlagRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetOrganizationFlagRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetOrganizationFlagRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetOrganizationFlagRequest.Merge(m, src)
}
func (m *SetOrganizationFlagRequest) XXX_Size() int {
	return m.Size()
}
func (m *SetOrganizationFlagRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetOrganizationFlagRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetOrganizationFlagRequest proto.InternalMessageInfo

func (m *SetOrganizationFlagRequest) GetExternalID() string {
	if m != nil {
		return m.ExternalID
	}
	return ""
}

func (m *SetOrganizationFlagRequest) GetFlag() string {
	if m != nil {
		return m.Flag
	}
	return ""
}

func (m *SetOrganizationFlagRequest) GetValue() bool {
	if m != nil {
		return m.Value
	}
	return false
}

type SetOrganizationFlagResponse struct {
}

func (m *SetOrganizationFlagResponse) Reset()      { *m = SetOrganizationFlagResponse{} }
func (*SetOrganizationFlagResponse) ProtoMessage() {}
func (*SetOrganizationFlagResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_030765f334c86cea, []int{27}
}
func (m *SetOrganizationFlagResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetOrganizationFlagResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetOrganizationFlagResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetOrganizationFlagResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetOrganizationFlagResponse.Merge(m, src)
}
func (m *SetOrganizationFlagResponse) XXX_Size() int {
	return m.Size()
}
func (m *SetOrganizationFlagResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SetOrganizationFlagResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SetOrganizationFlagResponse proto.InternalMessageInfo

type GetUserRequest struct {
	UserID string `protobuf:"bytes,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
}

func (m *GetUserRequest) Reset()      { *m = GetUserRequest{} }
func (*GetUserRequest) ProtoMessage() {}
func (*GetUserRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_030765f334c86cea, []int{28}
}
func (m *GetUserRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetUserRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetUserRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetUserRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUserRequest.Merge(m, src)
}
func (m *GetUserRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetUserRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUserRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetUserRequest proto.InternalMessageInfo

func (m *GetUserRequest) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

type GetUserResponse struct {
	User User `protobuf:"bytes,1,opt,name=User,proto3" json:"User"`
}

func (m *GetUserResponse) Reset()      { *m = GetUserResponse{} }
func (*GetUserResponse) ProtoMessage() {}
func (*GetUserResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_030765f334c86cea, []int{29}
}
func (m *GetUserResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetUserResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetUserResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetUserResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUserResponse.Merge(m, src)
}
func (m *GetUserResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetUserResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUserResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetUserResponse proto.InternalMessageInfo

func (m *GetUserResponse) GetUser() User {
	if m != nil {
		return m.User
	}
	return User{}
}

type GetOrganizationsReadyForWeeklyReportRequest struct {
	Now time.Time `protobuf:"bytes,1,opt,name=Now,proto3,stdtime" json:"Now"`
}

func (m *GetOrganizationsReadyForWeeklyReportRequest) Reset() {
	*m = GetOrganizationsReadyForWeeklyReportRequest{}
}
func (*GetOrganizationsReadyForWeeklyReportRequest) ProtoMessage() {}
func (*GetOrganizationsReadyForWeeklyReportRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_030765f334c86cea, []int{30}
}
func (m *GetOrganizationsReadyForWeeklyReportRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetOrganizationsReadyForWeeklyReportRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetOrganizationsReadyForWeeklyReportRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetOrganizationsReadyForWeeklyReportRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetOrganizationsReadyForWeeklyReportRequest.Merge(m, src)
}
func (m *GetOrganizationsReadyForWeeklyReportRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetOrganizationsReadyForWeeklyReportRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetOrganizationsReadyForWeeklyReportRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetOrganizationsReadyForWeeklyReportRequest proto.InternalMessageInfo

func (m *GetOrganizationsReadyForWeeklyReportRequest) GetNow() time.Time {
	if m != nil {
		return m.Now
	}
	return time.Time{}
}

type GetOrganizationsReadyForWeeklyReportResponse struct {
	Organizations []Organization `protobuf:"bytes,1,rep,name=Organizations,proto3" json:"Organizations"`
}

func (m *GetOrganizationsReadyForWeeklyReportResponse) Reset() {
	*m = GetOrganizationsReadyForWeeklyReportResponse{}
}
func (*GetOrganizationsReadyForWeeklyReportResponse) ProtoMessage() {}
func (*GetOrganizationsReadyForWeeklyReportResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_030765f334c86cea, []int{31}
}
func (m *GetOrganizationsReadyForWeeklyReportResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetOrganizationsReadyForWeeklyReportResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetOrganizationsReadyForWeeklyReportResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetOrganizationsReadyForWeeklyReportResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetOrganizationsReadyForWeeklyReportResponse.Merge(m, src)
}
func (m *GetOrganizationsReadyForWeeklyReportResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetOrganizationsReadyForWeeklyReportResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetOrganizationsReadyForWeeklyReportResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetOrganizationsReadyForWeeklyReportResponse proto.InternalMessageInfo

func (m *GetOrganizationsReadyForWeeklyReportResponse) GetOrganizations() []Organization {
	if m != nil {
		return m.Organizations
	}
	return nil
}

type SendOutWeeklyReportRequest struct {
	Now        time.Time `protobuf:"bytes,1,opt,name=Now,proto3,stdtime" json:"Now"`
	ExternalID string    `protobuf:"bytes,2,opt,name=ExternalID,proto3" json:"ExternalID,omitempty"`
}

func (m *SendOutWeeklyReportRequest) Reset()      { *m = SendOutWeeklyReportRequest{} }
func (*SendOutWeeklyReportRequest) ProtoMessage() {}
func (*SendOutWeeklyReportRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_030765f334c86cea, []int{32}
}
func (m *SendOutWeeklyReportRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SendOutWeeklyReportRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SendOutWeeklyReportRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SendOutWeeklyReportRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendOutWeeklyReportRequest.Merge(m, src)
}
func (m *SendOutWeeklyReportRequest) XXX_Size() int {
	return m.Size()
}
func (m *SendOutWeeklyReportRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SendOutWeeklyReportRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SendOutWeeklyReportRequest proto.InternalMessageInfo

func (m *SendOutWeeklyReportRequest) GetNow() time.Time {
	if m != nil {
		return m.Now
	}
	return time.Time{}
}

func (m *SendOutWeeklyReportRequest) GetExternalID() string {
	if m != nil {
		return m.ExternalID
	}
	return ""
}

type SendOutWeeklyReportResponse struct {
}

func (m *SendOutWeeklyReportResponse) Reset()      { *m = SendOutWeeklyReportResponse{} }
func (*SendOutWeeklyReportResponse) ProtoMessage() {}
func (*SendOutWeeklyReportResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_030765f334c86cea, []int{33}
}
func (m *SendOutWeeklyReportResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SendOutWeeklyReportResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SendOutWeeklyReportResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SendOutWeeklyReportResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendOutWeeklyReportResponse.Merge(m, src)
}
func (m *SendOutWeeklyReportResponse) XXX_Size() int {
	return m.Size()
}
func (m *SendOutWeeklyReportResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SendOutWeeklyReportResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SendOutWeeklyReportResponse proto.InternalMessageInfo

type User struct {
	ID             string    `protobuf:"bytes,1,opt,name=ID,proto3" json:"-"`
	Email          string    `protobuf:"bytes,2,opt,name=Email,proto3" json:"email"`
	Token          string    `protobuf:"bytes,3,opt,name=Token,proto3" json:"-"`
	TokenCreatedAt time.Time `protobuf:"bytes,4,opt,name=TokenCreatedAt,proto3,stdtime" json:"-"`
	FirstLoginAt   time.Time `protobuf:"bytes,5,opt,name=FirstLoginAt,proto3,stdtime" json:"-"`
	CreatedAt      time.Time `protobuf:"bytes,6,opt,name=CreatedAt,proto3,stdtime" json:"-"`
	Admin          bool      `protobuf:"varint,7,opt,name=Admin,proto3" json:"-"`
	LastLoginAt    time.Time `protobuf:"bytes,8,opt,name=LastLoginAt,proto3,stdtime" json:"-"`
	Company        string    `protobuf:"bytes,9,opt,name=Company,proto3" json:"company"`
	Name           string    `protobuf:"bytes,10,opt,name=Name,proto3" json:"name"`
	FirstName      string    `protobuf:"bytes,11,opt,name=FirstName,proto3" json:"firstName"`
	LastName       string    `protobuf:"bytes,12,opt,name=LastName,proto3" json:"lastName"`
}

func (m *User) Reset()      { *m = User{} }
func (*User) ProtoMessage() {}
func (*User) Descriptor() ([]byte, []int) {
	return fileDescriptor_030765f334c86cea, []int{34}
}
func (m *User) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User.Merge(m, src)
}
func (m *User) XXX_Size() int {
	return m.Size()
}
func (m *User) XXX_DiscardUnknown() {
	xxx_messageInfo_User.DiscardUnknown(m)
}

var xxx_messageInfo_User proto.InternalMessageInfo

func (m *User) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *User) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *User) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *User) GetTokenCreatedAt() time.Time {
	if m != nil {
		return m.TokenCreatedAt
	}
	return time.Time{}
}

func (m *User) GetFirstLoginAt() time.Time {
	if m != nil {
		return m.FirstLoginAt
	}
	return time.Time{}
}

func (m *User) GetCreatedAt() time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return time.Time{}
}

func (m *User) GetAdmin() bool {
	if m != nil {
		return m.Admin
	}
	return false
}

func (m *User) GetLastLoginAt() time.Time {
	if m != nil {
		return m.LastLoginAt
	}
	return time.Time{}
}

func (m *User) GetCompany() string {
	if m != nil {
		return m.Company
	}
	return ""
}

func (m *User) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *User) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *User) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

type NotifyTrialPendingExpiryRequest struct {
	ExternalID string `protobuf:"bytes,1,opt,name=ExternalID,proto3" json:"ExternalID,omitempty"`
}

func (m *NotifyTrialPendingExpiryRequest) Reset()      { *m = NotifyTrialPendingExpiryRequest{} }
func (*NotifyTrialPendingExpiryRequest) ProtoMessage() {}
func (*NotifyTrialPendingExpiryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_030765f334c86cea, []int{35}
}
func (m *NotifyTrialPendingExpiryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NotifyTrialPendingExpiryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NotifyTrialPendingExpiryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NotifyTrialPendingExpiryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotifyTrialPendingExpiryRequest.Merge(m, src)
}
func (m *NotifyTrialPendingExpiryRequest) XXX_Size() int {
	return m.Size()
}
func (m *NotifyTrialPendingExpiryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NotifyTrialPendingExpiryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NotifyTrialPendingExpiryRequest proto.InternalMessageInfo

func (m *NotifyTrialPendingExpiryRequest) GetExternalID() string {
	if m != nil {
		return m.ExternalID
	}
	return ""
}

type NotifyTrialPendingExpiryResponse struct {
}

func (m *NotifyTrialPendingExpiryResponse) Reset()      { *m = NotifyTrialPendingExpiryResponse{} }
func (*NotifyTrialPendingExpiryResponse) ProtoMessage() {}
func (*NotifyTrialPendingExpiryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_030765f334c86cea, []int{36}
}
func (m *NotifyTrialPendingExpiryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NotifyTrialPendingExpiryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NotifyTrialPendingExpiryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NotifyTrialPendingExpiryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotifyTrialPendingExpiryResponse.Merge(m, src)
}
func (m *NotifyTrialPendingExpiryResponse) XXX_Size() int {
	return m.Size()
}
func (m *NotifyTrialPendingExpiryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NotifyTrialPendingExpiryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NotifyTrialPendingExpiryResponse proto.InternalMessageInfo

type NotifyTrialExpiredRequest struct {
	ExternalID string `protobuf:"bytes,1,opt,name=ExternalID,proto3" json:"ExternalID,omitempty"`
}

func (m *NotifyTrialExpiredRequest) Reset()      { *m = NotifyTrialExpiredRequest{} }
func (*NotifyTrialExpiredRequest) ProtoMessage() {}
func (*NotifyTrialExpiredRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_030765f334c86cea, []int{37}
}
func (m *NotifyTrialExpiredRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NotifyTrialExpiredRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NotifyTrialExpiredRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NotifyTrialExpiredRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotifyTrialExpiredRequest.Merge(m, src)
}
func (m *NotifyTrialExpiredRequest) XXX_Size() int {
	return m.Size()
}
func (m *NotifyTrialExpiredRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NotifyTrialExpiredRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NotifyTrialExpiredRequest proto.InternalMessageInfo

func (m *NotifyTrialExpiredRequest) GetExternalID() string {
	if m != nil {
		return m.ExternalID
	}
	return ""
}

type NotifyTrialExpiredResponse struct {
}

func (m *NotifyTrialExpiredResponse) Reset()      { *m = NotifyTrialExpiredResponse{} }
func (*NotifyTrialExpiredResponse) ProtoMessage() {}
func (*NotifyTrialExpiredResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_030765f334c86cea, []int{38}
}
func (m *NotifyTrialExpiredResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NotifyTrialExpiredResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NotifyTrialExpiredResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NotifyTrialExpiredResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotifyTrialExpiredResponse.Merge(m, src)
}
func (m *NotifyTrialExpiredResponse) XXX_Size() int {
	return m.Size()
}
func (m *NotifyTrialExpiredResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NotifyTrialExpiredResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NotifyTrialExpiredResponse proto.InternalMessageInfo

type NotifyRefuseDataUploadRequest struct {
	ExternalID string `protobuf:"bytes,1,opt,name=ExternalID,proto3" json:"ExternalID,omitempty"`
}

func (m *NotifyRefuseDataUploadRequest) Reset()      { *m = NotifyRefuseDataUploadRequest{} }
func (*NotifyRefuseDataUploadRequest) ProtoMessage() {}
func (*NotifyRefuseDataUploadRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_030765f334c86cea, []int{39}
}
func (m *NotifyRefuseDataUploadRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NotifyRefuseDataUploadRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NotifyRefuseDataUploadRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NotifyRefuseDataUploadRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotifyRefuseDataUploadRequest.Merge(m, src)
}
func (m *NotifyRefuseDataUploadRequest) XXX_Size() int {
	return m.Size()
}
func (m *NotifyRefuseDataUploadRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NotifyRefuseDataUploadRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NotifyRefuseDataUploadRequest proto.InternalMessageInfo

func (m *NotifyRefuseDataUploadRequest) GetExternalID() string {
	if m != nil {
		return m.ExternalID
	}
	return ""
}

type NotifyRefuseDataUploadResponse struct {
}

func (m *NotifyRefuseDataUploadResponse) Reset()      { *m = NotifyRefuseDataUploadResponse{} }
func (*NotifyRefuseDataUploadResponse) ProtoMessage() {}
func (*NotifyRefuseDataUploadResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_030765f334c86cea, []int{40}
}
func (m *NotifyRefuseDataUploadResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NotifyRefuseDataUploadResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NotifyRefuseDataUploadResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NotifyRefuseDataUploadResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotifyRefuseDataUploadResponse.Merge(m, src)
}
func (m *NotifyRefuseDataUploadResponse) XXX_Size() int {
	return m.Size()
}
func (m *NotifyRefuseDataUploadResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NotifyRefuseDataUploadResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NotifyRefuseDataUploadResponse proto.InternalMessageInfo

type Team struct {
	ID                           string     `protobuf:"bytes,1,opt,name=ID,proto3" json:"-"`
	Name                         string     `protobuf:"bytes,2,opt,name=Name,proto3" json:"-"`
	ExternalID                   string     `protobuf:"bytes,3,opt,name=ExternalID,proto3" json:"-"`
	ZuoraAccountNumber           string     `protobuf:"bytes,4,opt,name=ZuoraAccountNumber,proto3" json:"-"`
	ZuoraAccountCreatedAt        *time.Time `protobuf:"bytes,5,opt,name=ZuoraAccountCreatedAt,proto3,stdtime" json:"-"`
	TrialExpiresAt               time.Time  `protobuf:"bytes,6,opt,name=TrialExpiresAt,proto3,stdtime" json:"-"`
	TrialPendingExpiryNotifiedAt *time.Time `protobuf:"bytes,7,opt,name=TrialPendingExpiryNotifiedAt,proto3,stdtime" json:"-"`
	TrialExpiredNotifiedAt       *time.Time `protobuf:"bytes,8,opt,name=TrialExpiredNotifiedAt,proto3,stdtime" json:"-"`
	CreatedAt                    time.Time  `protobuf:"bytes,9,opt,name=CreatedAt,proto3,stdtime" json:"-"`
	DeletedAt                    *time.Time `protobuf:"bytes,10,opt,name=DeletedAt,proto3,stdtime" json:"-"`
}

func (m *Team) Reset()      { *m = Team{} }
func (*Team) ProtoMessage() {}
func (*Team) Descriptor() ([]byte, []int) {
	return fileDescriptor_030765f334c86cea, []int{41}
}
func (m *Team) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Team) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Team.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Team) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Team.Merge(m, src)
}
func (m *Team) XXX_Size() int {
	return m.Size()
}
func (m *Team) XXX_DiscardUnknown() {
	xxx_messageInfo_Team.DiscardUnknown(m)
}

var xxx_messageInfo_Team proto.InternalMessageInfo

func (m *Team) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Team) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Team) GetExternalID() string {
	if m != nil {
		return m.ExternalID
	}
	return ""
}

func (m *Team) GetZuoraAccountNumber() string {
	if m != nil {
		return m.ZuoraAccountNumber
	}
	return ""
}

func (m *Team) GetZuoraAccountCreatedAt() *time.Time {
	if m != nil {
		return m.ZuoraAccountCreatedAt
	}
	return nil
}

func (m *Team) GetTrialExpiresAt() time.Time {
	if m != nil {
		return m.TrialExpiresAt
	}
	return time.Time{}
}

func (m *Team) GetTrialPendingExpiryNotifiedAt() *time.Time {
	if m != nil {
		return m.TrialPendingExpiryNotifiedAt
	}
	return nil
}

func (m *Team) GetTrialExpiredNotifiedAt() *time.Time {
	if m != nil {
		return m.TrialExpiredNotifiedAt
	}
	return nil
}

func (m *Team) GetCreatedAt() time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return time.Time{}
}

func (m *Team) GetDeletedAt() *time.Time {
	if m != nil {
		return m.DeletedAt
	}
	return nil
}

// Empty message, i.e. equivalent to "void"/"Unit"/etc.
type Empty struct {
}

func (m *Empty) Reset()      { *m = Empty{} }
func (*Empty) ProtoMessage() {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_030765f334c86cea, []int{42}
}
func (m *Empty) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return m.Size()
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

type Summary struct {
	Entries []*SummaryEntry `protobuf:"bytes,1,rep,name=Entries,proto3" json:"Entries,omitempty"`
}

func (m *Summary) Reset()      { *m = Summary{} }
func (*Summary) ProtoMessage() {}
func (*Summary) Descriptor() ([]byte, []int) {
	return fileDescriptor_030765f334c86cea, []int{43}
}
func (m *Summary) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Summary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Summary.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Summary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Summary.Merge(m, src)
}
func (m *Summary) XXX_Size() int {
	return m.Size()
}
func (m *Summary) XXX_DiscardUnknown() {
	xxx_messageInfo_Summary.DiscardUnknown(m)
}

var xxx_messageInfo_Summary proto.InternalMessageInfo

func (m *Summary) GetEntries() []*SummaryEntry {
	if m != nil {
		return m.Entries
	}
	return nil
}

type SummaryEntry struct {
	TeamExternalID       string     `protobuf:"bytes,1,opt,name=TeamExternalID,proto3" json:"-"`
	TeamName             string     `protobuf:"bytes,2,opt,name=TeamName,proto3" json:"-"`
	OrgID                string     `protobuf:"bytes,3,opt,name=OrgID,proto3" json:"-"`
	OrgExternalID        string     `protobuf:"bytes,4,opt,name=OrgExternalID,proto3" json:"-"`
	OrgName              string     `protobuf:"bytes,5,opt,name=OrgName,proto3" json:"-"`
	Emails               []string   `protobuf:"bytes,6,rep,name=Emails,proto3" json:"Emails,omitempty"`
	OrgCreatedAt         time.Time  `protobuf:"bytes,7,opt,name=OrgCreatedAt,proto3,stdtime" json:"OrgCreatedAt"`
	FirstSeenConnectedAt *time.Time `protobuf:"bytes,8,opt,name=FirstSeenConnectedAt,proto3,stdtime" json:"FirstSeenConnectedAt,omitempty"`
	Platform             string     `protobuf:"bytes,9,opt,name=Platform,proto3" json:"Platform,omitempty"`
	Environment          string     `protobuf:"bytes,10,opt,name=Environment,proto3" json:"Environment,omitempty"`
	// When the organization's trial period expires.
	TrialExpiresAt time.Time `protobuf:"bytes,11,opt,name=TrialExpiresAt,proto3,stdtime" json:"TrialExpiresAt"`
	// When we sent a «trial expiring soon» notification at
	TrialPendingExpiryNotifiedAt *time.Time `protobuf:"bytes,12,opt,name=TrialPendingExpiryNotifiedAt,proto3,stdtime" json:"TrialPendingExpiryNotifiedAt,omitempty"`
	// When we sent a «trial expired» notification at
	TrialExpiredNotifiedAt *time.Time `protobuf:"bytes,13,opt,name=TrialExpiredNotifiedAt,proto3,stdtime" json:"TrialExpiredNotifiedAt,omitempty"`
	BillingEnabled         bool       `protobuf:"varint,14,opt,name=BillingEnabled,proto3" json:"-"`
	RefuseDataAccess       bool       `protobuf:"varint,15,opt,name=RefuseDataAccess,proto3" json:"RefuseDataAccess,omitempty"`
	RefuseDataUpload       bool       `protobuf:"varint,16,opt,name=RefuseDataUpload,proto3" json:"RefuseDataUpload,omitempty"`
	ZuoraAccountNumber     string     `protobuf:"bytes,17,opt,name=ZuoraAccountNumber,proto3" json:"ZuoraAccountNumber,omitempty"`
	ZuoraAccountCreatedAt  *time.Time `protobuf:"bytes,18,opt,name=ZuoraAccountCreatedAt,proto3,stdtime" json:"ZuoraAccountCreatedAt,omitempty"`
	GCPAccountExternalID   string     `protobuf:"bytes,19,opt,name=GCPAccountExternalID,proto3" json:"GCPAccountExternalID,omitempty"`
	GCPAccountCreatedAt    time.Time  `protobuf:"bytes,20,opt,name=GCPAccountCreatedAt,proto3,stdtime" json:"GCPAccountCreatedAt"`
	// Level of the subscription, can be "standard" or "enterprise"
	GCPAccountSubscriptionLevel string `protobuf:"bytes,21,opt,name=GCPAccountSubscriptionLevel,proto3" json:"GCPAccountSubscriptionLevel,omitempty"`
	// Status of the subscrption, can be one of "PENDING", "ACTIVE', or "COMPLETE"
	GCPAccountSubscriptionStatus string `protobuf:"bytes,22,opt,name=GCPAccountSubscriptionStatus,proto3" json:"GCPAccountSubscriptionStatus,omitempty"`
}

func (m *SummaryEntry) Reset()      { *m = SummaryEntry{} }
func (*SummaryEntry) ProtoMessage() {}
func (*SummaryEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_030765f334c86cea, []int{44}
}
func (m *SummaryEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SummaryEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SummaryEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SummaryEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SummaryEntry.Merge(m, src)
}
func (m *SummaryEntry) XXX_Size() int {
	return m.Size()
}
func (m *SummaryEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_SummaryEntry.DiscardUnknown(m)
}

var xxx_messageInfo_SummaryEntry proto.InternalMessageInfo

func (m *SummaryEntry) GetTeamExternalID() string {
	if m != nil {
		return m.TeamExternalID
	}
	return ""
}

func (m *SummaryEntry) GetTeamName() string {
	if m != nil {
		return m.TeamName
	}
	return ""
}

func (m *SummaryEntry) GetOrgID() string {
	if m != nil {
		return m.OrgID
	}
	return ""
}

func (m *SummaryEntry) GetOrgExternalID() string {
	if m != nil {
		return m.OrgExternalID
	}
	return ""
}

func (m *SummaryEntry) GetOrgName() string {
	if m != nil {
		return m.OrgName
	}
	return ""
}

func (m *SummaryEntry) GetEmails() []string {
	if m != nil {
		return m.Emails
	}
	return nil
}

func (m *SummaryEntry) GetOrgCreatedAt() time.Time {
	if m != nil {
		return m.OrgCreatedAt
	}
	return time.Time{}
}

func (m *SummaryEntry) GetFirstSeenConnectedAt() *time.Time {
	if m != nil {
		return m.FirstSeenConnectedAt
	}
	return nil
}

func (m *SummaryEntry) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *SummaryEntry) GetEnvironment() string {
	if m != nil {
		return m.Environment
	}
	return ""
}

func (m *SummaryEntry) GetTrialExpiresAt() time.Time {
	if m != nil {
		return m.TrialExpiresAt
	}
	return time.Time{}
}

func (m *SummaryEntry) GetTrialPendingExpiryNotifiedAt() *time.Time {
	if m != nil {
		return m.TrialPendingExpiryNotifiedAt
	}
	return nil
}

func (m *SummaryEntry) GetTrialExpiredNotifiedAt() *time.Time {
	if m != nil {
		return m.TrialExpiredNotifiedAt
	}
	return nil
}

func (m *SummaryEntry) GetBillingEnabled() bool {
	if m != nil {
		return m.BillingEnabled
	}
	return false
}

func (m *SummaryEntry) GetRefuseDataAccess() bool {
	if m != nil {
		return m.RefuseDataAccess
	}
	return false
}

func (m *SummaryEntry) GetRefuseDataUpload() bool {
	if m != nil {
		return m.RefuseDataUpload
	}
	return false
}

func (m *SummaryEntry) GetZuoraAccountNumber() string {
	if m != nil {
		return m.ZuoraAccountNumber
	}
	return ""
}

func (m *SummaryEntry) GetZuoraAccountCreatedAt() *time.Time {
	if m != nil {
		return m.ZuoraAccountCreatedAt
	}
	return nil
}

func (m *SummaryEntry) GetGCPAccountExternalID() string {
	if m != nil {
		return m.GCPAccountExternalID
	}
	return ""
}

func (m *SummaryEntry) GetGCPAccountCreatedAt() time.Time {
	if m != nil {
		return m.GCPAccountCreatedAt
	}
	return time.Time{}
}

func (m *SummaryEntry) GetGCPAccountSubscriptionLevel() string {
	if m != nil {
		return m.GCPAccountSubscriptionLevel
	}
	return ""
}

func (m *SummaryEntry) GetGCPAccountSubscriptionStatus() string {
	if m != nil {
		return m.GCPAccountSubscriptionStatus
	}
	return ""
}

type Webhook struct {
	ID               string     `protobuf:"bytes,1,opt,name=ID,proto3" json:"-"`
	OrganizationID   string     `protobuf:"bytes,2,opt,name=OrganizationID,proto3" json:"-"`
	IntegrationType  string     `protobuf:"bytes,3,opt,name=IntegrationType,proto3" json:"integrationType"`
	SecretID         string     `protobuf:"bytes,4,opt,name=SecretID,proto3" json:"secretID"`
	SecretSigningKey string     `protobuf:"bytes,5,opt,name=SecretSigningKey,proto3" json:"secretSigningKey"`
	CreatedAt        time.Time  `protobuf:"bytes,6,opt,name=CreatedAt,proto3,stdtime" json:"createdAt"`
	DeletedAt        *time.Time `protobuf:"bytes,7,opt,name=DeletedAt,proto3,stdtime" json:"deletedAt"`
	FirstSeenAt      *time.Time `protobuf:"bytes,8,opt,name=FirstSeenAt,proto3,stdtime" json:"firstSeenAt"`
}

func (m *Webhook) Reset()      { *m = Webhook{} }
func (*Webhook) ProtoMessage() {}
func (*Webhook) Descriptor() ([]byte, []int) {
	return fileDescriptor_030765f334c86cea, []int{45}
}
func (m *Webhook) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Webhook) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Webhook.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Webhook) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Webhook.Merge(m, src)
}
func (m *Webhook) XXX_Size() int {
	return m.Size()
}
func (m *Webhook) XXX_DiscardUnknown() {
	xxx_messageInfo_Webhook.DiscardUnknown(m)
}

var xxx_messageInfo_Webhook proto.InternalMessageInfo

func (m *Webhook) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Webhook) GetOrganizationID() string {
	if m != nil {
		return m.OrganizationID
	}
	return ""
}

func (m *Webhook) GetIntegrationType() string {
	if m != nil {
		return m.IntegrationType
	}
	return ""
}

func (m *Webhook) GetSecretID() string {
	if m != nil {
		return m.SecretID
	}
	return ""
}

func (m *Webhook) GetSecretSigningKey() string {
	if m != nil {
		return m.SecretSigningKey
	}
	return ""
}

func (m *Webhook) GetCreatedAt() time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return time.Time{}
}

func (m *Webhook) GetDeletedAt() *time.Time {
	if m != nil {
		return m.DeletedAt
	}
	return nil
}

func (m *Webhook) GetFirstSeenAt() *time.Time {
	if m != nil {
		return m.FirstSeenAt
	}
	return nil
}

type LookupOrganizationWebhookUsingSecretIDRequest struct {
	SecretID string `protobuf:"bytes,1,opt,name=SecretID,proto3" json:"SecretID,omitempty"`
}

func (m *LookupOrganizationWebhookUsingSecretIDRequest) Reset() {
	*m = LookupOrganizationWebhookUsingSecretIDRequest{}
}
func (*LookupOrganizationWebhookUsingSecretIDRequest) ProtoMessage() {}
func (*LookupOrganizationWebhookUsingSecretIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_030765f334c86cea, []int{46}
}
func (m *LookupOrganizationWebhookUsingSecretIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LookupOrganizationWebhookUsingSecretIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LookupOrganizationWebhookUsingSecretIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LookupOrganizationWebhookUsingSecretIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LookupOrganizationWebhookUsingSecretIDRequest.Merge(m, src)
}
func (m *LookupOrganizationWebhookUsingSecretIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *LookupOrganizationWebhookUsingSecretIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LookupOrganizationWebhookUsingSecretIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LookupOrganizationWebhookUsingSecretIDRequest proto.InternalMessageInfo

func (m *LookupOrganizationWebhookUsingSecretIDRequest) GetSecretID() string {
	if m != nil {
		return m.SecretID
	}
	return ""
}

type LookupOrganizationWebhookUsingSecretIDResponse struct {
	Webhook *Webhook `protobuf:"bytes,1,opt,name=Webhook,proto3" json:"Webhook,omitempty"`
}

func (m *LookupOrganizationWebhookUsingSecretIDResponse) Reset() {
	*m = LookupOrganizationWebhookUsingSecretIDResponse{}
}
func (*LookupOrganizationWebhookUsingSecretIDResponse) ProtoMessage() {}
func (*LookupOrganizationWebhookUsingSecretIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_030765f334c86cea, []int{47}
}
func (m *LookupOrganizationWebhookUsingSecretIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LookupOrganizationWebhookUsingSecretIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LookupOrganizationWebhookUsingSecretIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LookupOrganizationWebhookUsingSecretIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LookupOrganizationWebhookUsingSecretIDResponse.Merge(m, src)
}
func (m *LookupOrganizationWebhookUsingSecretIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *LookupOrganizationWebhookUsingSecretIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LookupOrganizationWebhookUsingSecretIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LookupOrganizationWebhookUsingSecretIDResponse proto.InternalMessageInfo

func (m *LookupOrganizationWebhookUsingSecretIDResponse) GetWebhook() *Webhook {
	if m != nil {
		return m.Webhook
	}
	return nil
}

type SetOrganizationWebhookFirstSeenAtRequest struct {
	SecretID string `protobuf:"bytes,1,opt,name=SecretID,proto3" json:"SecretID,omitempty"`
}

func (m *SetOrganizationWebhookFirstSeenAtRequest) Reset() {
	*m = SetOrganizationWebhookFirstSeenAtRequest{}
}
func (*SetOrganizationWebhookFirstSeenAtRequest) ProtoMessage() {}
func (*SetOrganizationWebhookFirstSeenAtRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_030765f334c86cea, []int{48}
}
func (m *SetOrganizationWebhookFirstSeenAtRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetOrganizationWebhookFirstSeenAtRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetOrganizationWebhookFirstSeenAtRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetOrganizationWebhookFirstSeenAtRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetOrganizationWebhookFirstSeenAtRequest.Merge(m, src)
}
func (m *SetOrganizationWebhookFirstSeenAtRequest) XXX_Size() int {
	return m.Size()
}
func (m *SetOrganizationWebhookFirstSeenAtRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetOrganizationWebhookFirstSeenAtRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetOrganizationWebhookFirstSeenAtRequest proto.InternalMessageInfo

func (m *SetOrganizationWebhookFirstSeenAtRequest) GetSecretID() string {
	if m != nil {
		return m.SecretID
	}
	return ""
}

type SetOrganizationWebhookFirstSeenAtResponse struct {
	FirstSeenAt *time.Time `protobuf:"bytes,1,opt,name=FirstSeenAt,proto3,stdtime" json:"FirstSeenAt,omitempty"`
}

func (m *SetOrganizationWebhookFirstSeenAtResponse) Reset() {
	*m = SetOrganizationWebhookFirstSeenAtResponse{}
}
func (*SetOrganizationWebhookFirstSeenAtResponse) ProtoMessage() {}
func (*SetOrganizationWebhookFirstSeenAtResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_030765f334c86cea, []int{49}
}
func (m *SetOrganizationWebhookFirstSeenAtResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetOrganizationWebhookFirstSeenAtResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetOrganizationWebhookFirstSeenAtResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetOrganizationWebhookFirstSeenAtResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetOrganizationWebhookFirstSeenAtResponse.Merge(m, src)
}
func (m *SetOrganizationWebhookFirstSeenAtResponse) XXX_Size() int {
	return m.Size()
}
func (m *SetOrganizationWebhookFirstSeenAtResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SetOrganizationWebhookFirstSeenAtResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SetOrganizationWebhookFirstSeenAtResponse proto.InternalMessageInfo

func (m *SetOrganizationWebhookFirstSeenAtResponse) GetFirstSeenAt() *time.Time {
	if m != nil {
		return m.FirstSeenAt
	}
	return nil
}

type InformOrganizationBillingConfiguredRequest struct {
	ExternalID string `protobuf:"bytes,1,opt,name=ExternalID,proto3" json:"ExternalID,omitempty"`
}

func (m *InformOrganizationBillingConfiguredRequest) Reset() {
	*m = InformOrganizationBillingConfiguredRequest{}
}
func (*InformOrganizationBillingConfiguredRequest) ProtoMessage() {}
func (*InformOrganizationBillingConfiguredRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_030765f334c86cea, []int{50}
}
func (m *InformOrganizationBillingConfiguredRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InformOrganizationBillingConfiguredRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InformOrganizationBillingConfiguredRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InformOrganizationBillingConfiguredRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InformOrganizationBillingConfiguredRequest.Merge(m, src)
}
func (m *InformOrganizationBillingConfiguredRequest) XXX_Size() int {
	return m.Size()
}
func (m *InformOrganizationBillingConfiguredRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_InformOrganizationBillingConfiguredRequest.DiscardUnknown(m)
}

var xxx_messageInfo_InformOrganizationBillingConfiguredRequest proto.InternalMessageInfo

func (m *InformOrganizationBillingConfiguredRequest) GetExternalID() string {
	if m != nil {
		return m.ExternalID
	}
	return ""
}

type Permission struct {
	ID          string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=Description,proto3" json:"Description,omitempty"`
}

func (m *Permission) Reset()      { *m = Permission{} }
func (*Permission) ProtoMessage() {}
func (*Permission) Descriptor() ([]byte, []int) {
	return fileDescriptor_030765f334c86cea, []int{51}
}
func (m *Permission) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Permission) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Permission.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Permission) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Permission.Merge(m, src)
}
func (m *Permission) XXX_Size() int {
	return m.Size()
}
func (m *Permission) XXX_DiscardUnknown() {
	xxx_messageInfo_Permission.DiscardUnknown(m)
}

var xxx_messageInfo_Permission proto.InternalMessageInfo

func (m *Permission) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Permission) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Permission) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type Role struct {
	ID          string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=Description,proto3" json:"Description,omitempty"`
}

func (m *Role) Reset()      { *m = Role{} }
func (*Role) ProtoMessage() {}
func (*Role) Descriptor() ([]byte, []int) {
	return fileDescriptor_030765f334c86cea, []int{52}
}
func (m *Role) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Role) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Role.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Role) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Role.Merge(m, src)
}
func (m *Role) XXX_Size() int {
	return m.Size()
}
func (m *Role) XXX_DiscardUnknown() {
	xxx_messageInfo_Role.DiscardUnknown(m)
}

var xxx_messageInfo_Role proto.InternalMessageInfo

func (m *Role) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Role) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Role) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type RequireTeamMemberPermissionToRequest struct {
	UserID string `protobuf:"bytes,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	// Types that are valid to be assigned to TeamID:
	//	*RequireTeamMemberPermissionToRequest_TeamExternalID
	//	*RequireTeamMemberPermissionToRequest_TeamInternalID
	TeamID       isRequireTeamMemberPermissionToRequest_TeamID `protobuf_oneof:"TeamID"`
	PermissionID string                                        `protobuf:"bytes,3,opt,name=PermissionID,proto3" json:"PermissionID,omitempty"`
}

func (m *RequireTeamMemberPermissionToRequest) Reset()      { *m = RequireTeamMemberPermissionToRequest{} }
func (*RequireTeamMemberPermissionToRequest) ProtoMessage() {}
func (*RequireTeamMemberPermissionToRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_030765f334c86cea, []int{53}
}
func (m *RequireTeamMemberPermissionToRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequireTeamMemberPermissionToRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequireTeamMemberPermissionToRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequireTeamMemberPermissionToRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequireTeamMemberPermissionToRequest.Merge(m, src)
}
func (m *RequireTeamMemberPermissionToRequest) XXX_Size() int {
	return m.Size()
}
func (m *RequireTeamMemberPermissionToRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RequireTeamMemberPermissionToRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RequireTeamMemberPermissionToRequest proto.InternalMessageInfo

type isRequireTeamMemberPermissionToRequest_TeamID interface {
	isRequireTeamMemberPermissionToRequest_TeamID()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type RequireTeamMemberPermissionToRequest_TeamExternalID struct {
	TeamExternalID string `protobuf:"bytes,2,opt,name=TeamExternalID,proto3,oneof" json:"TeamExternalID,omitempty"`
}
type RequireTeamMemberPermissionToRequest_TeamInternalID struct {
	TeamInternalID string `protobuf:"bytes,4,opt,name=TeamInternalID,proto3,oneof" json:"TeamInternalID,omitempty"`
}

func (*RequireTeamMemberPermissionToRequest_TeamExternalID) isRequireTeamMemberPermissionToRequest_TeamID() {
}
func (*RequireTeamMemberPermissionToRequest_TeamInternalID) isRequireTeamMemberPermissionToRequest_TeamID() {
}

func (m *RequireTeamMemberPermissionToRequest) GetTeamID() isRequireTeamMemberPermissionToRequest_TeamID {
	if m != nil {
		return m.TeamID
	}
	return nil
}

func (m *RequireTeamMemberPermissionToRequest) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *RequireTeamMemberPermissionToRequest) GetTeamExternalID() string {
	if x, ok := m.GetTeamID().(*RequireTeamMemberPermissionToRequest_TeamExternalID); ok {
		return x.TeamExternalID
	}
	return ""
}

func (m *RequireTeamMemberPermissionToRequest) GetTeamInternalID() string {
	if x, ok := m.GetTeamID().(*RequireTeamMemberPermissionToRequest_TeamInternalID); ok {
		return x.TeamInternalID
	}
	return ""
}

func (m *RequireTeamMemberPermissionToRequest) GetPermissionID() string {
	if m != nil {
		return m.PermissionID
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*RequireTeamMemberPermissionToRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*RequireTeamMemberPermissionToRequest_TeamExternalID)(nil),
		(*RequireTeamMemberPermissionToRequest_TeamInternalID)(nil),
	}
}

type RequireOrgMemberPermissionToRequest struct {
	UserID string `protobuf:"bytes,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	// Types that are valid to be assigned to OrgID:
	//	*RequireOrgMemberPermissionToRequest_OrgExternalID
	//	*RequireOrgMemberPermissionToRequest_OrgInternalID
	OrgID        isRequireOrgMemberPermissionToRequest_OrgID `protobuf_oneof:"OrgID"`
	PermissionID string                                      `protobuf:"bytes,3,opt,name=PermissionID,proto3" json:"PermissionID,omitempty"`
}

func (m *RequireOrgMemberPermissionToRequest) Reset()      { *m = RequireOrgMemberPermissionToRequest{} }
func (*RequireOrgMemberPermissionToRequest) ProtoMessage() {}
func (*RequireOrgMemberPermissionToRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_030765f334c86cea, []int{54}
}
func (m *RequireOrgMemberPermissionToRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequireOrgMemberPermissionToRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequireOrgMemberPermissionToRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequireOrgMemberPermissionToRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequireOrgMemberPermissionToRequest.Merge(m, src)
}
func (m *RequireOrgMemberPermissionToRequest) XXX_Size() int {
	return m.Size()
}
func (m *RequireOrgMemberPermissionToRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RequireOrgMemberPermissionToRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RequireOrgMemberPermissionToRequest proto.InternalMessageInfo

type isRequireOrgMemberPermissionToRequest_OrgID interface {
	isRequireOrgMemberPermissionToRequest_OrgID()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type RequireOrgMemberPermissionToRequest_OrgExternalID struct {
	OrgExternalID string `protobuf:"bytes,2,opt,name=OrgExternalID,proto3,oneof" json:"OrgExternalID,omitempty"`
}
type RequireOrgMemberPermissionToRequest_OrgInternalID struct {
	OrgInternalID string `protobuf:"bytes,4,opt,name=OrgInternalID,proto3,oneof" json:"OrgInternalID,omitempty"`
}

func (*RequireOrgMemberPermissionToRequest_OrgExternalID) isRequireOrgMemberPermissionToRequest_OrgID() {
}
func (*RequireOrgMemberPermissionToRequest_OrgInternalID) isRequireOrgMemberPermissionToRequest_OrgID() {
}

func (m *RequireOrgMemberPermissionToRequest) GetOrgID() isRequireOrgMemberPermissionToRequest_OrgID {
	if m != nil {
		return m.OrgID
	}
	return nil
}

func (m *RequireOrgMemberPermissionToRequest) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *RequireOrgMemberPermissionToRequest) GetOrgExternalID() string {
	if x, ok := m.GetOrgID().(*RequireOrgMemberPermissionToRequest_OrgExternalID); ok {
		return x.OrgExternalID
	}
	return ""
}

func (m *RequireOrgMemberPermissionToRequest) GetOrgInternalID() string {
	if x, ok := m.GetOrgID().(*RequireOrgMemberPermissionToRequest_OrgInternalID); ok {
		return x.OrgInternalID
	}
	return ""
}

func (m *RequireOrgMemberPermissionToRequest) GetPermissionID() string {
	if m != nil {
		return m.PermissionID
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*RequireOrgMemberPermissionToRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*RequireOrgMemberPermissionToRequest_OrgExternalID)(nil),
		(*RequireOrgMemberPermissionToRequest_OrgInternalID)(nil),
	}
}

func init() {
	proto.RegisterEnum("users.AuthorizedAction", AuthorizedAction_name, AuthorizedAction_value)
	proto.RegisterType((*LookupOrgRequest)(nil), "users.LookupOrgRequest")
	proto.RegisterType((*LookupOrgResponse)(nil), "users.LookupOrgResponse")
	proto.RegisterType((*LookupUsingTokenRequest)(nil), "users.LookupUsingTokenRequest")
	proto.RegisterType((*LookupUsingTokenResponse)(nil), "users.LookupUsingTokenResponse")
	proto.RegisterType((*LookupAdminRequest)(nil), "users.LookupAdminRequest")
	proto.RegisterType((*LookupAdminResponse)(nil), "users.LookupAdminResponse")
	proto.RegisterType((*LookupUserRequest)(nil), "users.LookupUserRequest")
	proto.RegisterType((*LookupUserResponse)(nil), "users.LookupUserResponse")
	proto.RegisterType((*GetOrganizationsRequest)(nil), "users.GetOrganizationsRequest")
	proto.RegisterType((*GetOrganizationsResponse)(nil), "users.GetOrganizationsResponse")
	proto.RegisterType((*GetBillableOrganizationsRequest)(nil), "users.GetBillableOrganizationsRequest")
	proto.RegisterType((*GetBillableOrganizationsResponse)(nil), "users.GetBillableOrganizationsResponse")
	proto.RegisterType((*GetTrialOrganizationsRequest)(nil), "users.GetTrialOrganizationsRequest")
	proto.RegisterType((*GetTrialOrganizationsResponse)(nil), "users.GetTrialOrganizationsResponse")
	proto.RegisterType((*GetDelinquentOrganizationsRequest)(nil), "users.GetDelinquentOrganizationsRequest")
	proto.RegisterType((*GetDelinquentOrganizationsResponse)(nil), "users.GetDelinquentOrganizationsResponse")
	proto.RegisterType((*GetOrganizationRequest)(nil), "users.GetOrganizationRequest")
	proto.RegisterType((*GetOrganizationResponse)(nil), "users.GetOrganizationResponse")
	proto.RegisterType((*Organization)(nil), "users.Organization")
	proto.RegisterType((*GoogleCloudPlatform)(nil), "users.GoogleCloudPlatform")
	proto.RegisterType((*GetGCPRequest)(nil), "users.GetGCPRequest")
	proto.RegisterType((*GetGCPResponse)(nil), "users.GetGCPResponse")
	proto.RegisterType((*UpdateGCPRequest)(nil), "users.UpdateGCPRequest")
	proto.RegisterType((*UpdateGCPResponse)(nil), "users.UpdateGCPResponse")
	proto.RegisterType((*SetOrganizationZuoraAccountRequest)(nil), "users.SetOrganizationZuoraAccountRequest")
	proto.RegisterType((*SetOrganizationZuoraAccountResponse)(nil), "users.SetOrganizationZuoraAccountResponse")
	proto.RegisterType((*SetOrganizationFlagRequest)(nil), "users.SetOrganizationFlagRequest")
	proto.RegisterType((*SetOrganizationFlagResponse)(nil), "users.SetOrganizationFlagResponse")
	proto.RegisterType((*GetUserRequest)(nil), "users.GetUserRequest")
	proto.RegisterType((*GetUserResponse)(nil), "users.GetUserResponse")
	proto.RegisterType((*GetOrganizationsReadyForWeeklyReportRequest)(nil), "users.GetOrganizationsReadyForWeeklyReportRequest")
	proto.RegisterType((*GetOrganizationsReadyForWeeklyReportResponse)(nil), "users.GetOrganizationsReadyForWeeklyReportResponse")
	proto.RegisterType((*SendOutWeeklyReportRequest)(nil), "users.SendOutWeeklyReportRequest")
	proto.RegisterType((*SendOutWeeklyReportResponse)(nil), "users.SendOutWeeklyReportResponse")
	proto.RegisterType((*User)(nil), "users.User")
	proto.RegisterType((*NotifyTrialPendingExpiryRequest)(nil), "users.NotifyTrialPendingExpiryRequest")
	proto.RegisterType((*NotifyTrialPendingExpiryResponse)(nil), "users.NotifyTrialPendingExpiryResponse")
	proto.RegisterType((*NotifyTrialExpiredRequest)(nil), "users.NotifyTrialExpiredRequest")
	proto.RegisterType((*NotifyTrialExpiredResponse)(nil), "users.NotifyTrialExpiredResponse")
	proto.RegisterType((*NotifyRefuseDataUploadRequest)(nil), "users.NotifyRefuseDataUploadRequest")
	proto.RegisterType((*NotifyRefuseDataUploadResponse)(nil), "users.NotifyRefuseDataUploadResponse")
	proto.RegisterType((*Team)(nil), "users.Team")
	proto.RegisterType((*Empty)(nil), "users.Empty")
	proto.RegisterType((*Summary)(nil), "users.Summary")
	proto.RegisterType((*SummaryEntry)(nil), "users.SummaryEntry")
	proto.RegisterType((*Webhook)(nil), "users.Webhook")
	proto.RegisterType((*LookupOrganizationWebhookUsingSecretIDRequest)(nil), "users.LookupOrganizationWebhookUsingSecretIDRequest")
	proto.RegisterType((*LookupOrganizationWebhookUsingSecretIDResponse)(nil), "users.LookupOrganizationWebhookUsingSecretIDResponse")
	proto.RegisterType((*SetOrganizationWebhookFirstSeenAtRequest)(nil), "users.SetOrganizationWebhookFirstSeenAtRequest")
	proto.RegisterType((*SetOrganizationWebhookFirstSeenAtResponse)(nil), "users.SetOrganizationWebhookFirstSeenAtResponse")
	proto.RegisterType((*InformOrganizationBillingConfiguredRequest)(nil), "users.InformOrganizationBillingConfiguredRequest")
	proto.RegisterType((*Permission)(nil), "users.Permission")
	proto.RegisterType((*Role)(nil), "users.Role")
	proto.RegisterType((*RequireTeamMemberPermissionToRequest)(nil), "users.RequireTeamMemberPermissionToRequest")
	proto.RegisterType((*RequireOrgMemberPermissionToRequest)(nil), "users.RequireOrgMemberPermissionToRequest")
}

func init() { proto.RegisterFile("users.proto", fileDescriptor_030765f334c86cea) }

var fileDescriptor_030765f334c86cea = []byte{
	// 2949 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x3a, 0x3b, 0x74, 0xdb, 0xd6,
	0xd9, 0x84, 0x44, 0x8a, 0xe4, 0x47, 0x49, 0x96, 0xaf, 0x1e, 0x86, 0x61, 0x99, 0x94, 0xe1, 0xc7,
	0xaf, 0xd8, 0x92, 0xfc, 0x57, 0x49, 0xdb, 0xb4, 0x39, 0x69, 0xcc, 0x87, 0x24, 0xab, 0x51, 0x24,
	0x19, 0x92, 0x9c, 0xd4, 0xc9, 0x49, 0x02, 0x91, 0x57, 0x34, 0x8e, 0x49, 0x80, 0x01, 0x40, 0x27,
	0xcc, 0x94, 0xb1, 0x63, 0xda, 0x0e, 0xed, 0xd8, 0xb1, 0x73, 0xc7, 0x4e, 0xdd, 0x9a, 0xa1, 0x43,
	0xba, 0x65, 0x52, 0x6a, 0x65, 0xe9, 0xd1, 0x94, 0x73, 0xba, 0x74, 0xec, 0xc1, 0xc5, 0x05, 0x70,
	0xf1, 0x22, 0x81, 0x58, 0xa7, 0x1b, 0xf0, 0xbd, 0xef, 0xeb, 0x7b, 0xdd, 0x0b, 0xa5, 0xbe, 0x81,
	0x75, 0x63, 0xad, 0xa7, 0x6b, 0xa6, 0x86, 0x72, 0xe4, 0x47, 0x58, 0x6d, 0x2b, 0xe6, 0xd3, 0xfe,
	0xf1, 0x5a, 0x53, 0xeb, 0xde, 0x6f, 0x6b, 0x6d, 0xed, 0x3e, 0xc1, 0x1e, 0xf7, 0x4f, 0xc8, 0x1f,
	0xf9, 0x21, 0x5f, 0x36, 0x97, 0x50, 0x69, 0x6b, 0x5a, 0xbb, 0x83, 0x3d, 0x2a, 0x53, 0xe9, 0x62,
	0xc3, 0x94, 0xbb, 0x3d, 0x9b, 0x40, 0xfc, 0x1d, 0x07, 0x33, 0x3b, 0x9a, 0xf6, 0xac, 0xdf, 0xdb,
	0xd3, 0xdb, 0x12, 0xfe, 0xa4, 0x8f, 0x0d, 0x13, 0x2d, 0xc0, 0x44, 0x5d, 0xd3, 0x9e, 0x29, 0x98,
	0xe7, 0x96, 0xb8, 0xe5, 0xa2, 0x44, 0xff, 0xd0, 0x2d, 0x98, 0xda, 0xd3, 0xdb, 0x1b, 0x9f, 0x99,
	0x58, 0x57, 0xe5, 0xce, 0x76, 0x83, 0x1f, 0x23, 0x68, 0x3f, 0x10, 0xbd, 0x01, 0x93, 0xd5, 0xbe,
	0xf9, 0x54, 0xd3, 0x95, 0xcf, 0xf1, 0xa6, 0xa6, 0xf3, 0xd9, 0x25, 0x6e, 0x79, 0x7a, 0xfd, 0xca,
	0x9a, 0x3d, 0x1a, 0x17, 0xd5, 0xaa, 0x36, 0x4d, 0x45, 0x53, 0x25, 0x1f, 0xf1, 0x2f, 0xb3, 0x85,
	0xf1, 0x99, 0xac, 0xf8, 0x37, 0x0e, 0x2e, 0x33, 0x56, 0x19, 0x3d, 0x4d, 0x35, 0x30, 0x6a, 0xc0,
	0xf4, 0x9e, 0xde, 0x96, 0x55, 0xe5, 0x73, 0xd9, 0xe2, 0xdc, 0x6e, 0xd8, 0xe6, 0xd5, 0x16, 0xcf,
	0x4f, 0x2b, 0xbc, 0xe6, 0xc3, 0xac, 0x68, 0x5d, 0xc5, 0xc4, 0xdd, 0x9e, 0x39, 0x90, 0x02, 0x3c,
	0x68, 0x05, 0x26, 0x8e, 0x0c, 0xac, 0x3b, 0xd6, 0xd7, 0xe6, 0xce, 0x4f, 0x2b, 0x33, 0x7d, 0x02,
	0x61, 0xb8, 0x28, 0x0d, 0xfa, 0x05, 0x4c, 0x6e, 0x62, 0xd9, 0xec, 0xeb, 0x78, 0xb3, 0x23, 0xb7,
	0x0d, 0x7e, 0x7c, 0x69, 0x7c, 0xb9, 0x58, 0x13, 0xce, 0x4f, 0x2b, 0x0b, 0x27, 0x0c, 0x9c, 0xe1,
	0xf4, 0xd1, 0x8b, 0x1d, 0xb8, 0x62, 0x0f, 0xe4, 0xc8, 0x50, 0xd4, 0xf6, 0xa1, 0xf6, 0x0c, 0xab,
	0xce, 0x2c, 0xcf, 0x41, 0x8e, 0xfc, 0xd3, 0x49, 0xb6, 0x7f, 0x42, 0xb3, 0x37, 0x96, 0x62, 0xf6,
	0xc4, 0x3f, 0x72, 0xc0, 0x87, 0xd5, 0x5d, 0xe8, 0xf4, 0x05, 0x27, 0x64, 0x2c, 0xe5, 0x84, 0xac,
	0x00, 0xb2, 0x2d, 0xac, 0xb6, 0xba, 0x8a, 0x3a, 0x62, 0xc7, 0x89, 0x9b, 0x30, 0xeb, 0xa3, 0xa6,
	0x43, 0xb9, 0x0f, 0x79, 0x02, 0x70, 0xc7, 0x30, 0x7f, 0x7e, 0x5a, 0xb9, 0x2c, 0xdb, 0x20, 0x46,
	0xb5, 0x43, 0x25, 0xde, 0x73, 0xf6, 0x93, 0xb5, 0xac, 0xa3, 0x94, 0xd6, 0x1c, 0x13, 0x6d, 0x62,
	0xaa, 0xd3, 0xdb, 0x37, 0xdc, 0xe8, 0x7d, 0x23, 0x7e, 0x0a, 0x57, 0xb6, 0xb0, 0xc9, 0xce, 0x9d,
	0xc1, 0xac, 0xfb, 0xa3, 0x3e, 0xd6, 0x07, 0xce, 0xba, 0x93, 0x1f, 0x54, 0x06, 0xd8, 0x97, 0xdb,
	0x78, 0xb7, 0xdf, 0x3d, 0xc6, 0xf6, 0xaa, 0xe7, 0x24, 0x06, 0x82, 0xee, 0xc0, 0xf4, 0xb6, 0xda,
	0xec, 0xf4, 0x5b, 0xb8, 0x81, 0x3b, 0xd8, 0xc4, 0x2d, 0x7e, 0x7c, 0x89, 0x5b, 0x2e, 0x48, 0x01,
	0xa8, 0xf8, 0x3e, 0xf0, 0x61, 0xc5, 0x74, 0x08, 0x6f, 0x91, 0xf3, 0xeb, 0x21, 0x78, 0x6e, 0x69,
	0x7c, 0xb9, 0xb4, 0x3e, 0x4b, 0x37, 0x17, 0x8b, 0xab, 0x65, 0xbf, 0x3a, 0xad, 0x64, 0x24, 0x3f,
	0xbd, 0xf8, 0x2b, 0xa8, 0x6c, 0x61, 0xb3, 0xa6, 0x74, 0x3a, 0xf2, 0x71, 0x07, 0x47, 0x8e, 0xee,
	0x27, 0x30, 0xbe, 0xab, 0x7d, 0x4a, 0xc6, 0x56, 0x5a, 0x17, 0xd6, 0x6c, 0xff, 0xb3, 0xe6, 0xf8,
	0x9f, 0xb5, 0x43, 0xc7, 0xff, 0xd4, 0x0a, 0x96, 0x82, 0x2f, 0xbf, 0xad, 0x70, 0x92, 0xc5, 0x20,
	0x36, 0x61, 0x29, 0x5e, 0xf4, 0x45, 0xd9, 0xff, 0x18, 0x16, 0xb7, 0xb0, 0x79, 0xa8, 0x2b, 0x72,
	0xe7, 0x42, 0x8d, 0xff, 0x18, 0xae, 0xc7, 0xc8, 0xbd, 0x28, 0xcb, 0xdf, 0x87, 0x1b, 0x5b, 0xd8,
	0x6c, 0xe0, 0x8e, 0xa2, 0x7e, 0xd2, 0xc7, 0xaa, 0x79, 0xa1, 0xe6, 0x63, 0x10, 0x87, 0x09, 0xbf,
	0xa8, 0x31, 0xfc, 0x81, 0x83, 0x85, 0xc0, 0xde, 0x74, 0x2c, 0x5f, 0x02, 0x60, 0xc2, 0x0a, 0x39,
	0x18, 0x0f, 0x33, 0x12, 0x03, 0x43, 0xaf, 0xc1, 0xdc, 0x56, 0x7d, 0xdf, 0x01, 0x54, 0x9b, 0x4d,
	0xad, 0xaf, 0x9a, 0x8e, 0x13, 0x7f, 0x98, 0x91, 0x22, 0xb1, 0x96, 0xdc, 0x6d, 0xd5, 0x95, 0x3b,
	0xee, 0xc8, 0xf5, 0x60, 0xb5, 0x2c, 0x8c, 0x6d, 0x37, 0xc4, 0xf7, 0x42, 0xc7, 0xd5, 0x1d, 0xf6,
	0x9b, 0x30, 0xc9, 0xc2, 0xe9, 0xec, 0x0e, 0x19, 0xb5, 0x8f, 0x5c, 0xfc, 0xed, 0x94, 0x9f, 0x1f,
	0x4d, 0x5b, 0x0a, 0xe9, 0xd9, 0x1f, 0xdb, 0x6e, 0x58, 0x07, 0x3f, 0x14, 0x51, 0xd9, 0x81, 0x23,
	0xc8, 0xee, 0xca, 0x5d, 0x6c, 0x1b, 0x2f, 0x91, 0x6f, 0xe2, 0x2c, 0x74, 0xed, 0x18, 0xdb, 0xf1,
	0x23, 0x6b, 0xf3, 0x78, 0x10, 0x54, 0x83, 0x62, 0x5d, 0xc7, 0xb2, 0x89, 0x5b, 0x55, 0x93, 0xcf,
	0xa5, 0xd8, 0x0e, 0x1e, 0x1b, 0x12, 0x03, 0x8e, 0x7e, 0xc2, 0x72, 0xf4, 0x7e, 0x67, 0x8e, 0xee,
	0xc2, 0x8c, 0x84, 0x4f, 0xfa, 0x06, 0x6e, 0xc8, 0xa6, 0x5c, 0x6d, 0x36, 0xb1, 0x61, 0xf0, 0x79,
	0xe2, 0x96, 0x42, 0x70, 0x3f, 0xed, 0x51, 0xaf, 0xa3, 0xc9, 0x2d, 0xbe, 0x10, 0xa4, 0xb5, 0xe1,
	0xe8, 0x3d, 0x98, 0xdb, 0x54, 0x74, 0xc3, 0x3c, 0xc0, 0x58, 0xad, 0x6b, 0xaa, 0x8a, 0x9b, 0xf6,
	0x50, 0x8a, 0x89, 0x86, 0xc2, 0x91, 0xa1, 0x44, 0x4a, 0x40, 0x02, 0x14, 0xf6, 0x3b, 0xb2, 0x79,
	0xa2, 0xe9, 0x5d, 0x1e, 0xc8, 0xbc, 0xb9, 0xff, 0x68, 0x09, 0x4a, 0x1b, 0xea, 0x73, 0x45, 0xd7,
	0xd4, 0x2e, 0x56, 0x4d, 0xbe, 0x44, 0xd0, 0x2c, 0x08, 0xed, 0xc0, 0x34, 0x39, 0xe4, 0x1b, 0x9f,
	0xf5, 0x14, 0x1d, 0x1b, 0x55, 0x93, 0x9f, 0x4c, 0x31, 0xb9, 0x01, 0x5e, 0xb4, 0x06, 0xe8, 0x49,
	0x5f, 0xd3, 0x65, 0xba, 0x5d, 0xa9, 0xeb, 0x9f, 0x22, 0x6a, 0x23, 0x30, 0xe8, 0x09, 0xcc, 0xb3,
	0x50, 0x6f, 0x85, 0xa7, 0x53, 0x4c, 0x4b, 0xb4, 0x08, 0xf4, 0x14, 0x16, 0x89, 0x75, 0xfb, 0x58,
	0x6d, 0x29, 0x6a, 0x9b, 0x18, 0x39, 0xd8, 0xd5, 0x4c, 0xe5, 0x44, 0x21, 0x2a, 0x2e, 0xa5, 0x50,
	0x31, 0x54, 0x12, 0xfa, 0x00, 0x16, 0x98, 0x79, 0x68, 0x31, 0x3a, 0x66, 0x52, 0xe8, 0x88, 0x91,
	0x81, 0x56, 0x60, 0x7c, 0xab, 0xbe, 0xcf, 0x5f, 0xa6, 0xa2, 0xec, 0x43, 0xba, 0x45, 0x04, 0xd6,
	0x3b, 0x5a, 0xbf, 0xe5, 0x2c, 0xb6, 0x64, 0x91, 0x59, 0x19, 0xc0, 0x21, 0x96, 0xbb, 0xdb, 0x0d,
	0x1e, 0xd9, 0x19, 0x80, 0xfd, 0x67, 0x05, 0x5b, 0xeb, 0x8b, 0x39, 0x97, 0xb3, 0x04, 0x1f, 0x80,
	0x5a, 0xe7, 0x8c, 0xc6, 0xdd, 0xaa, 0xc9, 0xcf, 0xa5, 0x39, 0x67, 0x2e, 0x1b, 0xe2, 0x21, 0x5f,
	0xef, 0x60, 0x59, 0xed, 0xf7, 0xf8, 0x79, 0x72, 0x1c, 0x9c, 0x5f, 0xf4, 0x31, 0xf0, 0xee, 0x1e,
	0xde, 0xec, 0xf4, 0x3f, 0x63, 0x4f, 0xc2, 0x42, 0x8a, 0xb9, 0x8a, 0x95, 0x82, 0x3e, 0x84, 0x2b,
	0x2e, 0x6e, 0x17, 0x9b, 0xac, 0x82, 0x2b, 0x29, 0x14, 0xc4, 0x09, 0xf1, 0x8d, 0x60, 0x5f, 0xd7,
	0xba, 0xac, 0x02, 0xfe, 0x07, 0x8d, 0x20, 0x20, 0x05, 0x1d, 0xc3, 0x55, 0x17, 0x77, 0xd0, 0xd4,
	0x7a, 0x98, 0x55, 0x71, 0x35, 0x85, 0x8a, 0x78, 0x31, 0x7e, 0xcf, 0x25, 0x61, 0xd9, 0xd0, 0x54,
	0x5e, 0x20, 0xfb, 0x21, 0x04, 0xb7, 0x76, 0xf7, 0x8e, 0x6c, 0xc9, 0x51, 0xcd, 0x77, 0x31, 0x7e,
	0xd6, 0x19, 0x48, 0xb8, 0xa7, 0xe9, 0x66, 0xd5, 0xe4, 0xaf, 0xa5, 0xd9, 0xdd, 0xd1, 0x32, 0xd0,
	0x32, 0x5c, 0x72, 0x36, 0xf0, 0x63, 0xac, 0x1b, 0x56, 0x38, 0x5a, 0x24, 0x86, 0x04, 0xc1, 0x68,
	0xd1, 0xdd, 0x99, 0xb5, 0x01, 0x7f, 0x9d, 0xd0, 0x78, 0x00, 0xf1, 0xdb, 0x31, 0x98, 0x8d, 0x38,
	0x14, 0xa1, 0xd8, 0xb4, 0x02, 0x97, 0x63, 0x22, 0xae, 0x14, 0x46, 0x58, 0x3a, 0xad, 0xaa, 0xe4,
	0xb9, 0xec, 0x65, 0xa7, 0x1e, 0xc0, 0x1f, 0x93, 0xb2, 0x3f, 0x2c, 0x26, 0x95, 0x01, 0xea, 0x9a,
	0x6a, 0xf4, 0xbb, 0x24, 0x0f, 0xcf, 0xd9, 0x71, 0xcf, 0x83, 0x58, 0x2b, 0x75, 0xd0, 0x3f, 0x36,
	0x9a, 0xba, 0xd2, 0xb3, 0x62, 0x2d, 0x89, 0x9b, 0x13, 0xf6, 0x4a, 0x05, 0xe1, 0xd6, 0xd8, 0x58,
	0xd8, 0x0e, 0x7e, 0x8e, 0x3b, 0x24, 0x78, 0x15, 0xa5, 0x30, 0xc2, 0xf2, 0xd5, 0x2c, 0xf0, 0xc0,
	0x94, 0xcd, 0xbe, 0x41, 0xe2, 0x57, 0x51, 0x8a, 0xc0, 0x88, 0x6f, 0xc2, 0xd4, 0x16, 0x36, 0xb7,
	0xea, 0xfb, 0x4e, 0x86, 0x13, 0x39, 0x95, 0x5c, 0xcc, 0x54, 0x8a, 0x0d, 0x98, 0x76, 0xd8, 0x69,
	0x1a, 0xb2, 0x6e, 0x3b, 0x36, 0x6e, 0x94, 0x63, 0xa3, 0x49, 0x88, 0x45, 0x2c, 0x3e, 0x80, 0x99,
	0xa3, 0x5e, 0x4b, 0x36, 0xb1, 0xcf, 0x8e, 0x64, 0x72, 0x6c, 0x09, 0xb3, 0x70, 0x99, 0x91, 0x60,
	0x9b, 0x62, 0x55, 0x99, 0xe2, 0x81, 0x3f, 0x5b, 0x62, 0x83, 0x8a, 0xa3, 0xa9, 0x1c, 0xce, 0xe9,
	0x7c, 0x89, 0xcd, 0x02, 0x4c, 0x30, 0xd5, 0x4e, 0x51, 0xa2, 0x7f, 0xfe, 0x8d, 0x32, 0x9e, 0xe2,
	0xd4, 0x78, 0x6c, 0xe2, 0x6d, 0xb8, 0x39, 0xd4, 0x42, 0x3a, 0x92, 0x13, 0x10, 0x02, 0x64, 0x56,
	0x5e, 0x93, 0x74, 0x00, 0x08, 0xb2, 0x16, 0x39, 0x35, 0x9f, 0x7c, 0x5b, 0xc5, 0xdd, 0x63, 0xb9,
	0xd3, 0xc7, 0x74, 0xff, 0xdb, 0x3f, 0xe2, 0x75, 0xb8, 0x16, 0xa9, 0x87, 0x9a, 0xb1, 0x4c, 0x56,
	0x3b, 0x50, 0x9a, 0xb2, 0xc5, 0xa6, 0x5b, 0x56, 0xbe, 0x0e, 0x97, 0x5c, 0x4a, 0xba, 0x31, 0x6e,
	0x43, 0xd6, 0xfa, 0xa7, 0x2b, 0x5a, 0xa2, 0x2b, 0x6a, 0x81, 0xe8, 0x56, 0x20, 0x68, 0x11, 0xc3,
	0xbd, 0x70, 0x5d, 0x28, 0xb7, 0x06, 0x9b, 0x9a, 0xce, 0x3a, 0x99, 0x97, 0x2d, 0x25, 0x34, 0x58,
	0x49, 0xa6, 0xe6, 0xa2, 0x8a, 0x0a, 0xd3, 0x5a, 0x42, 0xb5, 0xb5, 0xd7, 0x37, 0x2f, 0x70, 0x18,
	0xa3, 0x92, 0x72, 0x7b, 0x41, 0x23, 0xb4, 0xd2, 0x05, 0xfd, 0x7b, 0xd6, 0x5e, 0x14, 0x34, 0xef,
	0x39, 0xd4, 0x5a, 0xee, 0xfc, 0xb4, 0xc2, 0xad, 0x12, 0xbf, 0x5a, 0x81, 0xdc, 0x46, 0x57, 0x56,
	0x3a, 0xb4, 0x05, 0x55, 0x3c, 0x3f, 0xad, 0xe4, 0xb0, 0x05, 0x90, 0x6c, 0x38, 0xba, 0xe6, 0xf4,
	0x86, 0xc6, 0x59, 0x56, 0xda, 0x22, 0x7a, 0x04, 0xd3, 0xe4, 0x23, 0x8d, 0x3b, 0x9d, 0xb2, 0xc6,
	0x47, 0xa4, 0xd0, 0x54, 0xd4, 0x27, 0x00, 0xbd, 0x03, 0x93, 0x24, 0xfe, 0xed, 0x68, 0x6d, 0x45,
	0x4d, 0x54, 0x33, 0x04, 0x04, 0xfa, 0xd8, 0xd1, 0x16, 0x7b, 0x84, 0x27, 0xd2, 0xca, 0x62, 0x1c,
	0xfe, 0x35, 0xc8, 0x91, 0x16, 0x8e, 0x5d, 0x55, 0xb8, 0xf3, 0x40, 0x60, 0xe8, 0x6d, 0x28, 0x59,
	0x71, 0xd2, 0xb1, 0xb9, 0x90, 0x56, 0x0f, 0xcb, 0x8d, 0x6e, 0x43, 0xbe, 0xae, 0x75, 0x7b, 0xb2,
	0x3a, 0x20, 0x55, 0x46, 0xb1, 0x56, 0x3a, 0x3f, 0xad, 0xe4, 0x9b, 0x36, 0x48, 0x72, 0x70, 0x68,
	0x91, 0x56, 0x63, 0xa4, 0x76, 0xa8, 0x15, 0xce, 0x4f, 0x2b, 0x59, 0x55, 0xee, 0x62, 0x5a, 0x97,
	0xdd, 0x83, 0x22, 0x99, 0x07, 0x42, 0x42, 0xea, 0x87, 0xda, 0xd4, 0xf9, 0x69, 0xa5, 0x78, 0xe2,
	0x00, 0x25, 0x0f, 0x8f, 0x96, 0xa1, 0x60, 0x19, 0x40, 0x68, 0x27, 0x09, 0xed, 0xe4, 0xf9, 0x69,
	0xa5, 0xd0, 0xa1, 0x30, 0xc9, 0xc5, 0x8a, 0x55, 0xa8, 0x90, 0x14, 0x77, 0x10, 0x4e, 0xac, 0x13,
	0xfa, 0x2a, 0x51, 0x84, 0xa5, 0x78, 0x11, 0x74, 0xd7, 0xbe, 0x01, 0x57, 0x19, 0x1a, 0x9a, 0x5b,
	0x27, 0x55, 0xb0, 0x08, 0x42, 0x14, 0x33, 0x15, 0xfd, 0x16, 0x5c, 0xb7, 0xb1, 0xc1, 0x52, 0x2f,
	0xa9, 0xf8, 0x25, 0x28, 0xc7, 0x09, 0xa0, 0x2a, 0xfe, 0x9c, 0x83, 0xac, 0x95, 0x9e, 0xc7, 0x9d,
	0xb9, 0xab, 0x74, 0xe5, 0xc6, 0x58, 0x84, 0xbd, 0x6c, 0xb7, 0x7d, 0xca, 0x7d, 0x47, 0x8e, 0xf5,
	0xf7, 0x3f, 0x8b, 0xac, 0xd7, 0xb2, 0xf6, 0x11, 0xb6, 0xa2, 0x90, 0xcd, 0x12, 0x55, 0xba, 0x7d,
	0x14, 0x57, 0xba, 0x25, 0x3b, 0x68, 0x9c, 0xb7, 0x69, 0x63, 0xea, 0xb7, 0x47, 0xa1, 0xca, 0x74,
	0x22, 0xbd, 0x4f, 0xf0, 0x97, 0xa7, 0xdd, 0x11, 0x25, 0x61, 0x3e, 0xad, 0xe9, 0xc3, 0xeb, 0x42,
	0x39, 0xb6, 0x2e, 0x2c, 0xa4, 0x55, 0x14, 0x57, 0x1c, 0xfa, 0xdc, 0x52, 0xf1, 0x25, 0xdc, 0xd2,
	0x16, 0x5b, 0xf7, 0x41, 0x5a, 0xf3, 0x3c, 0x5e, 0x31, 0x6f, 0x05, 0x82, 0x9e, 0x39, 0x10, 0x5f,
	0x87, 0xfc, 0x41, 0xbf, 0xdb, 0x95, 0xf5, 0x01, 0x5a, 0x85, 0xfc, 0x86, 0x6a, 0xea, 0x0a, 0x0e,
	0x06, 0x43, 0x4a, 0x60, 0x21, 0x07, 0x92, 0x43, 0x23, 0x7e, 0x01, 0x30, 0xc9, 0x62, 0xd0, 0x6a,
	0xa8, 0x78, 0xf5, 0x9d, 0x85, 0x60, 0x0d, 0x7b, 0x03, 0x0a, 0x16, 0x24, 0x7c, 0x36, 0x5c, 0xb0,
	0xe5, 0x85, 0xf7, 0xf4, 0x76, 0xf0, 0x68, 0xd8, 0x30, 0x74, 0x2f, 0x78, 0x29, 0x94, 0x65, 0x89,
	0x02, 0x77, 0x43, 0x15, 0xc8, 0xef, 0xe9, 0x6d, 0xa2, 0x2b, 0xc7, 0x92, 0x39, 0x50, 0x2b, 0xf1,
	0x21, 0x11, 0xd0, 0xe9, 0x37, 0xd1, 0x3f, 0xf4, 0x90, 0x74, 0xd1, 0xbc, 0xd5, 0xcb, 0xa7, 0x88,
	0xe8, 0x3e, 0xce, 0xd8, 0xde, 0x52, 0xe1, 0x42, 0x7b, 0x4b, 0xc5, 0xe1, 0xbd, 0x25, 0x48, 0xd2,
	0x5b, 0x2a, 0xbd, 0x44, 0x6f, 0x69, 0x54, 0x3f, 0x67, 0xf2, 0x7f, 0xd0, 0xcf, 0x99, 0xba, 0x80,
	0x7e, 0xce, 0x2a, 0x4c, 0xd7, 0x94, 0x4e, 0xc7, 0x52, 0xac, 0xca, 0xc7, 0x1d, 0xdc, 0x22, 0xcd,
	0x2e, 0x37, 0x13, 0x08, 0x20, 0x23, 0x1b, 0x92, 0x97, 0x52, 0x34, 0x24, 0x67, 0x62, 0x1a, 0x92,
	0xd1, 0xad, 0xba, 0xcb, 0xe9, 0x5b, 0x75, 0xe8, 0xe5, 0x5b, 0x75, 0xeb, 0xa4, 0x13, 0x4e, 0xc1,
	0xa1, 0x16, 0x55, 0x24, 0x0e, 0x3d, 0x86, 0x59, 0x0f, 0xee, 0x59, 0x93, 0xa6, 0x65, 0x15, 0x25,
	0x00, 0x3d, 0x80, 0x6b, 0x1e, 0x38, 0x5c, 0x4e, 0xcf, 0x13, 0x93, 0x86, 0x91, 0xa0, 0x1a, 0x2c,
	0x46, 0xa3, 0x69, 0x89, 0xbd, 0x40, 0x44, 0x0c, 0xa5, 0x11, 0xff, 0x3d, 0x0e, 0xf9, 0x77, 0xf1,
	0xf1, 0x53, 0x4d, 0x7b, 0x16, 0x17, 0xfd, 0x57, 0x43, 0x97, 0x9f, 0x3e, 0x5f, 0x17, 0xbc, 0xe5,
	0x7c, 0x13, 0x2e, 0x6d, 0xab, 0x26, 0x6e, 0xeb, 0x04, 0x70, 0x38, 0xe8, 0xd1, 0xfe, 0x7b, 0x6d,
	0xf6, 0xfc, 0xb4, 0x72, 0x49, 0xf1, 0xa3, 0xa4, 0x20, 0xad, 0x95, 0xda, 0x1d, 0xe0, 0xa6, 0x8e,
	0x4d, 0xd7, 0x1d, 0x92, 0xd4, 0xce, 0xa0, 0x30, 0xc9, 0xc5, 0xa2, 0x07, 0x30, 0x63, 0x7f, 0x1f,
	0x28, 0x6d, 0x55, 0x51, 0xdb, 0x6f, 0xe3, 0x01, 0xf5, 0x8c, 0xe4, 0x7e, 0xd1, 0x08, 0xe0, 0xa4,
	0x10, 0x35, 0xda, 0x4b, 0x97, 0x6b, 0xcf, 0xd3, 0xa0, 0x56, 0x6c, 0x3a, 0x4c, 0xc1, 0xe0, 0xb6,
	0xc7, 0x06, 0xb7, 0x7c, 0x22, 0x81, 0x56, 0x70, 0x2b, 0xb6, 0x1c, 0xa6, 0x60, 0x87, 0xf3, 0x08,
	0x4a, 0xae, 0xbf, 0x4c, 0xe4, 0x68, 0xaf, 0x50, 0x91, 0xa5, 0x13, 0x8f, 0xcd, 0xce, 0xd8, 0x19,
	0x39, 0xe2, 0xdb, 0xb0, 0xea, 0xbe, 0x11, 0x70, 0xd7, 0x8e, 0x6e, 0x03, 0x72, 0xfd, 0xed, 0x4c,
	0xb2, 0x93, 0x63, 0x0a, 0xcc, 0xaa, 0xd8, 0x19, 0xa6, 0xfb, 0x2f, 0x3e, 0x81, 0xb5, 0xa4, 0xc2,
	0x68, 0xe5, 0xba, 0xec, 0xee, 0x39, 0x5a, 0x5e, 0x4e, 0xd3, 0x30, 0x4d, 0xa1, 0x92, 0x83, 0x16,
	0x37, 0x61, 0x39, 0x50, 0xfd, 0x53, 0x0c, 0x33, 0x9a, 0x24, 0x36, 0x1a, 0xf0, 0x4a, 0x02, 0x39,
	0xd4, 0xbc, 0x4d, 0xff, 0xa4, 0x73, 0x29, 0xfc, 0x8e, 0x6f, 0x96, 0x77, 0xe0, 0xee, 0xb6, 0x6a,
	0x85, 0x30, 0x5f, 0x29, 0x6e, 0x7b, 0xdd, 0xba, 0xa6, 0x9e, 0x28, 0xed, 0x7e, 0x8a, 0x2a, 0x41,
	0x02, 0xd8, 0xc7, 0x7a, 0x57, 0x31, 0x8c, 0xa8, 0xab, 0x30, 0xc4, 0xa6, 0xe8, 0x34, 0x37, 0x5f,
	0x82, 0x52, 0x03, 0xbb, 0x07, 0x9e, 0xde, 0x82, 0xb1, 0x20, 0x71, 0x07, 0xb2, 0x92, 0xd6, 0xc1,
	0x17, 0x24, 0xed, 0xaf, 0x1c, 0xdc, 0xb2, 0x46, 0xa3, 0xe8, 0xd8, 0xca, 0x7f, 0xde, 0xc1, 0x96,
	0x3f, 0xf7, 0x6c, 0x3e, 0xd4, 0x46, 0xb4, 0x68, 0xd0, 0x72, 0x28, 0xfd, 0x72, 0xae, 0x28, 0x83,
	0x99, 0x17, 0xa5, 0x64, 0x2e, 0x28, 0xb3, 0x2c, 0xa5, 0x07, 0x47, 0x22, 0x4c, 0x7a, 0x26, 0x38,
	0x79, 0x98, 0xe4, 0x83, 0xd5, 0x0a, 0xce, 0x5d, 0x86, 0xf8, 0x17, 0x0e, 0x6e, 0xd2, 0x21, 0xec,
	0xe9, 0xed, 0xf4, 0x23, 0xb8, 0x13, 0xf9, 0xcc, 0xe7, 0x61, 0x26, 0x98, 0xcc, 0xd9, 0x74, 0x11,
	0xe6, 0xfb, 0xc1, 0x89, 0xac, 0xcf, 0xd3, 0x14, 0xf3, 0xee, 0x23, 0x98, 0x09, 0x3e, 0x72, 0x41,
	0x45, 0xc8, 0xed, 0x1d, 0x3e, 0xdc, 0x90, 0x66, 0x32, 0x88, 0x87, 0xb9, 0xed, 0xdd, 0x83, 0xc3,
	0xea, 0x6e, 0x7d, 0xe3, 0xa3, 0x46, 0xf5, 0xb0, 0xfa, 0x51, 0xb5, 0x5e, 0xdf, 0x38, 0x38, 0x98,
	0xe1, 0xc2, 0x98, 0xa3, 0xfd, 0x9d, 0xbd, 0x6a, 0x63, 0x66, 0x6c, 0xfd, 0x1f, 0x08, 0x72, 0xd6,
	0xd0, 0x0c, 0xf4, 0x00, 0x8a, 0xee, 0x29, 0x47, 0xce, 0x9b, 0x9a, 0xe0, 0xf3, 0x27, 0x81, 0x0f,
	0x23, 0x68, 0x8d, 0x99, 0x41, 0x47, 0xce, 0x73, 0x29, 0xef, 0x81, 0x0d, 0x2a, 0xfb, 0xe8, 0x43,
	0x0f, 0x7d, 0x84, 0x4a, 0x2c, 0xde, 0x15, 0xbb, 0x09, 0x25, 0xe6, 0x9d, 0x0b, 0xba, 0xea, 0xe3,
	0x60, 0x5f, 0xca, 0x08, 0x42, 0x14, 0xca, 0x95, 0x53, 0x07, 0xf0, 0x9e, 0xae, 0x20, 0x3e, 0xa0,
	0xd8, 0xed, 0x2f, 0x0a, 0x57, 0x23, 0x30, 0xec, 0x18, 0x83, 0x3d, 0x3c, 0x77, 0x8c, 0x31, 0x8f,
	0x5a, 0xdc, 0x31, 0xc6, 0xbd, 0x3d, 0x11, 0x33, 0xa8, 0x4b, 0x5e, 0xa6, 0x44, 0xbe, 0xf0, 0x40,
	0x77, 0x3c, 0xf6, 0x61, 0xaf, 0x4b, 0x84, 0xff, 0x1b, 0x49, 0xe7, 0xaa, 0x6b, 0xc1, 0x7c, 0xe4,
	0x9b, 0x0c, 0x74, 0xd3, 0x93, 0x11, 0xfb, 0x12, 0x44, 0xb8, 0x35, 0x9c, 0xc8, 0xd5, 0x62, 0x80,
	0x10, 0xff, 0x74, 0x02, 0x2d, 0x7b, 0x52, 0x86, 0x3f, 0xdd, 0x10, 0x5e, 0x49, 0x40, 0xe9, 0x2a,
	0x95, 0x48, 0x17, 0xd8, 0xf7, 0xaa, 0xe0, 0x7a, 0xf4, 0xfc, 0x3b, 0xe2, 0xcb, 0x71, 0x68, 0x57,
	0xe6, 0x87, 0x30, 0x1b, 0xd1, 0xa2, 0x46, 0x37, 0x9c, 0xda, 0x33, 0xb6, 0x4d, 0x2e, 0x88, 0xc3,
	0x48, 0x5c, 0xf9, 0xcf, 0x43, 0x2d, 0x70, 0x36, 0xbb, 0x45, 0xaf, 0x44, 0x0b, 0x89, 0xb8, 0x57,
	0x10, 0xee, 0x26, 0x21, 0x75, 0xf5, 0xfe, 0x14, 0x26, 0xec, 0x9b, 0x14, 0x34, 0xe7, 0xcd, 0x81,
	0x77, 0x1f, 0x22, 0xcc, 0x07, 0xa0, 0x2e, 0xe3, 0x03, 0x28, 0xba, 0x57, 0x1f, 0xae, 0xaf, 0x08,
	0x5e, 0xa7, 0xb8, 0xbe, 0x22, 0x7c, 0x4b, 0x92, 0x41, 0x3f, 0x87, 0x3c, 0x6d, 0xd6, 0x23, 0x46,
	0x0b, 0x7b, 0x0c, 0x17, 0x82, 0x60, 0x97, 0xf7, 0x37, 0x1c, 0xdc, 0x4a, 0xd2, 0x48, 0x47, 0xeb,
	0xb1, 0x07, 0x2f, 0xb6, 0xb9, 0x2f, 0xbc, 0x9a, 0x8a, 0xc7, 0xbf, 0x45, 0x42, 0x4d, 0x6f, 0x66,
	0x8b, 0xc4, 0xb5, 0xe1, 0x99, 0x2d, 0x12, 0xdf, 0x33, 0x27, 0x0e, 0x22, 0xae, 0x47, 0xe9, 0x3a,
	0x88, 0x11, 0x7d, 0x50, 0xd7, 0x41, 0x8c, 0x6c, 0x76, 0x66, 0xd0, 0xfb, 0x80, 0xc2, 0x1d, 0x4b,
	0xb4, 0x14, 0x16, 0xe0, 0xef, 0x84, 0x0a, 0x37, 0x86, 0x50, 0xb8, 0xc2, 0xdb, 0xb0, 0x10, 0xdd,
	0xaf, 0x44, 0xb7, 0x7c, 0xec, 0x31, 0xfd, 0x50, 0xe1, 0xf6, 0x08, 0x2a, 0x57, 0xd1, 0x0a, 0xc0,
	0x16, 0x36, 0x9d, 0xde, 0xd1, 0x24, 0x65, 0x23, 0x4d, 0x25, 0x61, 0xda, 0xdf, 0x38, 0x12, 0x33,
	0xe8, 0xf7, 0x1c, 0xdc, 0x49, 0x96, 0xe7, 0xa2, 0xd7, 0x82, 0x51, 0x30, 0x49, 0x8e, 0x2d, 0xfc,
	0x38, 0x25, 0x97, 0x3b, 0x8e, 0x5f, 0x73, 0x70, 0x63, 0x64, 0x76, 0x8b, 0xee, 0x47, 0x9f, 0xfd,
	0xd8, 0x7c, 0x5a, 0xf8, 0xff, 0xe4, 0x0c, 0xae, 0x29, 0x4f, 0xe1, 0x66, 0x82, 0x94, 0x17, 0xfd,
	0x88, 0x8a, 0x4e, 0x9e, 0x1e, 0x0b, 0xbe, 0xe5, 0x11, 0x33, 0xe8, 0x03, 0xb8, 0x3e, 0x34, 0xd7,
	0x44, 0xf7, 0x28, 0x43, 0x92, 0x8c, 0x34, 0x24, 0xfd, 0x09, 0x2c, 0x0e, 0x4b, 0x03, 0xd1, 0x5d,
	0xbf, 0xf0, 0x61, 0xb9, 0x62, 0x50, 0x76, 0xed, 0xf5, 0xaf, 0x5f, 0x94, 0x33, 0xdf, 0xbc, 0x28,
	0x67, 0xbe, 0x7f, 0x51, 0xe6, 0xfe, 0xf3, 0xa2, 0xcc, 0x7d, 0x71, 0x56, 0xe6, 0xfe, 0x74, 0x56,
	0xe6, 0xbe, 0x3a, 0x2b, 0x73, 0x5f, 0x9f, 0x95, 0xb9, 0x7f, 0x9e, 0x95, 0xb9, 0x7f, 0x9d, 0x95,
	0x33, 0xdf, 0x9f, 0x95, 0xb9, 0x2f, 0xbf, 0x2b, 0x67, 0xbe, 0xfe, 0xae, 0x9c, 0xf9, 0xe6, 0xbb,
	0x72, 0xe6, 0x78, 0x82, 0xd4, 0x1e, 0xaf, 0xfe, 0x37, 0x00, 0x00, 0xff, 0xff, 0x0f, 0xe8, 0x09,
	0xcb, 0xde, 0x2e, 0x00, 0x00,
}

func (x AuthorizedAction) String() string {
	s, ok := AuthorizedAction_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *LookupOrgRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LookupOrgRequest)
	if !ok {
		that2, ok := that.(LookupOrgRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Cookie != that1.Cookie {
		return false
	}
	if this.OrgExternalID != that1.OrgExternalID {
		return false
	}
	if this.AuthorizeFor != that1.AuthorizeFor {
		return false
	}
	return true
}
func (this *LookupOrgResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LookupOrgResponse)
	if !ok {
		that2, ok := that.(LookupOrgResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.OrganizationID != that1.OrganizationID {
		return false
	}
	if this.UserID != that1.UserID {
		return false
	}
	if len(this.FeatureFlags) != len(that1.FeatureFlags) {
		return false
	}
	for i := range this.FeatureFlags {
		if this.FeatureFlags[i] != that1.FeatureFlags[i] {
			return false
		}
	}
	return true
}
func (this *LookupUsingTokenRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LookupUsingTokenRequest)
	if !ok {
		that2, ok := that.(LookupUsingTokenRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Token != that1.Token {
		return false
	}
	if this.AuthorizeFor != that1.AuthorizeFor {
		return false
	}
	return true
}
func (this *LookupUsingTokenResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LookupUsingTokenResponse)
	if !ok {
		that2, ok := that.(LookupUsingTokenResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.OrganizationID != that1.OrganizationID {
		return false
	}
	if len(this.FeatureFlags) != len(that1.FeatureFlags) {
		return false
	}
	for i := range this.FeatureFlags {
		if this.FeatureFlags[i] != that1.FeatureFlags[i] {
			return false
		}
	}
	return true
}
func (this *LookupAdminRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LookupAdminRequest)
	if !ok {
		that2, ok := that.(LookupAdminRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Cookie != that1.Cookie {
		return false
	}
	return true
}
func (this *LookupAdminResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LookupAdminResponse)
	if !ok {
		that2, ok := that.(LookupAdminResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AdminID != that1.AdminID {
		return false
	}
	return true
}
func (this *LookupUserRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LookupUserRequest)
	if !ok {
		that2, ok := that.(LookupUserRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Cookie != that1.Cookie {
		return false
	}
	return true
}
func (this *LookupUserResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LookupUserResponse)
	if !ok {
		that2, ok := that.(LookupUserResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.UserID != that1.UserID {
		return false
	}
	return true
}
func (this *GetOrganizationsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetOrganizationsRequest)
	if !ok {
		that2, ok := that.(GetOrganizationsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Query != that1.Query {
		return false
	}
	if this.PageNumber != that1.PageNumber {
		return false
	}
	if this.IncludeDeleted != that1.IncludeDeleted {
		return false
	}
	return true
}
func (this *GetOrganizationsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetOrganizationsResponse)
	if !ok {
		that2, ok := that.(GetOrganizationsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Organizations) != len(that1.Organizations) {
		return false
	}
	for i := range this.Organizations {
		if !this.Organizations[i].Equal(&that1.Organizations[i]) {
			return false
		}
	}
	return true
}
func (this *GetBillableOrganizationsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetBillableOrganizationsRequest)
	if !ok {
		that2, ok := that.(GetBillableOrganizationsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Now.Equal(that1.Now) {
		return false
	}
	return true
}
func (this *GetBillableOrganizationsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetBillableOrganizationsResponse)
	if !ok {
		that2, ok := that.(GetBillableOrganizationsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Organizations) != len(that1.Organizations) {
		return false
	}
	for i := range this.Organizations {
		if !this.Organizations[i].Equal(&that1.Organizations[i]) {
			return false
		}
	}
	return true
}
func (this *GetTrialOrganizationsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetTrialOrganizationsRequest)
	if !ok {
		that2, ok := that.(GetTrialOrganizationsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Now.Equal(that1.Now) {
		return false
	}
	return true
}
func (this *GetTrialOrganizationsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetTrialOrganizationsResponse)
	if !ok {
		that2, ok := that.(GetTrialOrganizationsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Organizations) != len(that1.Organizations) {
		return false
	}
	for i := range this.Organizations {
		if !this.Organizations[i].Equal(&that1.Organizations[i]) {
			return false
		}
	}
	return true
}
func (this *GetDelinquentOrganizationsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetDelinquentOrganizationsRequest)
	if !ok {
		that2, ok := that.(GetDelinquentOrganizationsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Now.Equal(that1.Now) {
		return false
	}
	return true
}
func (this *GetDelinquentOrganizationsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetDelinquentOrganizationsResponse)
	if !ok {
		that2, ok := that.(GetDelinquentOrganizationsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Organizations) != len(that1.Organizations) {
		return false
	}
	for i := range this.Organizations {
		if !this.Organizations[i].Equal(&that1.Organizations[i]) {
			return false
		}
	}
	return true
}
func (this *GetOrganizationRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetOrganizationRequest)
	if !ok {
		that2, ok := that.(GetOrganizationRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.ID == nil {
		if this.ID != nil {
			return false
		}
	} else if this.ID == nil {
		return false
	} else if !this.ID.Equal(that1.ID) {
		return false
	}
	return true
}
func (this *GetOrganizationRequest_ExternalID) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetOrganizationRequest_ExternalID)
	if !ok {
		that2, ok := that.(GetOrganizationRequest_ExternalID)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ExternalID != that1.ExternalID {
		return false
	}
	return true
}
func (this *GetOrganizationRequest_GCPExternalAccountID) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetOrganizationRequest_GCPExternalAccountID)
	if !ok {
		that2, ok := that.(GetOrganizationRequest_GCPExternalAccountID)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.GCPExternalAccountID != that1.GCPExternalAccountID {
		return false
	}
	return true
}
func (this *GetOrganizationRequest_InternalID) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetOrganizationRequest_InternalID)
	if !ok {
		that2, ok := that.(GetOrganizationRequest_InternalID)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.InternalID != that1.InternalID {
		return false
	}
	return true
}
func (this *GetOrganizationResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetOrganizationResponse)
	if !ok {
		that2, ok := that.(GetOrganizationResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Organization.Equal(&that1.Organization) {
		return false
	}
	return true
}
func (this *Organization) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Organization)
	if !ok {
		that2, ok := that.(Organization)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.ExternalID != that1.ExternalID {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.ProbeToken != that1.ProbeToken {
		return false
	}
	if !this.CreatedAt.Equal(that1.CreatedAt) {
		return false
	}
	if len(this.FeatureFlags) != len(that1.FeatureFlags) {
		return false
	}
	for i := range this.FeatureFlags {
		if this.FeatureFlags[i] != that1.FeatureFlags[i] {
			return false
		}
	}
	if this.RefuseDataAccess != that1.RefuseDataAccess {
		return false
	}
	if this.RefuseDataUpload != that1.RefuseDataUpload {
		return false
	}
	if that1.FirstSeenConnectedAt == nil {
		if this.FirstSeenConnectedAt != nil {
			return false
		}
	} else if !this.FirstSeenConnectedAt.Equal(*that1.FirstSeenConnectedAt) {
		return false
	}
	if this.Platform != that1.Platform {
		return false
	}
	if this.Environment != that1.Environment {
		return false
	}
	if !this.TrialExpiresAt.Equal(that1.TrialExpiresAt) {
		return false
	}
	if this.ZuoraAccountNumber != that1.ZuoraAccountNumber {
		return false
	}
	if that1.ZuoraAccountCreatedAt == nil {
		if this.ZuoraAccountCreatedAt != nil {
			return false
		}
	} else if !this.ZuoraAccountCreatedAt.Equal(*that1.ZuoraAccountCreatedAt) {
		return false
	}
	if that1.TrialPendingExpiryNotifiedAt == nil {
		if this.TrialPendingExpiryNotifiedAt != nil {
			return false
		}
	} else if !this.TrialPendingExpiryNotifiedAt.Equal(*that1.TrialPendingExpiryNotifiedAt) {
		return false
	}
	if that1.TrialExpiredNotifiedAt == nil {
		if this.TrialExpiredNotifiedAt != nil {
			return false
		}
	} else if !this.TrialExpiredNotifiedAt.Equal(*that1.TrialExpiredNotifiedAt) {
		return false
	}
	if !this.GCP.Equal(that1.GCP) {
		return false
	}
	if this.TeamID != that1.TeamID {
		return false
	}
	if this.TeamExternalID != that1.TeamExternalID {
		return false
	}
	if !this.DeletedAt.Equal(that1.DeletedAt) {
		return false
	}
	if this.Cleanup != that1.Cleanup {
		return false
	}
	if that1.FirstSeenFluxConnectedAt == nil {
		if this.FirstSeenFluxConnectedAt != nil {
			return false
		}
	} else if !this.FirstSeenFluxConnectedAt.Equal(*that1.FirstSeenFluxConnectedAt) {
		return false
	}
	if that1.FirstSeenNetConnectedAt == nil {
		if this.FirstSeenNetConnectedAt != nil {
			return false
		}
	} else if !this.FirstSeenNetConnectedAt.Equal(*that1.FirstSeenNetConnectedAt) {
		return false
	}
	if that1.FirstSeenPromConnectedAt == nil {
		if this.FirstSeenPromConnectedAt != nil {
			return false
		}
	} else if !this.FirstSeenPromConnectedAt.Equal(*that1.FirstSeenPromConnectedAt) {
		return false
	}
	if that1.FirstSeenScopeConnectedAt == nil {
		if this.FirstSeenScopeConnectedAt != nil {
			return false
		}
	} else if !this.FirstSeenScopeConnectedAt.Equal(*that1.FirstSeenScopeConnectedAt) {
		return false
	}
	if this.RefuseDataReason != that1.RefuseDataReason {
		return false
	}
	if that1.LastSentWeeklyReportAt == nil {
		if this.LastSentWeeklyReportAt != nil {
			return false
		}
	} else if !this.LastSentWeeklyReportAt.Equal(*that1.LastSentWeeklyReportAt) {
		return false
	}
	if this.PlatformVersion != that1.PlatformVersion {
		return false
	}
	if this.DeletedBy != that1.DeletedBy {
		return false
	}
	return true
}
func (this *GoogleCloudPlatform) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GoogleCloudPlatform)
	if !ok {
		that2, ok := that.(GoogleCloudPlatform)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.ExternalAccountID != that1.ExternalAccountID {
		return false
	}
	if this.Activated != that1.Activated {
		return false
	}
	if !this.CreatedAt.Equal(that1.CreatedAt) {
		return false
	}
	if this.ConsumerID != that1.ConsumerID {
		return false
	}
	if this.SubscriptionName != that1.SubscriptionName {
		return false
	}
	if this.SubscriptionLevel != that1.SubscriptionLevel {
		return false
	}
	if this.SubscriptionStatus != that1.SubscriptionStatus {
		return false
	}
	return true
}
func (this *GetGCPRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetGCPRequest)
	if !ok {
		that2, ok := that.(GetGCPRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ExternalAccountID != that1.ExternalAccountID {
		return false
	}
	return true
}
func (this *GetGCPResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetGCPResponse)
	if !ok {
		that2, ok := that.(GetGCPResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GCP.Equal(&that1.GCP) {
		return false
	}
	return true
}
func (this *UpdateGCPRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateGCPRequest)
	if !ok {
		that2, ok := that.(UpdateGCPRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GCP.Equal(that1.GCP) {
		return false
	}
	return true
}
func (this *UpdateGCPResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateGCPResponse)
	if !ok {
		that2, ok := that.(UpdateGCPResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *SetOrganizationZuoraAccountRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SetOrganizationZuoraAccountRequest)
	if !ok {
		that2, ok := that.(SetOrganizationZuoraAccountRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ExternalID != that1.ExternalID {
		return false
	}
	if this.Number != that1.Number {
		return false
	}
	if that1.CreatedAt == nil {
		if this.CreatedAt != nil {
			return false
		}
	} else if !this.CreatedAt.Equal(*that1.CreatedAt) {
		return false
	}
	return true
}
func (this *SetOrganizationZuoraAccountResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SetOrganizationZuoraAccountResponse)
	if !ok {
		that2, ok := that.(SetOrganizationZuoraAccountResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *SetOrganizationFlagRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SetOrganizationFlagRequest)
	if !ok {
		that2, ok := that.(SetOrganizationFlagRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ExternalID != that1.ExternalID {
		return false
	}
	if this.Flag != that1.Flag {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	return true
}
func (this *SetOrganizationFlagResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SetOrganizationFlagResponse)
	if !ok {
		that2, ok := that.(SetOrganizationFlagResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *GetUserRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetUserRequest)
	if !ok {
		that2, ok := that.(GetUserRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.UserID != that1.UserID {
		return false
	}
	return true
}
func (this *GetUserResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetUserResponse)
	if !ok {
		that2, ok := that.(GetUserResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.User.Equal(&that1.User) {
		return false
	}
	return true
}
func (this *GetOrganizationsReadyForWeeklyReportRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetOrganizationsReadyForWeeklyReportRequest)
	if !ok {
		that2, ok := that.(GetOrganizationsReadyForWeeklyReportRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Now.Equal(that1.Now) {
		return false
	}
	return true
}
func (this *GetOrganizationsReadyForWeeklyReportResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetOrganizationsReadyForWeeklyReportResponse)
	if !ok {
		that2, ok := that.(GetOrganizationsReadyForWeeklyReportResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Organizations) != len(that1.Organizations) {
		return false
	}
	for i := range this.Organizations {
		if !this.Organizations[i].Equal(&that1.Organizations[i]) {
			return false
		}
	}
	return true
}
func (this *SendOutWeeklyReportRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SendOutWeeklyReportRequest)
	if !ok {
		that2, ok := that.(SendOutWeeklyReportRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Now.Equal(that1.Now) {
		return false
	}
	if this.ExternalID != that1.ExternalID {
		return false
	}
	return true
}
func (this *SendOutWeeklyReportResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SendOutWeeklyReportResponse)
	if !ok {
		that2, ok := that.(SendOutWeeklyReportResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *User) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*User)
	if !ok {
		that2, ok := that.(User)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.Email != that1.Email {
		return false
	}
	if this.Token != that1.Token {
		return false
	}
	if !this.TokenCreatedAt.Equal(that1.TokenCreatedAt) {
		return false
	}
	if !this.FirstLoginAt.Equal(that1.FirstLoginAt) {
		return false
	}
	if !this.CreatedAt.Equal(that1.CreatedAt) {
		return false
	}
	if this.Admin != that1.Admin {
		return false
	}
	if !this.LastLoginAt.Equal(that1.LastLoginAt) {
		return false
	}
	if this.Company != that1.Company {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.FirstName != that1.FirstName {
		return false
	}
	if this.LastName != that1.LastName {
		return false
	}
	return true
}
func (this *NotifyTrialPendingExpiryRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NotifyTrialPendingExpiryRequest)
	if !ok {
		that2, ok := that.(NotifyTrialPendingExpiryRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ExternalID != that1.ExternalID {
		return false
	}
	return true
}
func (this *NotifyTrialPendingExpiryResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NotifyTrialPendingExpiryResponse)
	if !ok {
		that2, ok := that.(NotifyTrialPendingExpiryResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *NotifyTrialExpiredRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NotifyTrialExpiredRequest)
	if !ok {
		that2, ok := that.(NotifyTrialExpiredRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ExternalID != that1.ExternalID {
		return false
	}
	return true
}
func (this *NotifyTrialExpiredResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NotifyTrialExpiredResponse)
	if !ok {
		that2, ok := that.(NotifyTrialExpiredResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *NotifyRefuseDataUploadRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NotifyRefuseDataUploadRequest)
	if !ok {
		that2, ok := that.(NotifyRefuseDataUploadRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ExternalID != that1.ExternalID {
		return false
	}
	return true
}
func (this *NotifyRefuseDataUploadResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NotifyRefuseDataUploadResponse)
	if !ok {
		that2, ok := that.(NotifyRefuseDataUploadResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Team) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Team)
	if !ok {
		that2, ok := that.(Team)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.ExternalID != that1.ExternalID {
		return false
	}
	if this.ZuoraAccountNumber != that1.ZuoraAccountNumber {
		return false
	}
	if that1.ZuoraAccountCreatedAt == nil {
		if this.ZuoraAccountCreatedAt != nil {
			return false
		}
	} else if !this.ZuoraAccountCreatedAt.Equal(*that1.ZuoraAccountCreatedAt) {
		return false
	}
	if !this.TrialExpiresAt.Equal(that1.TrialExpiresAt) {
		return false
	}
	if that1.TrialPendingExpiryNotifiedAt == nil {
		if this.TrialPendingExpiryNotifiedAt != nil {
			return false
		}
	} else if !this.TrialPendingExpiryNotifiedAt.Equal(*that1.TrialPendingExpiryNotifiedAt) {
		return false
	}
	if that1.TrialExpiredNotifiedAt == nil {
		if this.TrialExpiredNotifiedAt != nil {
			return false
		}
	} else if !this.TrialExpiredNotifiedAt.Equal(*that1.TrialExpiredNotifiedAt) {
		return false
	}
	if !this.CreatedAt.Equal(that1.CreatedAt) {
		return false
	}
	if that1.DeletedAt == nil {
		if this.DeletedAt != nil {
			return false
		}
	} else if !this.DeletedAt.Equal(*that1.DeletedAt) {
		return false
	}
	return true
}
func (this *Empty) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Empty)
	if !ok {
		that2, ok := that.(Empty)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Summary) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Summary)
	if !ok {
		that2, ok := that.(Summary)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Entries) != len(that1.Entries) {
		return false
	}
	for i := range this.Entries {
		if !this.Entries[i].Equal(that1.Entries[i]) {
			return false
		}
	}
	return true
}
func (this *SummaryEntry) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SummaryEntry)
	if !ok {
		that2, ok := that.(SummaryEntry)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TeamExternalID != that1.TeamExternalID {
		return false
	}
	if this.TeamName != that1.TeamName {
		return false
	}
	if this.OrgID != that1.OrgID {
		return false
	}
	if this.OrgExternalID != that1.OrgExternalID {
		return false
	}
	if this.OrgName != that1.OrgName {
		return false
	}
	if len(this.Emails) != len(that1.Emails) {
		return false
	}
	for i := range this.Emails {
		if this.Emails[i] != that1.Emails[i] {
			return false
		}
	}
	if !this.OrgCreatedAt.Equal(that1.OrgCreatedAt) {
		return false
	}
	if that1.FirstSeenConnectedAt == nil {
		if this.FirstSeenConnectedAt != nil {
			return false
		}
	} else if !this.FirstSeenConnectedAt.Equal(*that1.FirstSeenConnectedAt) {
		return false
	}
	if this.Platform != that1.Platform {
		return false
	}
	if this.Environment != that1.Environment {
		return false
	}
	if !this.TrialExpiresAt.Equal(that1.TrialExpiresAt) {
		return false
	}
	if that1.TrialPendingExpiryNotifiedAt == nil {
		if this.TrialPendingExpiryNotifiedAt != nil {
			return false
		}
	} else if !this.TrialPendingExpiryNotifiedAt.Equal(*that1.TrialPendingExpiryNotifiedAt) {
		return false
	}
	if that1.TrialExpiredNotifiedAt == nil {
		if this.TrialExpiredNotifiedAt != nil {
			return false
		}
	} else if !this.TrialExpiredNotifiedAt.Equal(*that1.TrialExpiredNotifiedAt) {
		return false
	}
	if this.BillingEnabled != that1.BillingEnabled {
		return false
	}
	if this.RefuseDataAccess != that1.RefuseDataAccess {
		return false
	}
	if this.RefuseDataUpload != that1.RefuseDataUpload {
		return false
	}
	if this.ZuoraAccountNumber != that1.ZuoraAccountNumber {
		return false
	}
	if that1.ZuoraAccountCreatedAt == nil {
		if this.ZuoraAccountCreatedAt != nil {
			return false
		}
	} else if !this.ZuoraAccountCreatedAt.Equal(*that1.ZuoraAccountCreatedAt) {
		return false
	}
	if this.GCPAccountExternalID != that1.GCPAccountExternalID {
		return false
	}
	if !this.GCPAccountCreatedAt.Equal(that1.GCPAccountCreatedAt) {
		return false
	}
	if this.GCPAccountSubscriptionLevel != that1.GCPAccountSubscriptionLevel {
		return false
	}
	if this.GCPAccountSubscriptionStatus != that1.GCPAccountSubscriptionStatus {
		return false
	}
	return true
}
func (this *Webhook) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Webhook)
	if !ok {
		that2, ok := that.(Webhook)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.OrganizationID != that1.OrganizationID {
		return false
	}
	if this.IntegrationType != that1.IntegrationType {
		return false
	}
	if this.SecretID != that1.SecretID {
		return false
	}
	if this.SecretSigningKey != that1.SecretSigningKey {
		return false
	}
	if !this.CreatedAt.Equal(that1.CreatedAt) {
		return false
	}
	if that1.DeletedAt == nil {
		if this.DeletedAt != nil {
			return false
		}
	} else if !this.DeletedAt.Equal(*that1.DeletedAt) {
		return false
	}
	if that1.FirstSeenAt == nil {
		if this.FirstSeenAt != nil {
			return false
		}
	} else if !this.FirstSeenAt.Equal(*that1.FirstSeenAt) {
		return false
	}
	return true
}
func (this *LookupOrganizationWebhookUsingSecretIDRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LookupOrganizationWebhookUsingSecretIDRequest)
	if !ok {
		that2, ok := that.(LookupOrganizationWebhookUsingSecretIDRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SecretID != that1.SecretID {
		return false
	}
	return true
}
func (this *LookupOrganizationWebhookUsingSecretIDResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LookupOrganizationWebhookUsingSecretIDResponse)
	if !ok {
		that2, ok := that.(LookupOrganizationWebhookUsingSecretIDResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Webhook.Equal(that1.Webhook) {
		return false
	}
	return true
}
func (this *SetOrganizationWebhookFirstSeenAtRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SetOrganizationWebhookFirstSeenAtRequest)
	if !ok {
		that2, ok := that.(SetOrganizationWebhookFirstSeenAtRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SecretID != that1.SecretID {
		return false
	}
	return true
}
func (this *SetOrganizationWebhookFirstSeenAtResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SetOrganizationWebhookFirstSeenAtResponse)
	if !ok {
		that2, ok := that.(SetOrganizationWebhookFirstSeenAtResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.FirstSeenAt == nil {
		if this.FirstSeenAt != nil {
			return false
		}
	} else if !this.FirstSeenAt.Equal(*that1.FirstSeenAt) {
		return false
	}
	return true
}
func (this *InformOrganizationBillingConfiguredRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*InformOrganizationBillingConfiguredRequest)
	if !ok {
		that2, ok := that.(InformOrganizationBillingConfiguredRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ExternalID != that1.ExternalID {
		return false
	}
	return true
}
func (this *Permission) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Permission)
	if !ok {
		that2, ok := that.(Permission)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	return true
}
func (this *Role) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Role)
	if !ok {
		that2, ok := that.(Role)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	return true
}
func (this *RequireTeamMemberPermissionToRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequireTeamMemberPermissionToRequest)
	if !ok {
		that2, ok := that.(RequireTeamMemberPermissionToRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.UserID != that1.UserID {
		return false
	}
	if that1.TeamID == nil {
		if this.TeamID != nil {
			return false
		}
	} else if this.TeamID == nil {
		return false
	} else if !this.TeamID.Equal(that1.TeamID) {
		return false
	}
	if this.PermissionID != that1.PermissionID {
		return false
	}
	return true
}
func (this *RequireTeamMemberPermissionToRequest_TeamExternalID) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequireTeamMemberPermissionToRequest_TeamExternalID)
	if !ok {
		that2, ok := that.(RequireTeamMemberPermissionToRequest_TeamExternalID)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TeamExternalID != that1.TeamExternalID {
		return false
	}
	return true
}
func (this *RequireTeamMemberPermissionToRequest_TeamInternalID) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequireTeamMemberPermissionToRequest_TeamInternalID)
	if !ok {
		that2, ok := that.(RequireTeamMemberPermissionToRequest_TeamInternalID)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TeamInternalID != that1.TeamInternalID {
		return false
	}
	return true
}
func (this *RequireOrgMemberPermissionToRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequireOrgMemberPermissionToRequest)
	if !ok {
		that2, ok := that.(RequireOrgMemberPermissionToRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.UserID != that1.UserID {
		return false
	}
	if that1.OrgID == nil {
		if this.OrgID != nil {
			return false
		}
	} else if this.OrgID == nil {
		return false
	} else if !this.OrgID.Equal(that1.OrgID) {
		return false
	}
	if this.PermissionID != that1.PermissionID {
		return false
	}
	return true
}
func (this *RequireOrgMemberPermissionToRequest_OrgExternalID) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequireOrgMemberPermissionToRequest_OrgExternalID)
	if !ok {
		that2, ok := that.(RequireOrgMemberPermissionToRequest_OrgExternalID)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.OrgExternalID != that1.OrgExternalID {
		return false
	}
	return true
}
func (this *RequireOrgMemberPermissionToRequest_OrgInternalID) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequireOrgMemberPermissionToRequest_OrgInternalID)
	if !ok {
		that2, ok := that.(RequireOrgMemberPermissionToRequest_OrgInternalID)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.OrgInternalID != that1.OrgInternalID {
		return false
	}
	return true
}
func (this *LookupOrgRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&users.LookupOrgRequest{")
	s = append(s, "Cookie: "+fmt.Sprintf("%#v", this.Cookie)+",\n")
	s = append(s, "OrgExternalID: "+fmt.Sprintf("%#v", this.OrgExternalID)+",\n")
	s = append(s, "AuthorizeFor: "+fmt.Sprintf("%#v", this.AuthorizeFor)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LookupOrgResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&users.LookupOrgResponse{")
	s = append(s, "OrganizationID: "+fmt.Sprintf("%#v", this.OrganizationID)+",\n")
	s = append(s, "UserID: "+fmt.Sprintf("%#v", this.UserID)+",\n")
	s = append(s, "FeatureFlags: "+fmt.Sprintf("%#v", this.FeatureFlags)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LookupUsingTokenRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&users.LookupUsingTokenRequest{")
	s = append(s, "Token: "+fmt.Sprintf("%#v", this.Token)+",\n")
	s = append(s, "AuthorizeFor: "+fmt.Sprintf("%#v", this.AuthorizeFor)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LookupUsingTokenResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&users.LookupUsingTokenResponse{")
	s = append(s, "OrganizationID: "+fmt.Sprintf("%#v", this.OrganizationID)+",\n")
	s = append(s, "FeatureFlags: "+fmt.Sprintf("%#v", this.FeatureFlags)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LookupAdminRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&users.LookupAdminRequest{")
	s = append(s, "Cookie: "+fmt.Sprintf("%#v", this.Cookie)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LookupAdminResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&users.LookupAdminResponse{")
	s = append(s, "AdminID: "+fmt.Sprintf("%#v", this.AdminID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LookupUserRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&users.LookupUserRequest{")
	s = append(s, "Cookie: "+fmt.Sprintf("%#v", this.Cookie)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LookupUserResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&users.LookupUserResponse{")
	s = append(s, "UserID: "+fmt.Sprintf("%#v", this.UserID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetOrganizationsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&users.GetOrganizationsRequest{")
	s = append(s, "Query: "+fmt.Sprintf("%#v", this.Query)+",\n")
	s = append(s, "PageNumber: "+fmt.Sprintf("%#v", this.PageNumber)+",\n")
	s = append(s, "IncludeDeleted: "+fmt.Sprintf("%#v", this.IncludeDeleted)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetOrganizationsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&users.GetOrganizationsResponse{")
	if this.Organizations != nil {
		vs := make([]Organization, len(this.Organizations))
		for i := range vs {
			vs[i] = this.Organizations[i]
		}
		s = append(s, "Organizations: "+fmt.Sprintf("%#v", vs)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetBillableOrganizationsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&users.GetBillableOrganizationsRequest{")
	s = append(s, "Now: "+fmt.Sprintf("%#v", this.Now)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetBillableOrganizationsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&users.GetBillableOrganizationsResponse{")
	if this.Organizations != nil {
		vs := make([]Organization, len(this.Organizations))
		for i := range vs {
			vs[i] = this.Organizations[i]
		}
		s = append(s, "Organizations: "+fmt.Sprintf("%#v", vs)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetTrialOrganizationsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&users.GetTrialOrganizationsRequest{")
	s = append(s, "Now: "+fmt.Sprintf("%#v", this.Now)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetTrialOrganizationsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&users.GetTrialOrganizationsResponse{")
	if this.Organizations != nil {
		vs := make([]Organization, len(this.Organizations))
		for i := range vs {
			vs[i] = this.Organizations[i]
		}
		s = append(s, "Organizations: "+fmt.Sprintf("%#v", vs)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetDelinquentOrganizationsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&users.GetDelinquentOrganizationsRequest{")
	s = append(s, "Now: "+fmt.Sprintf("%#v", this.Now)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetDelinquentOrganizationsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&users.GetDelinquentOrganizationsResponse{")
	if this.Organizations != nil {
		vs := make([]Organization, len(this.Organizations))
		for i := range vs {
			vs[i] = this.Organizations[i]
		}
		s = append(s, "Organizations: "+fmt.Sprintf("%#v", vs)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetOrganizationRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&users.GetOrganizationRequest{")
	if this.ID != nil {
		s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetOrganizationRequest_ExternalID) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&users.GetOrganizationRequest_ExternalID{` +
		`ExternalID:` + fmt.Sprintf("%#v", this.ExternalID) + `}`}, ", ")
	return s
}
func (this *GetOrganizationRequest_GCPExternalAccountID) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&users.GetOrganizationRequest_GCPExternalAccountID{` +
		`GCPExternalAccountID:` + fmt.Sprintf("%#v", this.GCPExternalAccountID) + `}`}, ", ")
	return s
}
func (this *GetOrganizationRequest_InternalID) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&users.GetOrganizationRequest_InternalID{` +
		`InternalID:` + fmt.Sprintf("%#v", this.InternalID) + `}`}, ", ")
	return s
}
func (this *GetOrganizationResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&users.GetOrganizationResponse{")
	s = append(s, "Organization: "+strings.Replace(this.Organization.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Organization) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 33)
	s = append(s, "&users.Organization{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "ExternalID: "+fmt.Sprintf("%#v", this.ExternalID)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "ProbeToken: "+fmt.Sprintf("%#v", this.ProbeToken)+",\n")
	s = append(s, "CreatedAt: "+fmt.Sprintf("%#v", this.CreatedAt)+",\n")
	s = append(s, "FeatureFlags: "+fmt.Sprintf("%#v", this.FeatureFlags)+",\n")
	s = append(s, "RefuseDataAccess: "+fmt.Sprintf("%#v", this.RefuseDataAccess)+",\n")
	s = append(s, "RefuseDataUpload: "+fmt.Sprintf("%#v", this.RefuseDataUpload)+",\n")
	s = append(s, "FirstSeenConnectedAt: "+fmt.Sprintf("%#v", this.FirstSeenConnectedAt)+",\n")
	s = append(s, "Platform: "+fmt.Sprintf("%#v", this.Platform)+",\n")
	s = append(s, "Environment: "+fmt.Sprintf("%#v", this.Environment)+",\n")
	s = append(s, "TrialExpiresAt: "+fmt.Sprintf("%#v", this.TrialExpiresAt)+",\n")
	s = append(s, "ZuoraAccountNumber: "+fmt.Sprintf("%#v", this.ZuoraAccountNumber)+",\n")
	s = append(s, "ZuoraAccountCreatedAt: "+fmt.Sprintf("%#v", this.ZuoraAccountCreatedAt)+",\n")
	s = append(s, "TrialPendingExpiryNotifiedAt: "+fmt.Sprintf("%#v", this.TrialPendingExpiryNotifiedAt)+",\n")
	s = append(s, "TrialExpiredNotifiedAt: "+fmt.Sprintf("%#v", this.TrialExpiredNotifiedAt)+",\n")
	if this.GCP != nil {
		s = append(s, "GCP: "+fmt.Sprintf("%#v", this.GCP)+",\n")
	}
	s = append(s, "TeamID: "+fmt.Sprintf("%#v", this.TeamID)+",\n")
	s = append(s, "TeamExternalID: "+fmt.Sprintf("%#v", this.TeamExternalID)+",\n")
	s = append(s, "DeletedAt: "+fmt.Sprintf("%#v", this.DeletedAt)+",\n")
	s = append(s, "Cleanup: "+fmt.Sprintf("%#v", this.Cleanup)+",\n")
	s = append(s, "FirstSeenFluxConnectedAt: "+fmt.Sprintf("%#v", this.FirstSeenFluxConnectedAt)+",\n")
	s = append(s, "FirstSeenNetConnectedAt: "+fmt.Sprintf("%#v", this.FirstSeenNetConnectedAt)+",\n")
	s = append(s, "FirstSeenPromConnectedAt: "+fmt.Sprintf("%#v", this.FirstSeenPromConnectedAt)+",\n")
	s = append(s, "FirstSeenScopeConnectedAt: "+fmt.Sprintf("%#v", this.FirstSeenScopeConnectedAt)+",\n")
	s = append(s, "RefuseDataReason: "+fmt.Sprintf("%#v", this.RefuseDataReason)+",\n")
	s = append(s, "LastSentWeeklyReportAt: "+fmt.Sprintf("%#v", this.LastSentWeeklyReportAt)+",\n")
	s = append(s, "PlatformVersion: "+fmt.Sprintf("%#v", this.PlatformVersion)+",\n")
	s = append(s, "DeletedBy: "+fmt.Sprintf("%#v", this.DeletedBy)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GoogleCloudPlatform) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&users.GoogleCloudPlatform{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "ExternalAccountID: "+fmt.Sprintf("%#v", this.ExternalAccountID)+",\n")
	s = append(s, "Activated: "+fmt.Sprintf("%#v", this.Activated)+",\n")
	s = append(s, "CreatedAt: "+fmt.Sprintf("%#v", this.CreatedAt)+",\n")
	s = append(s, "ConsumerID: "+fmt.Sprintf("%#v", this.ConsumerID)+",\n")
	s = append(s, "SubscriptionName: "+fmt.Sprintf("%#v", this.SubscriptionName)+",\n")
	s = append(s, "SubscriptionLevel: "+fmt.Sprintf("%#v", this.SubscriptionLevel)+",\n")
	s = append(s, "SubscriptionStatus: "+fmt.Sprintf("%#v", this.SubscriptionStatus)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetGCPRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&users.GetGCPRequest{")
	s = append(s, "ExternalAccountID: "+fmt.Sprintf("%#v", this.ExternalAccountID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetGCPResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&users.GetGCPResponse{")
	s = append(s, "GCP: "+strings.Replace(this.GCP.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateGCPRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&users.UpdateGCPRequest{")
	if this.GCP != nil {
		s = append(s, "GCP: "+fmt.Sprintf("%#v", this.GCP)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateGCPResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&users.UpdateGCPResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SetOrganizationZuoraAccountRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&users.SetOrganizationZuoraAccountRequest{")
	s = append(s, "ExternalID: "+fmt.Sprintf("%#v", this.ExternalID)+",\n")
	s = append(s, "Number: "+fmt.Sprintf("%#v", this.Number)+",\n")
	s = append(s, "CreatedAt: "+fmt.Sprintf("%#v", this.CreatedAt)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SetOrganizationZuoraAccountResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&users.SetOrganizationZuoraAccountResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SetOrganizationFlagRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&users.SetOrganizationFlagRequest{")
	s = append(s, "ExternalID: "+fmt.Sprintf("%#v", this.ExternalID)+",\n")
	s = append(s, "Flag: "+fmt.Sprintf("%#v", this.Flag)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SetOrganizationFlagResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&users.SetOrganizationFlagResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetUserRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&users.GetUserRequest{")
	s = append(s, "UserID: "+fmt.Sprintf("%#v", this.UserID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetUserResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&users.GetUserResponse{")
	s = append(s, "User: "+strings.Replace(this.User.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetOrganizationsReadyForWeeklyReportRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&users.GetOrganizationsReadyForWeeklyReportRequest{")
	s = append(s, "Now: "+fmt.Sprintf("%#v", this.Now)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetOrganizationsReadyForWeeklyReportResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&users.GetOrganizationsReadyForWeeklyReportResponse{")
	if this.Organizations != nil {
		vs := make([]Organization, len(this.Organizations))
		for i := range vs {
			vs[i] = this.Organizations[i]
		}
		s = append(s, "Organizations: "+fmt.Sprintf("%#v", vs)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SendOutWeeklyReportRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&users.SendOutWeeklyReportRequest{")
	s = append(s, "Now: "+fmt.Sprintf("%#v", this.Now)+",\n")
	s = append(s, "ExternalID: "+fmt.Sprintf("%#v", this.ExternalID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SendOutWeeklyReportResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&users.SendOutWeeklyReportResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *User) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 16)
	s = append(s, "&users.User{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "Email: "+fmt.Sprintf("%#v", this.Email)+",\n")
	s = append(s, "Token: "+fmt.Sprintf("%#v", this.Token)+",\n")
	s = append(s, "TokenCreatedAt: "+fmt.Sprintf("%#v", this.TokenCreatedAt)+",\n")
	s = append(s, "FirstLoginAt: "+fmt.Sprintf("%#v", this.FirstLoginAt)+",\n")
	s = append(s, "CreatedAt: "+fmt.Sprintf("%#v", this.CreatedAt)+",\n")
	s = append(s, "Admin: "+fmt.Sprintf("%#v", this.Admin)+",\n")
	s = append(s, "LastLoginAt: "+fmt.Sprintf("%#v", this.LastLoginAt)+",\n")
	s = append(s, "Company: "+fmt.Sprintf("%#v", this.Company)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "FirstName: "+fmt.Sprintf("%#v", this.FirstName)+",\n")
	s = append(s, "LastName: "+fmt.Sprintf("%#v", this.LastName)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NotifyTrialPendingExpiryRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&users.NotifyTrialPendingExpiryRequest{")
	s = append(s, "ExternalID: "+fmt.Sprintf("%#v", this.ExternalID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NotifyTrialPendingExpiryResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&users.NotifyTrialPendingExpiryResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NotifyTrialExpiredRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&users.NotifyTrialExpiredRequest{")
	s = append(s, "ExternalID: "+fmt.Sprintf("%#v", this.ExternalID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NotifyTrialExpiredResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&users.NotifyTrialExpiredResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NotifyRefuseDataUploadRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&users.NotifyRefuseDataUploadRequest{")
	s = append(s, "ExternalID: "+fmt.Sprintf("%#v", this.ExternalID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NotifyRefuseDataUploadResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&users.NotifyRefuseDataUploadResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Team) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&users.Team{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "ExternalID: "+fmt.Sprintf("%#v", this.ExternalID)+",\n")
	s = append(s, "ZuoraAccountNumber: "+fmt.Sprintf("%#v", this.ZuoraAccountNumber)+",\n")
	s = append(s, "ZuoraAccountCreatedAt: "+fmt.Sprintf("%#v", this.ZuoraAccountCreatedAt)+",\n")
	s = append(s, "TrialExpiresAt: "+fmt.Sprintf("%#v", this.TrialExpiresAt)+",\n")
	s = append(s, "TrialPendingExpiryNotifiedAt: "+fmt.Sprintf("%#v", this.TrialPendingExpiryNotifiedAt)+",\n")
	s = append(s, "TrialExpiredNotifiedAt: "+fmt.Sprintf("%#v", this.TrialExpiredNotifiedAt)+",\n")
	s = append(s, "CreatedAt: "+fmt.Sprintf("%#v", this.CreatedAt)+",\n")
	s = append(s, "DeletedAt: "+fmt.Sprintf("%#v", this.DeletedAt)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Empty) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&users.Empty{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Summary) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&users.Summary{")
	if this.Entries != nil {
		s = append(s, "Entries: "+fmt.Sprintf("%#v", this.Entries)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SummaryEntry) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 26)
	s = append(s, "&users.SummaryEntry{")
	s = append(s, "TeamExternalID: "+fmt.Sprintf("%#v", this.TeamExternalID)+",\n")
	s = append(s, "TeamName: "+fmt.Sprintf("%#v", this.TeamName)+",\n")
	s = append(s, "OrgID: "+fmt.Sprintf("%#v", this.OrgID)+",\n")
	s = append(s, "OrgExternalID: "+fmt.Sprintf("%#v", this.OrgExternalID)+",\n")
	s = append(s, "OrgName: "+fmt.Sprintf("%#v", this.OrgName)+",\n")
	s = append(s, "Emails: "+fmt.Sprintf("%#v", this.Emails)+",\n")
	s = append(s, "OrgCreatedAt: "+fmt.Sprintf("%#v", this.OrgCreatedAt)+",\n")
	s = append(s, "FirstSeenConnectedAt: "+fmt.Sprintf("%#v", this.FirstSeenConnectedAt)+",\n")
	s = append(s, "Platform: "+fmt.Sprintf("%#v", this.Platform)+",\n")
	s = append(s, "Environment: "+fmt.Sprintf("%#v", this.Environment)+",\n")
	s = append(s, "TrialExpiresAt: "+fmt.Sprintf("%#v", this.TrialExpiresAt)+",\n")
	s = append(s, "TrialPendingExpiryNotifiedAt: "+fmt.Sprintf("%#v", this.TrialPendingExpiryNotifiedAt)+",\n")
	s = append(s, "TrialExpiredNotifiedAt: "+fmt.Sprintf("%#v", this.TrialExpiredNotifiedAt)+",\n")
	s = append(s, "BillingEnabled: "+fmt.Sprintf("%#v", this.BillingEnabled)+",\n")
	s = append(s, "RefuseDataAccess: "+fmt.Sprintf("%#v", this.RefuseDataAccess)+",\n")
	s = append(s, "RefuseDataUpload: "+fmt.Sprintf("%#v", this.RefuseDataUpload)+",\n")
	s = append(s, "ZuoraAccountNumber: "+fmt.Sprintf("%#v", this.ZuoraAccountNumber)+",\n")
	s = append(s, "ZuoraAccountCreatedAt: "+fmt.Sprintf("%#v", this.ZuoraAccountCreatedAt)+",\n")
	s = append(s, "GCPAccountExternalID: "+fmt.Sprintf("%#v", this.GCPAccountExternalID)+",\n")
	s = append(s, "GCPAccountCreatedAt: "+fmt.Sprintf("%#v", this.GCPAccountCreatedAt)+",\n")
	s = append(s, "GCPAccountSubscriptionLevel: "+fmt.Sprintf("%#v", this.GCPAccountSubscriptionLevel)+",\n")
	s = append(s, "GCPAccountSubscriptionStatus: "+fmt.Sprintf("%#v", this.GCPAccountSubscriptionStatus)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Webhook) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&users.Webhook{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "OrganizationID: "+fmt.Sprintf("%#v", this.OrganizationID)+",\n")
	s = append(s, "IntegrationType: "+fmt.Sprintf("%#v", this.IntegrationType)+",\n")
	s = append(s, "SecretID: "+fmt.Sprintf("%#v", this.SecretID)+",\n")
	s = append(s, "SecretSigningKey: "+fmt.Sprintf("%#v", this.SecretSigningKey)+",\n")
	s = append(s, "CreatedAt: "+fmt.Sprintf("%#v", this.CreatedAt)+",\n")
	s = append(s, "DeletedAt: "+fmt.Sprintf("%#v", this.DeletedAt)+",\n")
	s = append(s, "FirstSeenAt: "+fmt.Sprintf("%#v", this.FirstSeenAt)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LookupOrganizationWebhookUsingSecretIDRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&users.LookupOrganizationWebhookUsingSecretIDRequest{")
	s = append(s, "SecretID: "+fmt.Sprintf("%#v", this.SecretID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LookupOrganizationWebhookUsingSecretIDResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&users.LookupOrganizationWebhookUsingSecretIDResponse{")
	if this.Webhook != nil {
		s = append(s, "Webhook: "+fmt.Sprintf("%#v", this.Webhook)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SetOrganizationWebhookFirstSeenAtRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&users.SetOrganizationWebhookFirstSeenAtRequest{")
	s = append(s, "SecretID: "+fmt.Sprintf("%#v", this.SecretID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SetOrganizationWebhookFirstSeenAtResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&users.SetOrganizationWebhookFirstSeenAtResponse{")
	s = append(s, "FirstSeenAt: "+fmt.Sprintf("%#v", this.FirstSeenAt)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *InformOrganizationBillingConfiguredRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&users.InformOrganizationBillingConfiguredRequest{")
	s = append(s, "ExternalID: "+fmt.Sprintf("%#v", this.ExternalID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Permission) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&users.Permission{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Role) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&users.Role{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequireTeamMemberPermissionToRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&users.RequireTeamMemberPermissionToRequest{")
	s = append(s, "UserID: "+fmt.Sprintf("%#v", this.UserID)+",\n")
	if this.TeamID != nil {
		s = append(s, "TeamID: "+fmt.Sprintf("%#v", this.TeamID)+",\n")
	}
	s = append(s, "PermissionID: "+fmt.Sprintf("%#v", this.PermissionID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequireTeamMemberPermissionToRequest_TeamExternalID) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&users.RequireTeamMemberPermissionToRequest_TeamExternalID{` +
		`TeamExternalID:` + fmt.Sprintf("%#v", this.TeamExternalID) + `}`}, ", ")
	return s
}
func (this *RequireTeamMemberPermissionToRequest_TeamInternalID) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&users.RequireTeamMemberPermissionToRequest_TeamInternalID{` +
		`TeamInternalID:` + fmt.Sprintf("%#v", this.TeamInternalID) + `}`}, ", ")
	return s
}
func (this *RequireOrgMemberPermissionToRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&users.RequireOrgMemberPermissionToRequest{")
	s = append(s, "UserID: "+fmt.Sprintf("%#v", this.UserID)+",\n")
	if this.OrgID != nil {
		s = append(s, "OrgID: "+fmt.Sprintf("%#v", this.OrgID)+",\n")
	}
	s = append(s, "PermissionID: "+fmt.Sprintf("%#v", this.PermissionID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequireOrgMemberPermissionToRequest_OrgExternalID) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&users.RequireOrgMemberPermissionToRequest_OrgExternalID{` +
		`OrgExternalID:` + fmt.Sprintf("%#v", this.OrgExternalID) + `}`}, ", ")
	return s
}
func (this *RequireOrgMemberPermissionToRequest_OrgInternalID) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&users.RequireOrgMemberPermissionToRequest_OrgInternalID{` +
		`OrgInternalID:` + fmt.Sprintf("%#v", this.OrgInternalID) + `}`}, ", ")
	return s
}
func valueToGoStringUsers(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// UsersClient is the client API for Users service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UsersClient interface {
	// LookupOrg authenticates & authorizes a cookie for access to an org by extenal ID.
	LookupOrg(ctx context.Context, in *LookupOrgRequest, opts ...grpc.CallOption) (*LookupOrgResponse, error)
	// LookupUsingToken authenticates & authorizes a token for access to an org.
	LookupUsingToken(ctx context.Context, in *LookupUsingTokenRequest, opts ...grpc.CallOption) (*LookupUsingTokenResponse, error)
	// LookupAdmin authenticates & authorizes a cookie for admin access.
	LookupAdmin(ctx context.Context, in *LookupAdminRequest, opts ...grpc.CallOption) (*LookupAdminResponse, error)
	// LookupUser authenticates a cookie.
	LookupUser(ctx context.Context, in *LookupUserRequest, opts ...grpc.CallOption) (*LookupUserResponse, error)
	// GetOrganizations returns a list of all organizations by default. See
	// GetOrganizationsRequest for more details.
	GetOrganizations(ctx context.Context, in *GetOrganizationsRequest, opts ...grpc.CallOption) (*GetOrganizationsResponse, error)
	// GetBillableOrganizations returns all of the organizations that are past
	// their trial period and have billing enabled. Currently knows nothing
	// about payment status, so will include organizations that are well past
	// their trial period but haven't provided credit card details.
	GetBillableOrganizations(ctx context.Context, in *GetBillableOrganizationsRequest, opts ...grpc.CallOption) (*GetBillableOrganizationsResponse, error)
	// GetTrialOrganizations returns all organizations that are currently in their
	// trial period.
	GetTrialOrganizations(ctx context.Context, in *GetTrialOrganizationsRequest, opts ...grpc.CallOption) (*GetTrialOrganizationsResponse, error)
	// GetDelinquentOrganizations returns all organizations that are beyond their
	// trial period and haven't yet supplied any payment method. We determine this
	// by means of having a Zuora account.
	GetDelinquentOrganizations(ctx context.Context, in *GetDelinquentOrganizationsRequest, opts ...grpc.CallOption) (*GetDelinquentOrganizationsResponse, error)
	GetOrganization(ctx context.Context, in *GetOrganizationRequest, opts ...grpc.CallOption) (*GetOrganizationResponse, error)
	SetOrganizationFlag(ctx context.Context, in *SetOrganizationFlagRequest, opts ...grpc.CallOption) (*SetOrganizationFlagResponse, error)
	// SetOrganizationZuoraAccount updates zuora account information. It should only
	// be called when changed which denotes that an account has been created. If you
	// omit `ZuoraAccountCreatedAt` it will be automatically updated to now.
	SetOrganizationZuoraAccount(ctx context.Context, in *SetOrganizationZuoraAccountRequest, opts ...grpc.CallOption) (*SetOrganizationZuoraAccountResponse, error)
	// GetGCP returns the Google Cloud Platform entry.
	GetGCP(ctx context.Context, in *GetGCPRequest, opts ...grpc.CallOption) (*GetGCPResponse, error)
	// UpdateGCP updates the Google Cloud Platform entry.
	UpdateGCP(ctx context.Context, in *UpdateGCPRequest, opts ...grpc.CallOption) (*UpdateGCPResponse, error)
	// GetUser returns details for a user
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
	// GetOrganizationsReadyForWeeklyReport lists all the organizations that need weekly report updates sent out.
	GetOrganizationsReadyForWeeklyReport(ctx context.Context, in *GetOrganizationsReadyForWeeklyReportRequest, opts ...grpc.CallOption) (*GetOrganizationsReadyForWeeklyReportResponse, error)
	// SendOutWeeklyReport sends weekly report emails to all the users of the organization.
	SendOutWeeklyReport(ctx context.Context, in *SendOutWeeklyReportRequest, opts ...grpc.CallOption) (*SendOutWeeklyReportResponse, error)
	// NotifyTrialPendingExpiry sends a "Trial expiring soon" notification
	// to this user and records the date sent.
	NotifyTrialPendingExpiry(ctx context.Context, in *NotifyTrialPendingExpiryRequest, opts ...grpc.CallOption) (*NotifyTrialPendingExpiryResponse, error)
	// NotifyTrialExpired sends a "Trial expired" notification to this user
	// and records the date sent.
	NotifyTrialExpired(ctx context.Context, in *NotifyTrialExpiredRequest, opts ...grpc.CallOption) (*NotifyTrialExpiredResponse, error)
	// NotifyRefuseDataUpload sends a "data upload blocked" notification to the members
	// of this organization.
	NotifyRefuseDataUpload(ctx context.Context, in *NotifyRefuseDataUploadRequest, opts ...grpc.CallOption) (*NotifyRefuseDataUploadResponse, error)
	// GetSummary exports a summary of the DB.
	// WARNING: this is a relatively expensive query, and basically exports the entire DB.
	GetSummary(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Summary, error)
	// LookupOrganizationWebhookUsingSecretID returns a Webhook given the external org ID and the webhook secret ID
	LookupOrganizationWebhookUsingSecretID(ctx context.Context, in *LookupOrganizationWebhookUsingSecretIDRequest, opts ...grpc.CallOption) (*LookupOrganizationWebhookUsingSecretIDResponse, error)
	// SetOrganizationWebhookFirstSeenAt sets the FirstSeenAt field on the webhook to the current time
	SetOrganizationWebhookFirstSeenAt(ctx context.Context, in *SetOrganizationWebhookFirstSeenAtRequest, opts ...grpc.CallOption) (*SetOrganizationWebhookFirstSeenAtResponse, error)
	// InformOrganizationBillingConfigured informs external integrations that a user has begun a paid subscription for an organization
	InformOrganizationBillingConfigured(ctx context.Context, in *InformOrganizationBillingConfiguredRequest, opts ...grpc.CallOption) (*Empty, error)
	// RequireTeamMemberPermissionTo requires team member permission for a specific action (and returns an error if denied).
	RequireTeamMemberPermissionTo(ctx context.Context, in *RequireTeamMemberPermissionToRequest, opts ...grpc.CallOption) (*Empty, error)
	// RequireOrgMemberPermissionTo requires instance member permission for a specific action (and returns an error if denied).
	RequireOrgMemberPermissionTo(ctx context.Context, in *RequireOrgMemberPermissionToRequest, opts ...grpc.CallOption) (*Empty, error)
}

type usersClient struct {
	cc *grpc.ClientConn
}

func NewUsersClient(cc *grpc.ClientConn) UsersClient {
	return &usersClient{cc}
}

func (c *usersClient) LookupOrg(ctx context.Context, in *LookupOrgRequest, opts ...grpc.CallOption) (*LookupOrgResponse, error) {
	out := new(LookupOrgResponse)
	err := c.cc.Invoke(ctx, "/users.Users/LookupOrg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) LookupUsingToken(ctx context.Context, in *LookupUsingTokenRequest, opts ...grpc.CallOption) (*LookupUsingTokenResponse, error) {
	out := new(LookupUsingTokenResponse)
	err := c.cc.Invoke(ctx, "/users.Users/LookupUsingToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) LookupAdmin(ctx context.Context, in *LookupAdminRequest, opts ...grpc.CallOption) (*LookupAdminResponse, error) {
	out := new(LookupAdminResponse)
	err := c.cc.Invoke(ctx, "/users.Users/LookupAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) LookupUser(ctx context.Context, in *LookupUserRequest, opts ...grpc.CallOption) (*LookupUserResponse, error) {
	out := new(LookupUserResponse)
	err := c.cc.Invoke(ctx, "/users.Users/LookupUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) GetOrganizations(ctx context.Context, in *GetOrganizationsRequest, opts ...grpc.CallOption) (*GetOrganizationsResponse, error) {
	out := new(GetOrganizationsResponse)
	err := c.cc.Invoke(ctx, "/users.Users/GetOrganizations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) GetBillableOrganizations(ctx context.Context, in *GetBillableOrganizationsRequest, opts ...grpc.CallOption) (*GetBillableOrganizationsResponse, error) {
	out := new(GetBillableOrganizationsResponse)
	err := c.cc.Invoke(ctx, "/users.Users/GetBillableOrganizations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) GetTrialOrganizations(ctx context.Context, in *GetTrialOrganizationsRequest, opts ...grpc.CallOption) (*GetTrialOrganizationsResponse, error) {
	out := new(GetTrialOrganizationsResponse)
	err := c.cc.Invoke(ctx, "/users.Users/GetTrialOrganizations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) GetDelinquentOrganizations(ctx context.Context, in *GetDelinquentOrganizationsRequest, opts ...grpc.CallOption) (*GetDelinquentOrganizationsResponse, error) {
	out := new(GetDelinquentOrganizationsResponse)
	err := c.cc.Invoke(ctx, "/users.Users/GetDelinquentOrganizations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) GetOrganization(ctx context.Context, in *GetOrganizationRequest, opts ...grpc.CallOption) (*GetOrganizationResponse, error) {
	out := new(GetOrganizationResponse)
	err := c.cc.Invoke(ctx, "/users.Users/GetOrganization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) SetOrganizationFlag(ctx context.Context, in *SetOrganizationFlagRequest, opts ...grpc.CallOption) (*SetOrganizationFlagResponse, error) {
	out := new(SetOrganizationFlagResponse)
	err := c.cc.Invoke(ctx, "/users.Users/SetOrganizationFlag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) SetOrganizationZuoraAccount(ctx context.Context, in *SetOrganizationZuoraAccountRequest, opts ...grpc.CallOption) (*SetOrganizationZuoraAccountResponse, error) {
	out := new(SetOrganizationZuoraAccountResponse)
	err := c.cc.Invoke(ctx, "/users.Users/SetOrganizationZuoraAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) GetGCP(ctx context.Context, in *GetGCPRequest, opts ...grpc.CallOption) (*GetGCPResponse, error) {
	out := new(GetGCPResponse)
	err := c.cc.Invoke(ctx, "/users.Users/GetGCP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) UpdateGCP(ctx context.Context, in *UpdateGCPRequest, opts ...grpc.CallOption) (*UpdateGCPResponse, error) {
	out := new(UpdateGCPResponse)
	err := c.cc.Invoke(ctx, "/users.Users/UpdateGCP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	out := new(GetUserResponse)
	err := c.cc.Invoke(ctx, "/users.Users/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) GetOrganizationsReadyForWeeklyReport(ctx context.Context, in *GetOrganizationsReadyForWeeklyReportRequest, opts ...grpc.CallOption) (*GetOrganizationsReadyForWeeklyReportResponse, error) {
	out := new(GetOrganizationsReadyForWeeklyReportResponse)
	err := c.cc.Invoke(ctx, "/users.Users/GetOrganizationsReadyForWeeklyReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) SendOutWeeklyReport(ctx context.Context, in *SendOutWeeklyReportRequest, opts ...grpc.CallOption) (*SendOutWeeklyReportResponse, error) {
	out := new(SendOutWeeklyReportResponse)
	err := c.cc.Invoke(ctx, "/users.Users/SendOutWeeklyReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) NotifyTrialPendingExpiry(ctx context.Context, in *NotifyTrialPendingExpiryRequest, opts ...grpc.CallOption) (*NotifyTrialPendingExpiryResponse, error) {
	out := new(NotifyTrialPendingExpiryResponse)
	err := c.cc.Invoke(ctx, "/users.Users/NotifyTrialPendingExpiry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) NotifyTrialExpired(ctx context.Context, in *NotifyTrialExpiredRequest, opts ...grpc.CallOption) (*NotifyTrialExpiredResponse, error) {
	out := new(NotifyTrialExpiredResponse)
	err := c.cc.Invoke(ctx, "/users.Users/NotifyTrialExpired", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) NotifyRefuseDataUpload(ctx context.Context, in *NotifyRefuseDataUploadRequest, opts ...grpc.CallOption) (*NotifyRefuseDataUploadResponse, error) {
	out := new(NotifyRefuseDataUploadResponse)
	err := c.cc.Invoke(ctx, "/users.Users/NotifyRefuseDataUpload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) GetSummary(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Summary, error) {
	out := new(Summary)
	err := c.cc.Invoke(ctx, "/users.Users/GetSummary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) LookupOrganizationWebhookUsingSecretID(ctx context.Context, in *LookupOrganizationWebhookUsingSecretIDRequest, opts ...grpc.CallOption) (*LookupOrganizationWebhookUsingSecretIDResponse, error) {
	out := new(LookupOrganizationWebhookUsingSecretIDResponse)
	err := c.cc.Invoke(ctx, "/users.Users/LookupOrganizationWebhookUsingSecretID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) SetOrganizationWebhookFirstSeenAt(ctx context.Context, in *SetOrganizationWebhookFirstSeenAtRequest, opts ...grpc.CallOption) (*SetOrganizationWebhookFirstSeenAtResponse, error) {
	out := new(SetOrganizationWebhookFirstSeenAtResponse)
	err := c.cc.Invoke(ctx, "/users.Users/SetOrganizationWebhookFirstSeenAt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) InformOrganizationBillingConfigured(ctx context.Context, in *InformOrganizationBillingConfiguredRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/users.Users/InformOrganizationBillingConfigured", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) RequireTeamMemberPermissionTo(ctx context.Context, in *RequireTeamMemberPermissionToRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/users.Users/RequireTeamMemberPermissionTo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) RequireOrgMemberPermissionTo(ctx context.Context, in *RequireOrgMemberPermissionToRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/users.Users/RequireOrgMemberPermissionTo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UsersServer is the server API for Users service.
type UsersServer interface {
	// LookupOrg authenticates & authorizes a cookie for access to an org by extenal ID.
	LookupOrg(context.Context, *LookupOrgRequest) (*LookupOrgResponse, error)
	// LookupUsingToken authenticates & authorizes a token for access to an org.
	LookupUsingToken(context.Context, *LookupUsingTokenRequest) (*LookupUsingTokenResponse, error)
	// LookupAdmin authenticates & authorizes a cookie for admin access.
	LookupAdmin(context.Context, *LookupAdminRequest) (*LookupAdminResponse, error)
	// LookupUser authenticates a cookie.
	LookupUser(context.Context, *LookupUserRequest) (*LookupUserResponse, error)
	// GetOrganizations returns a list of all organizations by default. See
	// GetOrganizationsRequest for more details.
	GetOrganizations(context.Context, *GetOrganizationsRequest) (*GetOrganizationsResponse, error)
	// GetBillableOrganizations returns all of the organizations that are past
	// their trial period and have billing enabled. Currently knows nothing
	// about payment status, so will include organizations that are well past
	// their trial period but haven't provided credit card details.
	GetBillableOrganizations(context.Context, *GetBillableOrganizationsRequest) (*GetBillableOrganizationsResponse, error)
	// GetTrialOrganizations returns all organizations that are currently in their
	// trial period.
	GetTrialOrganizations(context.Context, *GetTrialOrganizationsRequest) (*GetTrialOrganizationsResponse, error)
	// GetDelinquentOrganizations returns all organizations that are beyond their
	// trial period and haven't yet supplied any payment method. We determine this
	// by means of having a Zuora account.
	GetDelinquentOrganizations(context.Context, *GetDelinquentOrganizationsRequest) (*GetDelinquentOrganizationsResponse, error)
	GetOrganization(context.Context, *GetOrganizationRequest) (*GetOrganizationResponse, error)
	SetOrganizationFlag(context.Context, *SetOrganizationFlagRequest) (*SetOrganizationFlagResponse, error)
	// SetOrganizationZuoraAccount updates zuora account information. It should only
	// be called when changed which denotes that an account has been created. If you
	// omit `ZuoraAccountCreatedAt` it will be automatically updated to now.
	SetOrganizationZuoraAccount(context.Context, *SetOrganizationZuoraAccountRequest) (*SetOrganizationZuoraAccountResponse, error)
	// GetGCP returns the Google Cloud Platform entry.
	GetGCP(context.Context, *GetGCPRequest) (*GetGCPResponse, error)
	// UpdateGCP updates the Google Cloud Platform entry.
	UpdateGCP(context.Context, *UpdateGCPRequest) (*UpdateGCPResponse, error)
	// GetUser returns details for a user
	GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error)
	// GetOrganizationsReadyForWeeklyReport lists all the organizations that need weekly report updates sent out.
	GetOrganizationsReadyForWeeklyReport(context.Context, *GetOrganizationsReadyForWeeklyReportRequest) (*GetOrganizationsReadyForWeeklyReportResponse, error)
	// SendOutWeeklyReport sends weekly report emails to all the users of the organization.
	SendOutWeeklyReport(context.Context, *SendOutWeeklyReportRequest) (*SendOutWeeklyReportResponse, error)
	// NotifyTrialPendingExpiry sends a "Trial expiring soon" notification
	// to this user and records the date sent.
	NotifyTrialPendingExpiry(context.Context, *NotifyTrialPendingExpiryRequest) (*NotifyTrialPendingExpiryResponse, error)
	// NotifyTrialExpired sends a "Trial expired" notification to this user
	// and records the date sent.
	NotifyTrialExpired(context.Context, *NotifyTrialExpiredRequest) (*NotifyTrialExpiredResponse, error)
	// NotifyRefuseDataUpload sends a "data upload blocked" notification to the members
	// of this organization.
	NotifyRefuseDataUpload(context.Context, *NotifyRefuseDataUploadRequest) (*NotifyRefuseDataUploadResponse, error)
	// GetSummary exports a summary of the DB.
	// WARNING: this is a relatively expensive query, and basically exports the entire DB.
	GetSummary(context.Context, *Empty) (*Summary, error)
	// LookupOrganizationWebhookUsingSecretID returns a Webhook given the external org ID and the webhook secret ID
	LookupOrganizationWebhookUsingSecretID(context.Context, *LookupOrganizationWebhookUsingSecretIDRequest) (*LookupOrganizationWebhookUsingSecretIDResponse, error)
	// SetOrganizationWebhookFirstSeenAt sets the FirstSeenAt field on the webhook to the current time
	SetOrganizationWebhookFirstSeenAt(context.Context, *SetOrganizationWebhookFirstSeenAtRequest) (*SetOrganizationWebhookFirstSeenAtResponse, error)
	// InformOrganizationBillingConfigured informs external integrations that a user has begun a paid subscription for an organization
	InformOrganizationBillingConfigured(context.Context, *InformOrganizationBillingConfiguredRequest) (*Empty, error)
	// RequireTeamMemberPermissionTo requires team member permission for a specific action (and returns an error if denied).
	RequireTeamMemberPermissionTo(context.Context, *RequireTeamMemberPermissionToRequest) (*Empty, error)
	// RequireOrgMemberPermissionTo requires instance member permission for a specific action (and returns an error if denied).
	RequireOrgMemberPermissionTo(context.Context, *RequireOrgMemberPermissionToRequest) (*Empty, error)
}

// UnimplementedUsersServer can be embedded to have forward compatible implementations.
type UnimplementedUsersServer struct {
}

func (*UnimplementedUsersServer) LookupOrg(ctx context.Context, req *LookupOrgRequest) (*LookupOrgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LookupOrg not implemented")
}
func (*UnimplementedUsersServer) LookupUsingToken(ctx context.Context, req *LookupUsingTokenRequest) (*LookupUsingTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LookupUsingToken not implemented")
}
func (*UnimplementedUsersServer) LookupAdmin(ctx context.Context, req *LookupAdminRequest) (*LookupAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LookupAdmin not implemented")
}
func (*UnimplementedUsersServer) LookupUser(ctx context.Context, req *LookupUserRequest) (*LookupUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LookupUser not implemented")
}
func (*UnimplementedUsersServer) GetOrganizations(ctx context.Context, req *GetOrganizationsRequest) (*GetOrganizationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizations not implemented")
}
func (*UnimplementedUsersServer) GetBillableOrganizations(ctx context.Context, req *GetBillableOrganizationsRequest) (*GetBillableOrganizationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBillableOrganizations not implemented")
}
func (*UnimplementedUsersServer) GetTrialOrganizations(ctx context.Context, req *GetTrialOrganizationsRequest) (*GetTrialOrganizationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrialOrganizations not implemented")
}
func (*UnimplementedUsersServer) GetDelinquentOrganizations(ctx context.Context, req *GetDelinquentOrganizationsRequest) (*GetDelinquentOrganizationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDelinquentOrganizations not implemented")
}
func (*UnimplementedUsersServer) GetOrganization(ctx context.Context, req *GetOrganizationRequest) (*GetOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganization not implemented")
}
func (*UnimplementedUsersServer) SetOrganizationFlag(ctx context.Context, req *SetOrganizationFlagRequest) (*SetOrganizationFlagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetOrganizationFlag not implemented")
}
func (*UnimplementedUsersServer) SetOrganizationZuoraAccount(ctx context.Context, req *SetOrganizationZuoraAccountRequest) (*SetOrganizationZuoraAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetOrganizationZuoraAccount not implemented")
}
func (*UnimplementedUsersServer) GetGCP(ctx context.Context, req *GetGCPRequest) (*GetGCPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGCP not implemented")
}
func (*UnimplementedUsersServer) UpdateGCP(ctx context.Context, req *UpdateGCPRequest) (*UpdateGCPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGCP not implemented")
}
func (*UnimplementedUsersServer) GetUser(ctx context.Context, req *GetUserRequest) (*GetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (*UnimplementedUsersServer) GetOrganizationsReadyForWeeklyReport(ctx context.Context, req *GetOrganizationsReadyForWeeklyReportRequest) (*GetOrganizationsReadyForWeeklyReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationsReadyForWeeklyReport not implemented")
}
func (*UnimplementedUsersServer) SendOutWeeklyReport(ctx context.Context, req *SendOutWeeklyReportRequest) (*SendOutWeeklyReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendOutWeeklyReport not implemented")
}
func (*UnimplementedUsersServer) NotifyTrialPendingExpiry(ctx context.Context, req *NotifyTrialPendingExpiryRequest) (*NotifyTrialPendingExpiryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyTrialPendingExpiry not implemented")
}
func (*UnimplementedUsersServer) NotifyTrialExpired(ctx context.Context, req *NotifyTrialExpiredRequest) (*NotifyTrialExpiredResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyTrialExpired not implemented")
}
func (*UnimplementedUsersServer) NotifyRefuseDataUpload(ctx context.Context, req *NotifyRefuseDataUploadRequest) (*NotifyRefuseDataUploadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyRefuseDataUpload not implemented")
}
func (*UnimplementedUsersServer) GetSummary(ctx context.Context, req *Empty) (*Summary, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSummary not implemented")
}
func (*UnimplementedUsersServer) LookupOrganizationWebhookUsingSecretID(ctx context.Context, req *LookupOrganizationWebhookUsingSecretIDRequest) (*LookupOrganizationWebhookUsingSecretIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LookupOrganizationWebhookUsingSecretID not implemented")
}
func (*UnimplementedUsersServer) SetOrganizationWebhookFirstSeenAt(ctx context.Context, req *SetOrganizationWebhookFirstSeenAtRequest) (*SetOrganizationWebhookFirstSeenAtResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetOrganizationWebhookFirstSeenAt not implemented")
}
func (*UnimplementedUsersServer) InformOrganizationBillingConfigured(ctx context.Context, req *InformOrganizationBillingConfiguredRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InformOrganizationBillingConfigured not implemented")
}
func (*UnimplementedUsersServer) RequireTeamMemberPermissionTo(ctx context.Context, req *RequireTeamMemberPermissionToRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequireTeamMemberPermissionTo not implemented")
}
func (*UnimplementedUsersServer) RequireOrgMemberPermissionTo(ctx context.Context, req *RequireOrgMemberPermissionToRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequireOrgMemberPermissionTo not implemented")
}

func RegisterUsersServer(s *grpc.Server, srv UsersServer) {
	s.RegisterService(&_Users_serviceDesc, srv)
}

func _Users_LookupOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupOrgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).LookupOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.Users/LookupOrg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).LookupOrg(ctx, req.(*LookupOrgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_LookupUsingToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupUsingTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).LookupUsingToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.Users/LookupUsingToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).LookupUsingToken(ctx, req.(*LookupUsingTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_LookupAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).LookupAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.Users/LookupAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).LookupAdmin(ctx, req.(*LookupAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_LookupUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).LookupUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.Users/LookupUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).LookupUser(ctx, req.(*LookupUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_GetOrganizations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).GetOrganizations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.Users/GetOrganizations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).GetOrganizations(ctx, req.(*GetOrganizationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_GetBillableOrganizations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBillableOrganizationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).GetBillableOrganizations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.Users/GetBillableOrganizations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).GetBillableOrganizations(ctx, req.(*GetBillableOrganizationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_GetTrialOrganizations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTrialOrganizationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).GetTrialOrganizations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.Users/GetTrialOrganizations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).GetTrialOrganizations(ctx, req.(*GetTrialOrganizationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_GetDelinquentOrganizations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDelinquentOrganizationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).GetDelinquentOrganizations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.Users/GetDelinquentOrganizations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).GetDelinquentOrganizations(ctx, req.(*GetDelinquentOrganizationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_GetOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).GetOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.Users/GetOrganization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).GetOrganization(ctx, req.(*GetOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_SetOrganizationFlag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetOrganizationFlagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).SetOrganizationFlag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.Users/SetOrganizationFlag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).SetOrganizationFlag(ctx, req.(*SetOrganizationFlagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_SetOrganizationZuoraAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetOrganizationZuoraAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).SetOrganizationZuoraAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.Users/SetOrganizationZuoraAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).SetOrganizationZuoraAccount(ctx, req.(*SetOrganizationZuoraAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_GetGCP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGCPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).GetGCP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.Users/GetGCP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).GetGCP(ctx, req.(*GetGCPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_UpdateGCP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGCPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).UpdateGCP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.Users/UpdateGCP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).UpdateGCP(ctx, req.(*UpdateGCPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.Users/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_GetOrganizationsReadyForWeeklyReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationsReadyForWeeklyReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).GetOrganizationsReadyForWeeklyReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.Users/GetOrganizationsReadyForWeeklyReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).GetOrganizationsReadyForWeeklyReport(ctx, req.(*GetOrganizationsReadyForWeeklyReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_SendOutWeeklyReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendOutWeeklyReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).SendOutWeeklyReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.Users/SendOutWeeklyReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).SendOutWeeklyReport(ctx, req.(*SendOutWeeklyReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_NotifyTrialPendingExpiry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotifyTrialPendingExpiryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).NotifyTrialPendingExpiry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.Users/NotifyTrialPendingExpiry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).NotifyTrialPendingExpiry(ctx, req.(*NotifyTrialPendingExpiryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_NotifyTrialExpired_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotifyTrialExpiredRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).NotifyTrialExpired(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.Users/NotifyTrialExpired",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).NotifyTrialExpired(ctx, req.(*NotifyTrialExpiredRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_NotifyRefuseDataUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotifyRefuseDataUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).NotifyRefuseDataUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.Users/NotifyRefuseDataUpload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).NotifyRefuseDataUpload(ctx, req.(*NotifyRefuseDataUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_GetSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).GetSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.Users/GetSummary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).GetSummary(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_LookupOrganizationWebhookUsingSecretID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupOrganizationWebhookUsingSecretIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).LookupOrganizationWebhookUsingSecretID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.Users/LookupOrganizationWebhookUsingSecretID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).LookupOrganizationWebhookUsingSecretID(ctx, req.(*LookupOrganizationWebhookUsingSecretIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_SetOrganizationWebhookFirstSeenAt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetOrganizationWebhookFirstSeenAtRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).SetOrganizationWebhookFirstSeenAt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.Users/SetOrganizationWebhookFirstSeenAt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).SetOrganizationWebhookFirstSeenAt(ctx, req.(*SetOrganizationWebhookFirstSeenAtRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_InformOrganizationBillingConfigured_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InformOrganizationBillingConfiguredRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).InformOrganizationBillingConfigured(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.Users/InformOrganizationBillingConfigured",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).InformOrganizationBillingConfigured(ctx, req.(*InformOrganizationBillingConfiguredRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_RequireTeamMemberPermissionTo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequireTeamMemberPermissionToRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).RequireTeamMemberPermissionTo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.Users/RequireTeamMemberPermissionTo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).RequireTeamMemberPermissionTo(ctx, req.(*RequireTeamMemberPermissionToRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_RequireOrgMemberPermissionTo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequireOrgMemberPermissionToRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).RequireOrgMemberPermissionTo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.Users/RequireOrgMemberPermissionTo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).RequireOrgMemberPermissionTo(ctx, req.(*RequireOrgMemberPermissionToRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Users_serviceDesc = grpc.ServiceDesc{
	ServiceName: "users.Users",
	HandlerType: (*UsersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LookupOrg",
			Handler:    _Users_LookupOrg_Handler,
		},
		{
			MethodName: "LookupUsingToken",
			Handler:    _Users_LookupUsingToken_Handler,
		},
		{
			MethodName: "LookupAdmin",
			Handler:    _Users_LookupAdmin_Handler,
		},
		{
			MethodName: "LookupUser",
			Handler:    _Users_LookupUser_Handler,
		},
		{
			MethodName: "GetOrganizations",
			Handler:    _Users_GetOrganizations_Handler,
		},
		{
			MethodName: "GetBillableOrganizations",
			Handler:    _Users_GetBillableOrganizations_Handler,
		},
		{
			MethodName: "GetTrialOrganizations",
			Handler:    _Users_GetTrialOrganizations_Handler,
		},
		{
			MethodName: "GetDelinquentOrganizations",
			Handler:    _Users_GetDelinquentOrganizations_Handler,
		},
		{
			MethodName: "GetOrganization",
			Handler:    _Users_GetOrganization_Handler,
		},
		{
			MethodName: "SetOrganizationFlag",
			Handler:    _Users_SetOrganizationFlag_Handler,
		},
		{
			MethodName: "SetOrganizationZuoraAccount",
			Handler:    _Users_SetOrganizationZuoraAccount_Handler,
		},
		{
			MethodName: "GetGCP",
			Handler:    _Users_GetGCP_Handler,
		},
		{
			MethodName: "UpdateGCP",
			Handler:    _Users_UpdateGCP_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _Users_GetUser_Handler,
		},
		{
			MethodName: "GetOrganizationsReadyForWeeklyReport",
			Handler:    _Users_GetOrganizationsReadyForWeeklyReport_Handler,
		},
		{
			MethodName: "SendOutWeeklyReport",
			Handler:    _Users_SendOutWeeklyReport_Handler,
		},
		{
			MethodName: "NotifyTrialPendingExpiry",
			Handler:    _Users_NotifyTrialPendingExpiry_Handler,
		},
		{
			MethodName: "NotifyTrialExpired",
			Handler:    _Users_NotifyTrialExpired_Handler,
		},
		{
			MethodName: "NotifyRefuseDataUpload",
			Handler:    _Users_NotifyRefuseDataUpload_Handler,
		},
		{
			MethodName: "GetSummary",
			Handler:    _Users_GetSummary_Handler,
		},
		{
			MethodName: "LookupOrganizationWebhookUsingSecretID",
			Handler:    _Users_LookupOrganizationWebhookUsingSecretID_Handler,
		},
		{
			MethodName: "SetOrganizationWebhookFirstSeenAt",
			Handler:    _Users_SetOrganizationWebhookFirstSeenAt_Handler,
		},
		{
			MethodName: "InformOrganizationBillingConfigured",
			Handler:    _Users_InformOrganizationBillingConfigured_Handler,
		},
		{
			MethodName: "RequireTeamMemberPermissionTo",
			Handler:    _Users_RequireTeamMemberPermissionTo_Handler,
		},
		{
			MethodName: "RequireOrgMemberPermissionTo",
			Handler:    _Users_RequireOrgMemberPermissionTo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "users.proto",
}

func (m *LookupOrgRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LookupOrgRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LookupOrgRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AuthorizeFor != 0 {
		i = encodeVarintUsers(dAtA, i, uint64(m.AuthorizeFor))
		i--
		dAtA[i] = 0x20
	}
	if len(m.OrgExternalID) > 0 {
		i -= len(m.OrgExternalID)
		copy(dAtA[i:], m.OrgExternalID)
		i = encodeVarintUsers(dAtA, i, uint64(len(m.OrgExternalID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Cookie) > 0 {
		i -= len(m.Cookie)
		copy(dAtA[i:], m.Cookie)
		i = encodeVarintUsers(dAtA, i, uint64(len(m.Cookie)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LookupOrgResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LookupOrgResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LookupOrgResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FeatureFlags) > 0 {
		for iNdEx := len(m.FeatureFlags) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.FeatureFlags[iNdEx])
			copy(dAtA[i:], m.FeatureFlags[iNdEx])
			i = encodeVarintUsers(dAtA, i, uint64(len(m.FeatureFlags[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.UserID) > 0 {
		i -= len(m.UserID)
		copy(dAtA[i:], m.UserID)
		i = encodeVarintUsers(dAtA, i, uint64(len(m.UserID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OrganizationID) > 0 {
		i -= len(m.OrganizationID)
		copy(dAtA[i:], m.OrganizationID)
		i = encodeVarintUsers(dAtA, i, uint64(len(m.OrganizationID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LookupUsingTokenRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LookupUsingTokenRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LookupUsingTokenRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AuthorizeFor != 0 {
		i = encodeVarintUsers(dAtA, i, uint64(m.AuthorizeFor))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintUsers(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LookupUsingTokenResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LookupUsingTokenResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LookupUsingTokenResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FeatureFlags) > 0 {
		for iNdEx := len(m.FeatureFlags) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.FeatureFlags[iNdEx])
			copy(dAtA[i:], m.FeatureFlags[iNdEx])
			i = encodeVarintUsers(dAtA, i, uint64(len(m.FeatureFlags[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.OrganizationID) > 0 {
		i -= len(m.OrganizationID)
		copy(dAtA[i:], m.OrganizationID)
		i = encodeVarintUsers(dAtA, i, uint64(len(m.OrganizationID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LookupAdminRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LookupAdminRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LookupAdminRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Cookie) > 0 {
		i -= len(m.Cookie)
		copy(dAtA[i:], m.Cookie)
		i = encodeVarintUsers(dAtA, i, uint64(len(m.Cookie)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LookupAdminResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LookupAdminResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LookupAdminResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AdminID) > 0 {
		i -= len(m.AdminID)
		copy(dAtA[i:], m.AdminID)
		i = encodeVarintUsers(dAtA, i, uint64(len(m.AdminID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LookupUserRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LookupUserRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LookupUserRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Cookie) > 0 {
		i -= len(m.Cookie)
		copy(dAtA[i:], m.Cookie)
		i = encodeVarintUsers(dAtA, i, uint64(len(m.Cookie)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LookupUserResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LookupUserResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LookupUserResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UserID) > 0 {
		i -= len(m.UserID)
		copy(dAtA[i:], m.UserID)
		i = encodeVarintUsers(dAtA, i, uint64(len(m.UserID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetOrganizationsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetOrganizationsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetOrganizationsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IncludeDeleted {
		i--
		if m.IncludeDeleted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.PageNumber != 0 {
		i = encodeVarintUsers(dAtA, i, uint64(m.PageNumber))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Query) > 0 {
		i -= len(m.Query)
		copy(dAtA[i:], m.Query)
		i = encodeVarintUsers(dAtA, i, uint64(len(m.Query)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetOrganizationsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetOrganizationsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetOrganizationsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Organizations) > 0 {
		for iNdEx := len(m.Organizations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Organizations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUsers(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetBillableOrganizationsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBillableOrganizationsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetBillableOrganizationsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Now, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.Now):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintUsers(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *GetBillableOrganizationsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBillableOrganizationsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetBillableOrganizationsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Organizations) > 0 {
		for iNdEx := len(m.Organizations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Organizations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUsers(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetTrialOrganizationsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTrialOrganizationsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTrialOrganizationsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Now, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.Now):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintUsers(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *GetTrialOrganizationsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTrialOrganizationsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTrialOrganizationsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Organizations) > 0 {
		for iNdEx := len(m.Organizations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Organizations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUsers(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetDelinquentOrganizationsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDelinquentOrganizationsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetDelinquentOrganizationsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n3, err3 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Now, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.Now):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintUsers(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *GetDelinquentOrganizationsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDelinquentOrganizationsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetDelinquentOrganizationsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Organizations) > 0 {
		for iNdEx := len(m.Organizations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Organizations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUsers(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetOrganizationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetOrganizationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetOrganizationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ID != nil {
		{
			size := m.ID.Size()
			i -= size
			if _, err := m.ID.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetOrganizationRequest_ExternalID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetOrganizationRequest_ExternalID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.ExternalID)
	copy(dAtA[i:], m.ExternalID)
	i = encodeVarintUsers(dAtA, i, uint64(len(m.ExternalID)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}
func (m *GetOrganizationRequest_GCPExternalAccountID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetOrganizationRequest_GCPExternalAccountID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.GCPExternalAccountID)
	copy(dAtA[i:], m.GCPExternalAccountID)
	i = encodeVarintUsers(dAtA, i, uint64(len(m.GCPExternalAccountID)))
	i--
	dAtA[i] = 0x12
	return len(dAtA) - i, nil
}
func (m *GetOrganizationRequest_InternalID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetOrganizationRequest_InternalID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.InternalID)
	copy(dAtA[i:], m.InternalID)
	i = encodeVarintUsers(dAtA, i, uint64(len(m.InternalID)))
	i--
	dAtA[i] = 0x1a
	return len(dAtA) - i, nil
}
func (m *GetOrganizationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetOrganizationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetOrganizationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Organization.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintUsers(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Organization) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Organization) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Organization) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DeletedBy) > 0 {
		i -= len(m.DeletedBy)
		copy(dAtA[i:], m.DeletedBy)
		i = encodeVarintUsers(dAtA, i, uint64(len(m.DeletedBy)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xea
	}
	if len(m.PlatformVersion) > 0 {
		i -= len(m.PlatformVersion)
		copy(dAtA[i:], m.PlatformVersion)
		i = encodeVarintUsers(dAtA, i, uint64(len(m.PlatformVersion)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe2
	}
	if m.LastSentWeeklyReportAt != nil {
		n5, err5 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.LastSentWeeklyReportAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.LastSentWeeklyReportAt):])
		if err5 != nil {
			return 0, err5
		}
		i -= n5
		i = encodeVarintUsers(dAtA, i, uint64(n5))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xda
	}
	if len(m.RefuseDataReason) > 0 {
		i -= len(m.RefuseDataReason)
		copy(dAtA[i:], m.RefuseDataReason)
		i = encodeVarintUsers(dAtA, i, uint64(len(m.RefuseDataReason)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd2
	}
	if m.FirstSeenScopeConnectedAt != nil {
		n6, err6 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.FirstSeenScopeConnectedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.FirstSeenScopeConnectedAt):])
		if err6 != nil {
			return 0, err6
		}
		i -= n6
		i = encodeVarintUsers(dAtA, i, uint64(n6))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xca
	}
	if m.FirstSeenPromConnectedAt != nil {
		n7, err7 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.FirstSeenPromConnectedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.FirstSeenPromConnectedAt):])
		if err7 != nil {
			return 0, err7
		}
		i -= n7
		i = encodeVarintUsers(dAtA, i, uint64(n7))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	if m.FirstSeenNetConnectedAt != nil {
		n8, err8 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.FirstSeenNetConnectedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.FirstSeenNetConnectedAt):])
		if err8 != nil {
			return 0, err8
		}
		i -= n8
		i = encodeVarintUsers(dAtA, i, uint64(n8))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	if m.FirstSeenFluxConnectedAt != nil {
		n9, err9 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.FirstSeenFluxConnectedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.FirstSeenFluxConnectedAt):])
		if err9 != nil {
			return 0, err9
		}
		i -= n9
		i = encodeVarintUsers(dAtA, i, uint64(n9))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	if m.Cleanup {
		i--
		if m.Cleanup {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	n10, err10 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.DeletedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.DeletedAt):])
	if err10 != nil {
		return 0, err10
	}
	i -= n10
	i = encodeVarintUsers(dAtA, i, uint64(n10))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xa2
	if len(m.TeamExternalID) > 0 {
		i -= len(m.TeamExternalID)
		copy(dAtA[i:], m.TeamExternalID)
		i = encodeVarintUsers(dAtA, i, uint64(len(m.TeamExternalID)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if len(m.TeamID) > 0 {
		i -= len(m.TeamID)
		copy(dAtA[i:], m.TeamID)
		i = encodeVarintUsers(dAtA, i, uint64(len(m.TeamID)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if m.GCP != nil {
		{
			size, err := m.GCP.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUsers(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if m.TrialExpiredNotifiedAt != nil {
		n12, err12 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.TrialExpiredNotifiedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.TrialExpiredNotifiedAt):])
		if err12 != nil {
			return 0, err12
		}
		i -= n12
		i = encodeVarintUsers(dAtA, i, uint64(n12))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.TrialPendingExpiryNotifiedAt != nil {
		n13, err13 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.TrialPendingExpiryNotifiedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.TrialPendingExpiryNotifiedAt):])
		if err13 != nil {
			return 0, err13
		}
		i -= n13
		i = encodeVarintUsers(dAtA, i, uint64(n13))
		i--
		dAtA[i] = 0x7a
	}
	if m.ZuoraAccountCreatedAt != nil {
		n14, err14 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.ZuoraAccountCreatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.ZuoraAccountCreatedAt):])
		if err14 != nil {
			return 0, err14
		}
		i -= n14
		i = encodeVarintUsers(dAtA, i, uint64(n14))
		i--
		dAtA[i] = 0x72
	}
	if len(m.ZuoraAccountNumber) > 0 {
		i -= len(m.ZuoraAccountNumber)
		copy(dAtA[i:], m.ZuoraAccountNumber)
		i = encodeVarintUsers(dAtA, i, uint64(len(m.ZuoraAccountNumber)))
		i--
		dAtA[i] = 0x6a
	}
	n15, err15 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.TrialExpiresAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.TrialExpiresAt):])
	if err15 != nil {
		return 0, err15
	}
	i -= n15
	i = encodeVarintUsers(dAtA, i, uint64(n15))
	i--
	dAtA[i] = 0x62
	if len(m.Environment) > 0 {
		i -= len(m.Environment)
		copy(dAtA[i:], m.Environment)
		i = encodeVarintUsers(dAtA, i, uint64(len(m.Environment)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Platform) > 0 {
		i -= len(m.Platform)
		copy(dAtA[i:], m.Platform)
		i = encodeVarintUsers(dAtA, i, uint64(len(m.Platform)))
		i--
		dAtA[i] = 0x52
	}
	if m.FirstSeenConnectedAt != nil {
		n16, err16 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.FirstSeenConnectedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.FirstSeenConnectedAt):])
		if err16 != nil {
			return 0, err16
		}
		i -= n16
		i = encodeVarintUsers(dAtA, i, uint64(n16))
		i--
		dAtA[i] = 0x4a
	}
	if m.RefuseDataUpload {
		i--
		if m.RefuseDataUpload {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.RefuseDataAccess {
		i--
		if m.RefuseDataAccess {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if len(m.FeatureFlags) > 0 {
		for iNdEx := len(m.FeatureFlags) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.FeatureFlags[iNdEx])
			copy(dAtA[i:], m.FeatureFlags[iNdEx])
			i = encodeVarintUsers(dAtA, i, uint64(len(m.FeatureFlags[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	n17, err17 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.CreatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt):])
	if err17 != nil {
		return 0, err17
	}
	i -= n17
	i = encodeVarintUsers(dAtA, i, uint64(n17))
	i--
	dAtA[i] = 0x2a
	if len(m.ProbeToken) > 0 {
		i -= len(m.ProbeToken)
		copy(dAtA[i:], m.ProbeToken)
		i = encodeVarintUsers(dAtA, i, uint64(len(m.ProbeToken)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintUsers(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ExternalID) > 0 {
		i -= len(m.ExternalID)
		copy(dAtA[i:], m.ExternalID)
		i = encodeVarintUsers(dAtA, i, uint64(len(m.ExternalID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintUsers(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GoogleCloudPlatform) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GoogleCloudPlatform) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GoogleCloudPlatform) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SubscriptionStatus) > 0 {
		i -= len(m.SubscriptionStatus)
		copy(dAtA[i:], m.SubscriptionStatus)
		i = encodeVarintUsers(dAtA, i, uint64(len(m.SubscriptionStatus)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.SubscriptionLevel) > 0 {
		i -= len(m.SubscriptionLevel)
		copy(dAtA[i:], m.SubscriptionLevel)
		i = encodeVarintUsers(dAtA, i, uint64(len(m.SubscriptionLevel)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.SubscriptionName) > 0 {
		i -= len(m.SubscriptionName)
		copy(dAtA[i:], m.SubscriptionName)
		i = encodeVarintUsers(dAtA, i, uint64(len(m.SubscriptionName)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ConsumerID) > 0 {
		i -= len(m.ConsumerID)
		copy(dAtA[i:], m.ConsumerID)
		i = encodeVarintUsers(dAtA, i, uint64(len(m.ConsumerID)))
		i--
		dAtA[i] = 0x2a
	}
	n18, err18 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.CreatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt):])
	if err18 != nil {
		return 0, err18
	}
	i -= n18
	i = encodeVarintUsers(dAtA, i, uint64(n18))
	i--
	dAtA[i] = 0x22
	if m.Activated {
		i--
		if m.Activated {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.ExternalAccountID) > 0 {
		i -= len(m.ExternalAccountID)
		copy(dAtA[i:], m.ExternalAccountID)
		i = encodeVarintUsers(dAtA, i, uint64(len(m.ExternalAccountID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintUsers(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetGCPRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetGCPRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetGCPRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExternalAccountID) > 0 {
		i -= len(m.ExternalAccountID)
		copy(dAtA[i:], m.ExternalAccountID)
		i = encodeVarintUsers(dAtA, i, uint64(len(m.ExternalAccountID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetGCPResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetGCPResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetGCPResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.GCP.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintUsers(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *UpdateGCPRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateGCPRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateGCPRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GCP != nil {
		{
			size, err := m.GCP.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUsers(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateGCPResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateGCPResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateGCPResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *SetOrganizationZuoraAccountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetOrganizationZuoraAccountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetOrganizationZuoraAccountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CreatedAt != nil {
		n21, err21 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.CreatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt):])
		if err21 != nil {
			return 0, err21
		}
		i -= n21
		i = encodeVarintUsers(dAtA, i, uint64(n21))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Number) > 0 {
		i -= len(m.Number)
		copy(dAtA[i:], m.Number)
		i = encodeVarintUsers(dAtA, i, uint64(len(m.Number)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ExternalID) > 0 {
		i -= len(m.ExternalID)
		copy(dAtA[i:], m.ExternalID)
		i = encodeVarintUsers(dAtA, i, uint64(len(m.ExternalID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SetOrganizationZuoraAccountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetOrganizationZuoraAccountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetOrganizationZuoraAccountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *SetOrganizationFlagRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetOrganizationFlagRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetOrganizationFlagRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value {
		i--
		if m.Value {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Flag) > 0 {
		i -= len(m.Flag)
		copy(dAtA[i:], m.Flag)
		i = encodeVarintUsers(dAtA, i, uint64(len(m.Flag)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ExternalID) > 0 {
		i -= len(m.ExternalID)
		copy(dAtA[i:], m.ExternalID)
		i = encodeVarintUsers(dAtA, i, uint64(len(m.ExternalID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SetOrganizationFlagResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetOrganizationFlagResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetOrganizationFlagResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetUserRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetUserRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UserID) > 0 {
		i -= len(m.UserID)
		copy(dAtA[i:], m.UserID)
		i = encodeVarintUsers(dAtA, i, uint64(len(m.UserID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetUserResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetUserResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.User.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintUsers(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *GetOrganizationsReadyForWeeklyReportRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetOrganizationsReadyForWeeklyReportRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetOrganizationsReadyForWeeklyReportRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n23, err23 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Now, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.Now):])
	if err23 != nil {
		return 0, err23
	}
	i -= n23
	i = encodeVarintUsers(dAtA, i, uint64(n23))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *GetOrganizationsReadyForWeeklyReportResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetOrganizationsReadyForWeeklyReportResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetOrganizationsReadyForWeeklyReportResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Organizations) > 0 {
		for iNdEx := len(m.Organizations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Organizations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUsers(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SendOutWeeklyReportRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SendOutWeeklyReportRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SendOutWeeklyReportRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExternalID) > 0 {
		i -= len(m.ExternalID)
		copy(dAtA[i:], m.ExternalID)
		i = encodeVarintUsers(dAtA, i, uint64(len(m.ExternalID)))
		i--
		dAtA[i] = 0x12
	}
	n24, err24 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Now, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.Now):])
	if err24 != nil {
		return 0, err24
	}
	i -= n24
	i = encodeVarintUsers(dAtA, i, uint64(n24))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *SendOutWeeklyReportResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SendOutWeeklyReportResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SendOutWeeklyReportResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *User) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LastName) > 0 {
		i -= len(m.LastName)
		copy(dAtA[i:], m.LastName)
		i = encodeVarintUsers(dAtA, i, uint64(len(m.LastName)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.FirstName) > 0 {
		i -= len(m.FirstName)
		copy(dAtA[i:], m.FirstName)
		i = encodeVarintUsers(dAtA, i, uint64(len(m.FirstName)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintUsers(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Company) > 0 {
		i -= len(m.Company)
		copy(dAtA[i:], m.Company)
		i = encodeVarintUsers(dAtA, i, uint64(len(m.Company)))
		i--
		dAtA[i] = 0x4a
	}
	n25, err25 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.LastLoginAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.LastLoginAt):])
	if err25 != nil {
		return 0, err25
	}
	i -= n25
	i = encodeVarintUsers(dAtA, i, uint64(n25))
	i--
	dAtA[i] = 0x42
	if m.Admin {
		i--
		if m.Admin {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	n26, err26 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.CreatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt):])
	if err26 != nil {
		return 0, err26
	}
	i -= n26
	i = encodeVarintUsers(dAtA, i, uint64(n26))
	i--
	dAtA[i] = 0x32
	n27, err27 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.FirstLoginAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.FirstLoginAt):])
	if err27 != nil {
		return 0, err27
	}
	i -= n27
	i = encodeVarintUsers(dAtA, i, uint64(n27))
	i--
	dAtA[i] = 0x2a
	n28, err28 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.TokenCreatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.TokenCreatedAt):])
	if err28 != nil {
		return 0, err28
	}
	i -= n28
	i = encodeVarintUsers(dAtA, i, uint64(n28))
	i--
	dAtA[i] = 0x22
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintUsers(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Email) > 0 {
		i -= len(m.Email)
		copy(dAtA[i:], m.Email)
		i = encodeVarintUsers(dAtA, i, uint64(len(m.Email)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintUsers(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NotifyTrialPendingExpiryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotifyTrialPendingExpiryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NotifyTrialPendingExpiryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExternalID) > 0 {
		i -= len(m.ExternalID)
		copy(dAtA[i:], m.ExternalID)
		i = encodeVarintUsers(dAtA, i, uint64(len(m.ExternalID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NotifyTrialPendingExpiryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotifyTrialPendingExpiryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NotifyTrialPendingExpiryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *NotifyTrialExpiredRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotifyTrialExpiredRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NotifyTrialExpiredRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExternalID) > 0 {
		i -= len(m.ExternalID)
		copy(dAtA[i:], m.ExternalID)
		i = encodeVarintUsers(dAtA, i, uint64(len(m.ExternalID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NotifyTrialExpiredResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotifyTrialExpiredResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NotifyTrialExpiredResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *NotifyRefuseDataUploadRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotifyRefuseDataUploadRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NotifyRefuseDataUploadRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExternalID) > 0 {
		i -= len(m.ExternalID)
		copy(dAtA[i:], m.ExternalID)
		i = encodeVarintUsers(dAtA, i, uint64(len(m.ExternalID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NotifyRefuseDataUploadResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotifyRefuseDataUploadResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NotifyRefuseDataUploadResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Team) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Team) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Team) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DeletedAt != nil {
		n29, err29 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.DeletedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.DeletedAt):])
		if err29 != nil {
			return 0, err29
		}
		i -= n29
		i = encodeVarintUsers(dAtA, i, uint64(n29))
		i--
		dAtA[i] = 0x52
	}
	n30, err30 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.CreatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt):])
	if err30 != nil {
		return 0, err30
	}
	i -= n30
	i = encodeVarintUsers(dAtA, i, uint64(n30))
	i--
	dAtA[i] = 0x4a
	if m.TrialExpiredNotifiedAt != nil {
		n31, err31 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.TrialExpiredNotifiedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.TrialExpiredNotifiedAt):])
		if err31 != nil {
			return 0, err31
		}
		i -= n31
		i = encodeVarintUsers(dAtA, i, uint64(n31))
		i--
		dAtA[i] = 0x42
	}
	if m.TrialPendingExpiryNotifiedAt != nil {
		n32, err32 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.TrialPendingExpiryNotifiedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.TrialPendingExpiryNotifiedAt):])
		if err32 != nil {
			return 0, err32
		}
		i -= n32
		i = encodeVarintUsers(dAtA, i, uint64(n32))
		i--
		dAtA[i] = 0x3a
	}
	n33, err33 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.TrialExpiresAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.TrialExpiresAt):])
	if err33 != nil {
		return 0, err33
	}
	i -= n33
	i = encodeVarintUsers(dAtA, i, uint64(n33))
	i--
	dAtA[i] = 0x32
	if m.ZuoraAccountCreatedAt != nil {
		n34, err34 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.ZuoraAccountCreatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.ZuoraAccountCreatedAt):])
		if err34 != nil {
			return 0, err34
		}
		i -= n34
		i = encodeVarintUsers(dAtA, i, uint64(n34))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ZuoraAccountNumber) > 0 {
		i -= len(m.ZuoraAccountNumber)
		copy(dAtA[i:], m.ZuoraAccountNumber)
		i = encodeVarintUsers(dAtA, i, uint64(len(m.ZuoraAccountNumber)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ExternalID) > 0 {
		i -= len(m.ExternalID)
		copy(dAtA[i:], m.ExternalID)
		i = encodeVarintUsers(dAtA, i, uint64(len(m.ExternalID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintUsers(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintUsers(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Empty) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Empty) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Empty) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Summary) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Summary) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Summary) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Entries) > 0 {
		for iNdEx := len(m.Entries) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Entries[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUsers(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SummaryEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SummaryEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SummaryEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.GCPAccountSubscriptionStatus) > 0 {
		i -= len(m.GCPAccountSubscriptionStatus)
		copy(dAtA[i:], m.GCPAccountSubscriptionStatus)
		i = encodeVarintUsers(dAtA, i, uint64(len(m.GCPAccountSubscriptionStatus)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	if len(m.GCPAccountSubscriptionLevel) > 0 {
		i -= len(m.GCPAccountSubscriptionLevel)
		copy(dAtA[i:], m.GCPAccountSubscriptionLevel)
		i = encodeVarintUsers(dAtA, i, uint64(len(m.GCPAccountSubscriptionLevel)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	n35, err35 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.GCPAccountCreatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.GCPAccountCreatedAt):])
	if err35 != nil {
		return 0, err35
	}
	i -= n35
	i = encodeVarintUsers(dAtA, i, uint64(n35))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xa2
	if len(m.GCPAccountExternalID) > 0 {
		i -= len(m.GCPAccountExternalID)
		copy(dAtA[i:], m.GCPAccountExternalID)
		i = encodeVarintUsers(dAtA, i, uint64(len(m.GCPAccountExternalID)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if m.ZuoraAccountCreatedAt != nil {
		n36, err36 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.ZuoraAccountCreatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.ZuoraAccountCreatedAt):])
		if err36 != nil {
			return 0, err36
		}
		i -= n36
		i = encodeVarintUsers(dAtA, i, uint64(n36))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if len(m.ZuoraAccountNumber) > 0 {
		i -= len(m.ZuoraAccountNumber)
		copy(dAtA[i:], m.ZuoraAccountNumber)
		i = encodeVarintUsers(dAtA, i, uint64(len(m.ZuoraAccountNumber)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if m.RefuseDataUpload {
		i--
		if m.RefuseDataUpload {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.RefuseDataAccess {
		i--
		if m.RefuseDataAccess {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x78
	}
	if m.BillingEnabled {
		i--
		if m.BillingEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x70
	}
	if m.TrialExpiredNotifiedAt != nil {
		n37, err37 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.TrialExpiredNotifiedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.TrialExpiredNotifiedAt):])
		if err37 != nil {
			return 0, err37
		}
		i -= n37
		i = encodeVarintUsers(dAtA, i, uint64(n37))
		i--
		dAtA[i] = 0x6a
	}
	if m.TrialPendingExpiryNotifiedAt != nil {
		n38, err38 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.TrialPendingExpiryNotifiedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.TrialPendingExpiryNotifiedAt):])
		if err38 != nil {
			return 0, err38
		}
		i -= n38
		i = encodeVarintUsers(dAtA, i, uint64(n38))
		i--
		dAtA[i] = 0x62
	}
	n39, err39 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.TrialExpiresAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.TrialExpiresAt):])
	if err39 != nil {
		return 0, err39
	}
	i -= n39
	i = encodeVarintUsers(dAtA, i, uint64(n39))
	i--
	dAtA[i] = 0x5a
	if len(m.Environment) > 0 {
		i -= len(m.Environment)
		copy(dAtA[i:], m.Environment)
		i = encodeVarintUsers(dAtA, i, uint64(len(m.Environment)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Platform) > 0 {
		i -= len(m.Platform)
		copy(dAtA[i:], m.Platform)
		i = encodeVarintUsers(dAtA, i, uint64(len(m.Platform)))
		i--
		dAtA[i] = 0x4a
	}
	if m.FirstSeenConnectedAt != nil {
		n40, err40 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.FirstSeenConnectedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.FirstSeenConnectedAt):])
		if err40 != nil {
			return 0, err40
		}
		i -= n40
		i = encodeVarintUsers(dAtA, i, uint64(n40))
		i--
		dAtA[i] = 0x42
	}
	n41, err41 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.OrgCreatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.OrgCreatedAt):])
	if err41 != nil {
		return 0, err41
	}
	i -= n41
	i = encodeVarintUsers(dAtA, i, uint64(n41))
	i--
	dAtA[i] = 0x3a
	if len(m.Emails) > 0 {
		for iNdEx := len(m.Emails) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Emails[iNdEx])
			copy(dAtA[i:], m.Emails[iNdEx])
			i = encodeVarintUsers(dAtA, i, uint64(len(m.Emails[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.OrgName) > 0 {
		i -= len(m.OrgName)
		copy(dAtA[i:], m.OrgName)
		i = encodeVarintUsers(dAtA, i, uint64(len(m.OrgName)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.OrgExternalID) > 0 {
		i -= len(m.OrgExternalID)
		copy(dAtA[i:], m.OrgExternalID)
		i = encodeVarintUsers(dAtA, i, uint64(len(m.OrgExternalID)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.OrgID) > 0 {
		i -= len(m.OrgID)
		copy(dAtA[i:], m.OrgID)
		i = encodeVarintUsers(dAtA, i, uint64(len(m.OrgID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TeamName) > 0 {
		i -= len(m.TeamName)
		copy(dAtA[i:], m.TeamName)
		i = encodeVarintUsers(dAtA, i, uint64(len(m.TeamName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TeamExternalID) > 0 {
		i -= len(m.TeamExternalID)
		copy(dAtA[i:], m.TeamExternalID)
		i = encodeVarintUsers(dAtA, i, uint64(len(m.TeamExternalID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Webhook) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Webhook) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Webhook) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FirstSeenAt != nil {
		n42, err42 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.FirstSeenAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.FirstSeenAt):])
		if err42 != nil {
			return 0, err42
		}
		i -= n42
		i = encodeVarintUsers(dAtA, i, uint64(n42))
		i--
		dAtA[i] = 0x42
	}
	if m.DeletedAt != nil {
		n43, err43 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.DeletedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.DeletedAt):])
		if err43 != nil {
			return 0, err43
		}
		i -= n43
		i = encodeVarintUsers(dAtA, i, uint64(n43))
		i--
		dAtA[i] = 0x3a
	}
	n44, err44 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.CreatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt):])
	if err44 != nil {
		return 0, err44
	}
	i -= n44
	i = encodeVarintUsers(dAtA, i, uint64(n44))
	i--
	dAtA[i] = 0x32
	if len(m.SecretSigningKey) > 0 {
		i -= len(m.SecretSigningKey)
		copy(dAtA[i:], m.SecretSigningKey)
		i = encodeVarintUsers(dAtA, i, uint64(len(m.SecretSigningKey)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.SecretID) > 0 {
		i -= len(m.SecretID)
		copy(dAtA[i:], m.SecretID)
		i = encodeVarintUsers(dAtA, i, uint64(len(m.SecretID)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.IntegrationType) > 0 {
		i -= len(m.IntegrationType)
		copy(dAtA[i:], m.IntegrationType)
		i = encodeVarintUsers(dAtA, i, uint64(len(m.IntegrationType)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.OrganizationID) > 0 {
		i -= len(m.OrganizationID)
		copy(dAtA[i:], m.OrganizationID)
		i = encodeVarintUsers(dAtA, i, uint64(len(m.OrganizationID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintUsers(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LookupOrganizationWebhookUsingSecretIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LookupOrganizationWebhookUsingSecretIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LookupOrganizationWebhookUsingSecretIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SecretID) > 0 {
		i -= len(m.SecretID)
		copy(dAtA[i:], m.SecretID)
		i = encodeVarintUsers(dAtA, i, uint64(len(m.SecretID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LookupOrganizationWebhookUsingSecretIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LookupOrganizationWebhookUsingSecretIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LookupOrganizationWebhookUsingSecretIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Webhook != nil {
		{
			size, err := m.Webhook.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUsers(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SetOrganizationWebhookFirstSeenAtRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetOrganizationWebhookFirstSeenAtRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetOrganizationWebhookFirstSeenAtRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SecretID) > 0 {
		i -= len(m.SecretID)
		copy(dAtA[i:], m.SecretID)
		i = encodeVarintUsers(dAtA, i, uint64(len(m.SecretID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SetOrganizationWebhookFirstSeenAtResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetOrganizationWebhookFirstSeenAtResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetOrganizationWebhookFirstSeenAtResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FirstSeenAt != nil {
		n46, err46 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.FirstSeenAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.FirstSeenAt):])
		if err46 != nil {
			return 0, err46
		}
		i -= n46
		i = encodeVarintUsers(dAtA, i, uint64(n46))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InformOrganizationBillingConfiguredRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InformOrganizationBillingConfiguredRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InformOrganizationBillingConfiguredRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExternalID) > 0 {
		i -= len(m.ExternalID)
		copy(dAtA[i:], m.ExternalID)
		i = encodeVarintUsers(dAtA, i, uint64(len(m.ExternalID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Permission) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Permission) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Permission) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintUsers(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintUsers(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintUsers(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Role) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Role) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Role) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintUsers(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintUsers(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintUsers(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequireTeamMemberPermissionToRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequireTeamMemberPermissionToRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequireTeamMemberPermissionToRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TeamID != nil {
		{
			size := m.TeamID.Size()
			i -= size
			if _, err := m.TeamID.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.PermissionID) > 0 {
		i -= len(m.PermissionID)
		copy(dAtA[i:], m.PermissionID)
		i = encodeVarintUsers(dAtA, i, uint64(len(m.PermissionID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.UserID) > 0 {
		i -= len(m.UserID)
		copy(dAtA[i:], m.UserID)
		i = encodeVarintUsers(dAtA, i, uint64(len(m.UserID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequireTeamMemberPermissionToRequest_TeamExternalID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequireTeamMemberPermissionToRequest_TeamExternalID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.TeamExternalID)
	copy(dAtA[i:], m.TeamExternalID)
	i = encodeVarintUsers(dAtA, i, uint64(len(m.TeamExternalID)))
	i--
	dAtA[i] = 0x12
	return len(dAtA) - i, nil
}
func (m *RequireTeamMemberPermissionToRequest_TeamInternalID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequireTeamMemberPermissionToRequest_TeamInternalID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.TeamInternalID)
	copy(dAtA[i:], m.TeamInternalID)
	i = encodeVarintUsers(dAtA, i, uint64(len(m.TeamInternalID)))
	i--
	dAtA[i] = 0x22
	return len(dAtA) - i, nil
}
func (m *RequireOrgMemberPermissionToRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequireOrgMemberPermissionToRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequireOrgMemberPermissionToRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OrgID != nil {
		{
			size := m.OrgID.Size()
			i -= size
			if _, err := m.OrgID.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.PermissionID) > 0 {
		i -= len(m.PermissionID)
		copy(dAtA[i:], m.PermissionID)
		i = encodeVarintUsers(dAtA, i, uint64(len(m.PermissionID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.UserID) > 0 {
		i -= len(m.UserID)
		copy(dAtA[i:], m.UserID)
		i = encodeVarintUsers(dAtA, i, uint64(len(m.UserID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequireOrgMemberPermissionToRequest_OrgExternalID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequireOrgMemberPermissionToRequest_OrgExternalID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.OrgExternalID)
	copy(dAtA[i:], m.OrgExternalID)
	i = encodeVarintUsers(dAtA, i, uint64(len(m.OrgExternalID)))
	i--
	dAtA[i] = 0x12
	return len(dAtA) - i, nil
}
func (m *RequireOrgMemberPermissionToRequest_OrgInternalID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequireOrgMemberPermissionToRequest_OrgInternalID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.OrgInternalID)
	copy(dAtA[i:], m.OrgInternalID)
	i = encodeVarintUsers(dAtA, i, uint64(len(m.OrgInternalID)))
	i--
	dAtA[i] = 0x22
	return len(dAtA) - i, nil
}
func encodeVarintUsers(dAtA []byte, offset int, v uint64) int {
	offset -= sovUsers(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedLookupOrgRequest(r randyUsers, easy bool) *LookupOrgRequest {
	this := &LookupOrgRequest{}
	this.Cookie = string(randStringUsers(r))
	this.OrgExternalID = string(randStringUsers(r))
	this.AuthorizeFor = AuthorizedAction([]int32{0, 1, 2}[r.Intn(3)])
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedLookupOrgResponse(r randyUsers, easy bool) *LookupOrgResponse {
	this := &LookupOrgResponse{}
	this.OrganizationID = string(randStringUsers(r))
	this.UserID = string(randStringUsers(r))
	v1 := r.Intn(10)
	this.FeatureFlags = make([]string, v1)
	for i := 0; i < v1; i++ {
		this.FeatureFlags[i] = string(randStringUsers(r))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedLookupUsingTokenRequest(r randyUsers, easy bool) *LookupUsingTokenRequest {
	this := &LookupUsingTokenRequest{}
	this.Token = string(randStringUsers(r))
	this.AuthorizeFor = AuthorizedAction([]int32{0, 1, 2}[r.Intn(3)])
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedLookupUsingTokenResponse(r randyUsers, easy bool) *LookupUsingTokenResponse {
	this := &LookupUsingTokenResponse{}
	this.OrganizationID = string(randStringUsers(r))
	v2 := r.Intn(10)
	this.FeatureFlags = make([]string, v2)
	for i := 0; i < v2; i++ {
		this.FeatureFlags[i] = string(randStringUsers(r))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedLookupAdminRequest(r randyUsers, easy bool) *LookupAdminRequest {
	this := &LookupAdminRequest{}
	this.Cookie = string(randStringUsers(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedLookupAdminResponse(r randyUsers, easy bool) *LookupAdminResponse {
	this := &LookupAdminResponse{}
	this.AdminID = string(randStringUsers(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedLookupUserRequest(r randyUsers, easy bool) *LookupUserRequest {
	this := &LookupUserRequest{}
	this.Cookie = string(randStringUsers(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedLookupUserResponse(r randyUsers, easy bool) *LookupUserResponse {
	this := &LookupUserResponse{}
	this.UserID = string(randStringUsers(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetOrganizationsRequest(r randyUsers, easy bool) *GetOrganizationsRequest {
	this := &GetOrganizationsRequest{}
	this.Query = string(randStringUsers(r))
	this.PageNumber = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.PageNumber *= -1
	}
	this.IncludeDeleted = bool(bool(r.Intn(2) == 0))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetOrganizationsResponse(r randyUsers, easy bool) *GetOrganizationsResponse {
	this := &GetOrganizationsResponse{}
	if r.Intn(5) != 0 {
		v3 := r.Intn(5)
		this.Organizations = make([]Organization, v3)
		for i := 0; i < v3; i++ {
			v4 := NewPopulatedOrganization(r, easy)
			this.Organizations[i] = *v4
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetBillableOrganizationsRequest(r randyUsers, easy bool) *GetBillableOrganizationsRequest {
	this := &GetBillableOrganizationsRequest{}
	v5 := github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	this.Now = *v5
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetBillableOrganizationsResponse(r randyUsers, easy bool) *GetBillableOrganizationsResponse {
	this := &GetBillableOrganizationsResponse{}
	if r.Intn(5) != 0 {
		v6 := r.Intn(5)
		this.Organizations = make([]Organization, v6)
		for i := 0; i < v6; i++ {
			v7 := NewPopulatedOrganization(r, easy)
			this.Organizations[i] = *v7
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetTrialOrganizationsRequest(r randyUsers, easy bool) *GetTrialOrganizationsRequest {
	this := &GetTrialOrganizationsRequest{}
	v8 := github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	this.Now = *v8
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetTrialOrganizationsResponse(r randyUsers, easy bool) *GetTrialOrganizationsResponse {
	this := &GetTrialOrganizationsResponse{}
	if r.Intn(5) != 0 {
		v9 := r.Intn(5)
		this.Organizations = make([]Organization, v9)
		for i := 0; i < v9; i++ {
			v10 := NewPopulatedOrganization(r, easy)
			this.Organizations[i] = *v10
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetDelinquentOrganizationsRequest(r randyUsers, easy bool) *GetDelinquentOrganizationsRequest {
	this := &GetDelinquentOrganizationsRequest{}
	v11 := github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	this.Now = *v11
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetDelinquentOrganizationsResponse(r randyUsers, easy bool) *GetDelinquentOrganizationsResponse {
	this := &GetDelinquentOrganizationsResponse{}
	if r.Intn(5) != 0 {
		v12 := r.Intn(5)
		this.Organizations = make([]Organization, v12)
		for i := 0; i < v12; i++ {
			v13 := NewPopulatedOrganization(r, easy)
			this.Organizations[i] = *v13
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetOrganizationRequest(r randyUsers, easy bool) *GetOrganizationRequest {
	this := &GetOrganizationRequest{}
	oneofNumber_ID := []int32{1, 2, 3}[r.Intn(3)]
	switch oneofNumber_ID {
	case 1:
		this.ID = NewPopulatedGetOrganizationRequest_ExternalID(r, easy)
	case 2:
		this.ID = NewPopulatedGetOrganizationRequest_GCPExternalAccountID(r, easy)
	case 3:
		this.ID = NewPopulatedGetOrganizationRequest_InternalID(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetOrganizationRequest_ExternalID(r randyUsers, easy bool) *GetOrganizationRequest_ExternalID {
	this := &GetOrganizationRequest_ExternalID{}
	this.ExternalID = string(randStringUsers(r))
	return this
}
func NewPopulatedGetOrganizationRequest_GCPExternalAccountID(r randyUsers, easy bool) *GetOrganizationRequest_GCPExternalAccountID {
	this := &GetOrganizationRequest_GCPExternalAccountID{}
	this.GCPExternalAccountID = string(randStringUsers(r))
	return this
}
func NewPopulatedGetOrganizationRequest_InternalID(r randyUsers, easy bool) *GetOrganizationRequest_InternalID {
	this := &GetOrganizationRequest_InternalID{}
	this.InternalID = string(randStringUsers(r))
	return this
}
func NewPopulatedGetOrganizationResponse(r randyUsers, easy bool) *GetOrganizationResponse {
	this := &GetOrganizationResponse{}
	v14 := NewPopulatedOrganization(r, easy)
	this.Organization = *v14
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedOrganization(r randyUsers, easy bool) *Organization {
	this := &Organization{}
	this.ID = string(randStringUsers(r))
	this.ExternalID = string(randStringUsers(r))
	this.Name = string(randStringUsers(r))
	this.ProbeToken = string(randStringUsers(r))
	v15 := github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	this.CreatedAt = *v15
	v16 := r.Intn(10)
	this.FeatureFlags = make([]string, v16)
	for i := 0; i < v16; i++ {
		this.FeatureFlags[i] = string(randStringUsers(r))
	}
	this.RefuseDataAccess = bool(bool(r.Intn(2) == 0))
	this.RefuseDataUpload = bool(bool(r.Intn(2) == 0))
	if r.Intn(5) != 0 {
		this.FirstSeenConnectedAt = github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	}
	this.Platform = string(randStringUsers(r))
	this.Environment = string(randStringUsers(r))
	v17 := github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	this.TrialExpiresAt = *v17
	this.ZuoraAccountNumber = string(randStringUsers(r))
	if r.Intn(5) != 0 {
		this.ZuoraAccountCreatedAt = github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	}
	if r.Intn(5) != 0 {
		this.TrialPendingExpiryNotifiedAt = github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	}
	if r.Intn(5) != 0 {
		this.TrialExpiredNotifiedAt = github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	}
	if r.Intn(5) != 0 {
		this.GCP = NewPopulatedGoogleCloudPlatform(r, easy)
	}
	this.TeamID = string(randStringUsers(r))
	this.TeamExternalID = string(randStringUsers(r))
	v18 := github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	this.DeletedAt = *v18
	this.Cleanup = bool(bool(r.Intn(2) == 0))
	if r.Intn(5) != 0 {
		this.FirstSeenFluxConnectedAt = github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	}
	if r.Intn(5) != 0 {
		this.FirstSeenNetConnectedAt = github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	}
	if r.Intn(5) != 0 {
		this.FirstSeenPromConnectedAt = github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	}
	if r.Intn(5) != 0 {
		this.FirstSeenScopeConnectedAt = github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	}
	this.RefuseDataReason = string(randStringUsers(r))
	if r.Intn(5) != 0 {
		this.LastSentWeeklyReportAt = github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	}
	this.PlatformVersion = string(randStringUsers(r))
	this.DeletedBy = string(randStringUsers(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGoogleCloudPlatform(r randyUsers, easy bool) *GoogleCloudPlatform {
	this := &GoogleCloudPlatform{}
	this.ID = string(randStringUsers(r))
	this.ExternalAccountID = string(randStringUsers(r))
	this.Activated = bool(bool(r.Intn(2) == 0))
	v19 := github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	this.CreatedAt = *v19
	this.ConsumerID = string(randStringUsers(r))
	this.SubscriptionName = string(randStringUsers(r))
	this.SubscriptionLevel = string(randStringUsers(r))
	this.SubscriptionStatus = string(randStringUsers(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetGCPRequest(r randyUsers, easy bool) *GetGCPRequest {
	this := &GetGCPRequest{}
	this.ExternalAccountID = string(randStringUsers(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetGCPResponse(r randyUsers, easy bool) *GetGCPResponse {
	this := &GetGCPResponse{}
	v20 := NewPopulatedGoogleCloudPlatform(r, easy)
	this.GCP = *v20
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedUpdateGCPRequest(r randyUsers, easy bool) *UpdateGCPRequest {
	this := &UpdateGCPRequest{}
	if r.Intn(5) != 0 {
		this.GCP = NewPopulatedGoogleCloudPlatform(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedUpdateGCPResponse(r randyUsers, easy bool) *UpdateGCPResponse {
	this := &UpdateGCPResponse{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSetOrganizationZuoraAccountRequest(r randyUsers, easy bool) *SetOrganizationZuoraAccountRequest {
	this := &SetOrganizationZuoraAccountRequest{}
	this.ExternalID = string(randStringUsers(r))
	this.Number = string(randStringUsers(r))
	if r.Intn(5) != 0 {
		this.CreatedAt = github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSetOrganizationZuoraAccountResponse(r randyUsers, easy bool) *SetOrganizationZuoraAccountResponse {
	this := &SetOrganizationZuoraAccountResponse{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSetOrganizationFlagRequest(r randyUsers, easy bool) *SetOrganizationFlagRequest {
	this := &SetOrganizationFlagRequest{}
	this.ExternalID = string(randStringUsers(r))
	this.Flag = string(randStringUsers(r))
	this.Value = bool(bool(r.Intn(2) == 0))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSetOrganizationFlagResponse(r randyUsers, easy bool) *SetOrganizationFlagResponse {
	this := &SetOrganizationFlagResponse{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetUserRequest(r randyUsers, easy bool) *GetUserRequest {
	this := &GetUserRequest{}
	this.UserID = string(randStringUsers(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetUserResponse(r randyUsers, easy bool) *GetUserResponse {
	this := &GetUserResponse{}
	v21 := NewPopulatedUser(r, easy)
	this.User = *v21
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetOrganizationsReadyForWeeklyReportRequest(r randyUsers, easy bool) *GetOrganizationsReadyForWeeklyReportRequest {
	this := &GetOrganizationsReadyForWeeklyReportRequest{}
	v22 := github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	this.Now = *v22
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetOrganizationsReadyForWeeklyReportResponse(r randyUsers, easy bool) *GetOrganizationsReadyForWeeklyReportResponse {
	this := &GetOrganizationsReadyForWeeklyReportResponse{}
	if r.Intn(5) != 0 {
		v23 := r.Intn(5)
		this.Organizations = make([]Organization, v23)
		for i := 0; i < v23; i++ {
			v24 := NewPopulatedOrganization(r, easy)
			this.Organizations[i] = *v24
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSendOutWeeklyReportRequest(r randyUsers, easy bool) *SendOutWeeklyReportRequest {
	this := &SendOutWeeklyReportRequest{}
	v25 := github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	this.Now = *v25
	this.ExternalID = string(randStringUsers(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSendOutWeeklyReportResponse(r randyUsers, easy bool) *SendOutWeeklyReportResponse {
	this := &SendOutWeeklyReportResponse{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedUser(r randyUsers, easy bool) *User {
	this := &User{}
	this.ID = string(randStringUsers(r))
	this.Email = string(randStringUsers(r))
	this.Token = string(randStringUsers(r))
	v26 := github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	this.TokenCreatedAt = *v26
	v27 := github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	this.FirstLoginAt = *v27
	v28 := github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	this.CreatedAt = *v28
	this.Admin = bool(bool(r.Intn(2) == 0))
	v29 := github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	this.LastLoginAt = *v29
	this.Company = string(randStringUsers(r))
	this.Name = string(randStringUsers(r))
	this.FirstName = string(randStringUsers(r))
	this.LastName = string(randStringUsers(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedNotifyTrialPendingExpiryRequest(r randyUsers, easy bool) *NotifyTrialPendingExpiryRequest {
	this := &NotifyTrialPendingExpiryRequest{}
	this.ExternalID = string(randStringUsers(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedNotifyTrialPendingExpiryResponse(r randyUsers, easy bool) *NotifyTrialPendingExpiryResponse {
	this := &NotifyTrialPendingExpiryResponse{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedNotifyTrialExpiredRequest(r randyUsers, easy bool) *NotifyTrialExpiredRequest {
	this := &NotifyTrialExpiredRequest{}
	this.ExternalID = string(randStringUsers(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedNotifyTrialExpiredResponse(r randyUsers, easy bool) *NotifyTrialExpiredResponse {
	this := &NotifyTrialExpiredResponse{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedNotifyRefuseDataUploadRequest(r randyUsers, easy bool) *NotifyRefuseDataUploadRequest {
	this := &NotifyRefuseDataUploadRequest{}
	this.ExternalID = string(randStringUsers(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedNotifyRefuseDataUploadResponse(r randyUsers, easy bool) *NotifyRefuseDataUploadResponse {
	this := &NotifyRefuseDataUploadResponse{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedTeam(r randyUsers, easy bool) *Team {
	this := &Team{}
	this.ID = string(randStringUsers(r))
	this.Name = string(randStringUsers(r))
	this.ExternalID = string(randStringUsers(r))
	this.ZuoraAccountNumber = string(randStringUsers(r))
	if r.Intn(5) != 0 {
		this.ZuoraAccountCreatedAt = github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	}
	v30 := github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	this.TrialExpiresAt = *v30
	if r.Intn(5) != 0 {
		this.TrialPendingExpiryNotifiedAt = github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	}
	if r.Intn(5) != 0 {
		this.TrialExpiredNotifiedAt = github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	}
	v31 := github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	this.CreatedAt = *v31
	if r.Intn(5) != 0 {
		this.DeletedAt = github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedEmpty(r randyUsers, easy bool) *Empty {
	this := &Empty{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSummary(r randyUsers, easy bool) *Summary {
	this := &Summary{}
	if r.Intn(5) != 0 {
		v32 := r.Intn(5)
		this.Entries = make([]*SummaryEntry, v32)
		for i := 0; i < v32; i++ {
			this.Entries[i] = NewPopulatedSummaryEntry(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSummaryEntry(r randyUsers, easy bool) *SummaryEntry {
	this := &SummaryEntry{}
	this.TeamExternalID = string(randStringUsers(r))
	this.TeamName = string(randStringUsers(r))
	this.OrgID = string(randStringUsers(r))
	this.OrgExternalID = string(randStringUsers(r))
	this.OrgName = string(randStringUsers(r))
	v33 := r.Intn(10)
	this.Emails = make([]string, v33)
	for i := 0; i < v33; i++ {
		this.Emails[i] = string(randStringUsers(r))
	}
	v34 := github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	this.OrgCreatedAt = *v34
	if r.Intn(5) != 0 {
		this.FirstSeenConnectedAt = github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	}
	this.Platform = string(randStringUsers(r))
	this.Environment = string(randStringUsers(r))
	v35 := github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	this.TrialExpiresAt = *v35
	if r.Intn(5) != 0 {
		this.TrialPendingExpiryNotifiedAt = github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	}
	if r.Intn(5) != 0 {
		this.TrialExpiredNotifiedAt = github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	}
	this.BillingEnabled = bool(bool(r.Intn(2) == 0))
	this.RefuseDataAccess = bool(bool(r.Intn(2) == 0))
	this.RefuseDataUpload = bool(bool(r.Intn(2) == 0))
	this.ZuoraAccountNumber = string(randStringUsers(r))
	if r.Intn(5) != 0 {
		this.ZuoraAccountCreatedAt = github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	}
	this.GCPAccountExternalID = string(randStringUsers(r))
	v36 := github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	this.GCPAccountCreatedAt = *v36
	this.GCPAccountSubscriptionLevel = string(randStringUsers(r))
	this.GCPAccountSubscriptionStatus = string(randStringUsers(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedWebhook(r randyUsers, easy bool) *Webhook {
	this := &Webhook{}
	this.ID = string(randStringUsers(r))
	this.OrganizationID = string(randStringUsers(r))
	this.IntegrationType = string(randStringUsers(r))
	this.SecretID = string(randStringUsers(r))
	this.SecretSigningKey = string(randStringUsers(r))
	v37 := github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	this.CreatedAt = *v37
	if r.Intn(5) != 0 {
		this.DeletedAt = github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	}
	if r.Intn(5) != 0 {
		this.FirstSeenAt = github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedLookupOrganizationWebhookUsingSecretIDRequest(r randyUsers, easy bool) *LookupOrganizationWebhookUsingSecretIDRequest {
	this := &LookupOrganizationWebhookUsingSecretIDRequest{}
	this.SecretID = string(randStringUsers(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedLookupOrganizationWebhookUsingSecretIDResponse(r randyUsers, easy bool) *LookupOrganizationWebhookUsingSecretIDResponse {
	this := &LookupOrganizationWebhookUsingSecretIDResponse{}
	if r.Intn(5) != 0 {
		this.Webhook = NewPopulatedWebhook(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSetOrganizationWebhookFirstSeenAtRequest(r randyUsers, easy bool) *SetOrganizationWebhookFirstSeenAtRequest {
	this := &SetOrganizationWebhookFirstSeenAtRequest{}
	this.SecretID = string(randStringUsers(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSetOrganizationWebhookFirstSeenAtResponse(r randyUsers, easy bool) *SetOrganizationWebhookFirstSeenAtResponse {
	this := &SetOrganizationWebhookFirstSeenAtResponse{}
	if r.Intn(5) != 0 {
		this.FirstSeenAt = github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedInformOrganizationBillingConfiguredRequest(r randyUsers, easy bool) *InformOrganizationBillingConfiguredRequest {
	this := &InformOrganizationBillingConfiguredRequest{}
	this.ExternalID = string(randStringUsers(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedPermission(r randyUsers, easy bool) *Permission {
	this := &Permission{}
	this.ID = string(randStringUsers(r))
	this.Name = string(randStringUsers(r))
	this.Description = string(randStringUsers(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRole(r randyUsers, easy bool) *Role {
	this := &Role{}
	this.ID = string(randStringUsers(r))
	this.Name = string(randStringUsers(r))
	this.Description = string(randStringUsers(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRequireTeamMemberPermissionToRequest(r randyUsers, easy bool) *RequireTeamMemberPermissionToRequest {
	this := &RequireTeamMemberPermissionToRequest{}
	this.UserID = string(randStringUsers(r))
	oneofNumber_TeamID := []int32{2, 4}[r.Intn(2)]
	switch oneofNumber_TeamID {
	case 2:
		this.TeamID = NewPopulatedRequireTeamMemberPermissionToRequest_TeamExternalID(r, easy)
	case 4:
		this.TeamID = NewPopulatedRequireTeamMemberPermissionToRequest_TeamInternalID(r, easy)
	}
	this.PermissionID = string(randStringUsers(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRequireTeamMemberPermissionToRequest_TeamExternalID(r randyUsers, easy bool) *RequireTeamMemberPermissionToRequest_TeamExternalID {
	this := &RequireTeamMemberPermissionToRequest_TeamExternalID{}
	this.TeamExternalID = string(randStringUsers(r))
	return this
}
func NewPopulatedRequireTeamMemberPermissionToRequest_TeamInternalID(r randyUsers, easy bool) *RequireTeamMemberPermissionToRequest_TeamInternalID {
	this := &RequireTeamMemberPermissionToRequest_TeamInternalID{}
	this.TeamInternalID = string(randStringUsers(r))
	return this
}
func NewPopulatedRequireOrgMemberPermissionToRequest(r randyUsers, easy bool) *RequireOrgMemberPermissionToRequest {
	this := &RequireOrgMemberPermissionToRequest{}
	this.UserID = string(randStringUsers(r))
	oneofNumber_OrgID := []int32{2, 4}[r.Intn(2)]
	switch oneofNumber_OrgID {
	case 2:
		this.OrgID = NewPopulatedRequireOrgMemberPermissionToRequest_OrgExternalID(r, easy)
	case 4:
		this.OrgID = NewPopulatedRequireOrgMemberPermissionToRequest_OrgInternalID(r, easy)
	}
	this.PermissionID = string(randStringUsers(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRequireOrgMemberPermissionToRequest_OrgExternalID(r randyUsers, easy bool) *RequireOrgMemberPermissionToRequest_OrgExternalID {
	this := &RequireOrgMemberPermissionToRequest_OrgExternalID{}
	this.OrgExternalID = string(randStringUsers(r))
	return this
}
func NewPopulatedRequireOrgMemberPermissionToRequest_OrgInternalID(r randyUsers, easy bool) *RequireOrgMemberPermissionToRequest_OrgInternalID {
	this := &RequireOrgMemberPermissionToRequest_OrgInternalID{}
	this.OrgInternalID = string(randStringUsers(r))
	return this
}

type randyUsers interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneUsers(r randyUsers) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringUsers(r randyUsers) string {
	v38 := r.Intn(100)
	tmps := make([]rune, v38)
	for i := 0; i < v38; i++ {
		tmps[i] = randUTF8RuneUsers(r)
	}
	return string(tmps)
}
func randUnrecognizedUsers(r randyUsers, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldUsers(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldUsers(dAtA []byte, r randyUsers, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateUsers(dAtA, uint64(key))
		v39 := r.Int63()
		if r.Intn(2) == 0 {
			v39 *= -1
		}
		dAtA = encodeVarintPopulateUsers(dAtA, uint64(v39))
	case 1:
		dAtA = encodeVarintPopulateUsers(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateUsers(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateUsers(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateUsers(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateUsers(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *LookupOrgRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Cookie)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	l = len(m.OrgExternalID)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	if m.AuthorizeFor != 0 {
		n += 1 + sovUsers(uint64(m.AuthorizeFor))
	}
	return n
}

func (m *LookupOrgResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OrganizationID)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	l = len(m.UserID)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	if len(m.FeatureFlags) > 0 {
		for _, s := range m.FeatureFlags {
			l = len(s)
			n += 1 + l + sovUsers(uint64(l))
		}
	}
	return n
}

func (m *LookupUsingTokenRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	if m.AuthorizeFor != 0 {
		n += 1 + sovUsers(uint64(m.AuthorizeFor))
	}
	return n
}

func (m *LookupUsingTokenResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OrganizationID)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	if len(m.FeatureFlags) > 0 {
		for _, s := range m.FeatureFlags {
			l = len(s)
			n += 1 + l + sovUsers(uint64(l))
		}
	}
	return n
}

func (m *LookupAdminRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Cookie)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	return n
}

func (m *LookupAdminResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AdminID)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	return n
}

func (m *LookupUserRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Cookie)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	return n
}

func (m *LookupUserResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserID)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	return n
}

func (m *GetOrganizationsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Query)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	if m.PageNumber != 0 {
		n += 1 + sovUsers(uint64(m.PageNumber))
	}
	if m.IncludeDeleted {
		n += 2
	}
	return n
}

func (m *GetOrganizationsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Organizations) > 0 {
		for _, e := range m.Organizations {
			l = e.Size()
			n += 1 + l + sovUsers(uint64(l))
		}
	}
	return n
}

func (m *GetBillableOrganizationsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Now)
	n += 1 + l + sovUsers(uint64(l))
	return n
}

func (m *GetBillableOrganizationsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Organizations) > 0 {
		for _, e := range m.Organizations {
			l = e.Size()
			n += 1 + l + sovUsers(uint64(l))
		}
	}
	return n
}

func (m *GetTrialOrganizationsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Now)
	n += 1 + l + sovUsers(uint64(l))
	return n
}

func (m *GetTrialOrganizationsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Organizations) > 0 {
		for _, e := range m.Organizations {
			l = e.Size()
			n += 1 + l + sovUsers(uint64(l))
		}
	}
	return n
}

func (m *GetDelinquentOrganizationsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Now)
	n += 1 + l + sovUsers(uint64(l))
	return n
}

func (m *GetDelinquentOrganizationsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Organizations) > 0 {
		for _, e := range m.Organizations {
			l = e.Size()
			n += 1 + l + sovUsers(uint64(l))
		}
	}
	return n
}

func (m *GetOrganizationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != nil {
		n += m.ID.Size()
	}
	return n
}

func (m *GetOrganizationRequest_ExternalID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ExternalID)
	n += 1 + l + sovUsers(uint64(l))
	return n
}
func (m *GetOrganizationRequest_GCPExternalAccountID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GCPExternalAccountID)
	n += 1 + l + sovUsers(uint64(l))
	return n
}
func (m *GetOrganizationRequest_InternalID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.InternalID)
	n += 1 + l + sovUsers(uint64(l))
	return n
}
func (m *GetOrganizationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Organization.Size()
	n += 1 + l + sovUsers(uint64(l))
	return n
}

func (m *Organization) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	l = len(m.ExternalID)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	l = len(m.ProbeToken)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt)
	n += 1 + l + sovUsers(uint64(l))
	if len(m.FeatureFlags) > 0 {
		for _, s := range m.FeatureFlags {
			l = len(s)
			n += 1 + l + sovUsers(uint64(l))
		}
	}
	if m.RefuseDataAccess {
		n += 2
	}
	if m.RefuseDataUpload {
		n += 2
	}
	if m.FirstSeenConnectedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.FirstSeenConnectedAt)
		n += 1 + l + sovUsers(uint64(l))
	}
	l = len(m.Platform)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	l = len(m.Environment)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.TrialExpiresAt)
	n += 1 + l + sovUsers(uint64(l))
	l = len(m.ZuoraAccountNumber)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	if m.ZuoraAccountCreatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.ZuoraAccountCreatedAt)
		n += 1 + l + sovUsers(uint64(l))
	}
	if m.TrialPendingExpiryNotifiedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.TrialPendingExpiryNotifiedAt)
		n += 1 + l + sovUsers(uint64(l))
	}
	if m.TrialExpiredNotifiedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.TrialExpiredNotifiedAt)
		n += 2 + l + sovUsers(uint64(l))
	}
	if m.GCP != nil {
		l = m.GCP.Size()
		n += 2 + l + sovUsers(uint64(l))
	}
	l = len(m.TeamID)
	if l > 0 {
		n += 2 + l + sovUsers(uint64(l))
	}
	l = len(m.TeamExternalID)
	if l > 0 {
		n += 2 + l + sovUsers(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.DeletedAt)
	n += 2 + l + sovUsers(uint64(l))
	if m.Cleanup {
		n += 3
	}
	if m.FirstSeenFluxConnectedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.FirstSeenFluxConnectedAt)
		n += 2 + l + sovUsers(uint64(l))
	}
	if m.FirstSeenNetConnectedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.FirstSeenNetConnectedAt)
		n += 2 + l + sovUsers(uint64(l))
	}
	if m.FirstSeenPromConnectedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.FirstSeenPromConnectedAt)
		n += 2 + l + sovUsers(uint64(l))
	}
	if m.FirstSeenScopeConnectedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.FirstSeenScopeConnectedAt)
		n += 2 + l + sovUsers(uint64(l))
	}
	l = len(m.RefuseDataReason)
	if l > 0 {
		n += 2 + l + sovUsers(uint64(l))
	}
	if m.LastSentWeeklyReportAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.LastSentWeeklyReportAt)
		n += 2 + l + sovUsers(uint64(l))
	}
	l = len(m.PlatformVersion)
	if l > 0 {
		n += 2 + l + sovUsers(uint64(l))
	}
	l = len(m.DeletedBy)
	if l > 0 {
		n += 2 + l + sovUsers(uint64(l))
	}
	return n
}

func (m *GoogleCloudPlatform) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	l = len(m.ExternalAccountID)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	if m.Activated {
		n += 2
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt)
	n += 1 + l + sovUsers(uint64(l))
	l = len(m.ConsumerID)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	l = len(m.SubscriptionName)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	l = len(m.SubscriptionLevel)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	l = len(m.SubscriptionStatus)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	return n
}

func (m *GetGCPRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ExternalAccountID)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	return n
}

func (m *GetGCPResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.GCP.Size()
	n += 1 + l + sovUsers(uint64(l))
	return n
}

func (m *UpdateGCPRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GCP != nil {
		l = m.GCP.Size()
		n += 1 + l + sovUsers(uint64(l))
	}
	return n
}

func (m *UpdateGCPResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *SetOrganizationZuoraAccountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ExternalID)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	l = len(m.Number)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	if m.CreatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt)
		n += 1 + l + sovUsers(uint64(l))
	}
	return n
}

func (m *SetOrganizationZuoraAccountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *SetOrganizationFlagRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ExternalID)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	l = len(m.Flag)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	if m.Value {
		n += 2
	}
	return n
}

func (m *SetOrganizationFlagResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetUserRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserID)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	return n
}

func (m *GetUserResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.User.Size()
	n += 1 + l + sovUsers(uint64(l))
	return n
}

func (m *GetOrganizationsReadyForWeeklyReportRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Now)
	n += 1 + l + sovUsers(uint64(l))
	return n
}

func (m *GetOrganizationsReadyForWeeklyReportResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Organizations) > 0 {
		for _, e := range m.Organizations {
			l = e.Size()
			n += 1 + l + sovUsers(uint64(l))
		}
	}
	return n
}

func (m *SendOutWeeklyReportRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Now)
	n += 1 + l + sovUsers(uint64(l))
	l = len(m.ExternalID)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	return n
}

func (m *SendOutWeeklyReportResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *User) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.TokenCreatedAt)
	n += 1 + l + sovUsers(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.FirstLoginAt)
	n += 1 + l + sovUsers(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt)
	n += 1 + l + sovUsers(uint64(l))
	if m.Admin {
		n += 2
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.LastLoginAt)
	n += 1 + l + sovUsers(uint64(l))
	l = len(m.Company)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	l = len(m.FirstName)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	l = len(m.LastName)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	return n
}

func (m *NotifyTrialPendingExpiryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ExternalID)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	return n
}

func (m *NotifyTrialPendingExpiryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *NotifyTrialExpiredRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ExternalID)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	return n
}

func (m *NotifyTrialExpiredResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *NotifyRefuseDataUploadRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ExternalID)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	return n
}

func (m *NotifyRefuseDataUploadResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Team) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	l = len(m.ExternalID)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	l = len(m.ZuoraAccountNumber)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	if m.ZuoraAccountCreatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.ZuoraAccountCreatedAt)
		n += 1 + l + sovUsers(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.TrialExpiresAt)
	n += 1 + l + sovUsers(uint64(l))
	if m.TrialPendingExpiryNotifiedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.TrialPendingExpiryNotifiedAt)
		n += 1 + l + sovUsers(uint64(l))
	}
	if m.TrialExpiredNotifiedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.TrialExpiredNotifiedAt)
		n += 1 + l + sovUsers(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt)
	n += 1 + l + sovUsers(uint64(l))
	if m.DeletedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.DeletedAt)
		n += 1 + l + sovUsers(uint64(l))
	}
	return n
}

func (m *Empty) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Summary) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Entries) > 0 {
		for _, e := range m.Entries {
			l = e.Size()
			n += 1 + l + sovUsers(uint64(l))
		}
	}
	return n
}

func (m *SummaryEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TeamExternalID)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	l = len(m.TeamName)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	l = len(m.OrgID)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	l = len(m.OrgExternalID)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	l = len(m.OrgName)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	if len(m.Emails) > 0 {
		for _, s := range m.Emails {
			l = len(s)
			n += 1 + l + sovUsers(uint64(l))
		}
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.OrgCreatedAt)
	n += 1 + l + sovUsers(uint64(l))
	if m.FirstSeenConnectedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.FirstSeenConnectedAt)
		n += 1 + l + sovUsers(uint64(l))
	}
	l = len(m.Platform)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	l = len(m.Environment)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.TrialExpiresAt)
	n += 1 + l + sovUsers(uint64(l))
	if m.TrialPendingExpiryNotifiedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.TrialPendingExpiryNotifiedAt)
		n += 1 + l + sovUsers(uint64(l))
	}
	if m.TrialExpiredNotifiedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.TrialExpiredNotifiedAt)
		n += 1 + l + sovUsers(uint64(l))
	}
	if m.BillingEnabled {
		n += 2
	}
	if m.RefuseDataAccess {
		n += 2
	}
	if m.RefuseDataUpload {
		n += 3
	}
	l = len(m.ZuoraAccountNumber)
	if l > 0 {
		n += 2 + l + sovUsers(uint64(l))
	}
	if m.ZuoraAccountCreatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.ZuoraAccountCreatedAt)
		n += 2 + l + sovUsers(uint64(l))
	}
	l = len(m.GCPAccountExternalID)
	if l > 0 {
		n += 2 + l + sovUsers(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.GCPAccountCreatedAt)
	n += 2 + l + sovUsers(uint64(l))
	l = len(m.GCPAccountSubscriptionLevel)
	if l > 0 {
		n += 2 + l + sovUsers(uint64(l))
	}
	l = len(m.GCPAccountSubscriptionStatus)
	if l > 0 {
		n += 2 + l + sovUsers(uint64(l))
	}
	return n
}

func (m *Webhook) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	l = len(m.OrganizationID)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	l = len(m.IntegrationType)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	l = len(m.SecretID)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	l = len(m.SecretSigningKey)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt)
	n += 1 + l + sovUsers(uint64(l))
	if m.DeletedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.DeletedAt)
		n += 1 + l + sovUsers(uint64(l))
	}
	if m.FirstSeenAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.FirstSeenAt)
		n += 1 + l + sovUsers(uint64(l))
	}
	return n
}

func (m *LookupOrganizationWebhookUsingSecretIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SecretID)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	return n
}

func (m *LookupOrganizationWebhookUsingSecretIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Webhook != nil {
		l = m.Webhook.Size()
		n += 1 + l + sovUsers(uint64(l))
	}
	return n
}

func (m *SetOrganizationWebhookFirstSeenAtRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SecretID)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	return n
}

func (m *SetOrganizationWebhookFirstSeenAtResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FirstSeenAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.FirstSeenAt)
		n += 1 + l + sovUsers(uint64(l))
	}
	return n
}

func (m *InformOrganizationBillingConfiguredRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ExternalID)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	return n
}

func (m *Permission) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	return n
}

func (m *Role) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	return n
}

func (m *RequireTeamMemberPermissionToRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserID)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	if m.TeamID != nil {
		n += m.TeamID.Size()
	}
	l = len(m.PermissionID)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	return n
}

func (m *RequireTeamMemberPermissionToRequest_TeamExternalID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TeamExternalID)
	n += 1 + l + sovUsers(uint64(l))
	return n
}
func (m *RequireTeamMemberPermissionToRequest_TeamInternalID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TeamInternalID)
	n += 1 + l + sovUsers(uint64(l))
	return n
}
func (m *RequireOrgMemberPermissionToRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserID)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	if m.OrgID != nil {
		n += m.OrgID.Size()
	}
	l = len(m.PermissionID)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	return n
}

func (m *RequireOrgMemberPermissionToRequest_OrgExternalID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OrgExternalID)
	n += 1 + l + sovUsers(uint64(l))
	return n
}
func (m *RequireOrgMemberPermissionToRequest_OrgInternalID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OrgInternalID)
	n += 1 + l + sovUsers(uint64(l))
	return n
}

func sovUsers(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozUsers(x uint64) (n int) {
	return sovUsers(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *LookupOrgRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LookupOrgRequest{`,
		`Cookie:` + fmt.Sprintf("%v", this.Cookie) + `,`,
		`OrgExternalID:` + fmt.Sprintf("%v", this.OrgExternalID) + `,`,
		`AuthorizeFor:` + fmt.Sprintf("%v", this.AuthorizeFor) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LookupOrgResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LookupOrgResponse{`,
		`OrganizationID:` + fmt.Sprintf("%v", this.OrganizationID) + `,`,
		`UserID:` + fmt.Sprintf("%v", this.UserID) + `,`,
		`FeatureFlags:` + fmt.Sprintf("%v", this.FeatureFlags) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LookupUsingTokenRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LookupUsingTokenRequest{`,
		`Token:` + fmt.Sprintf("%v", this.Token) + `,`,
		`AuthorizeFor:` + fmt.Sprintf("%v", this.AuthorizeFor) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LookupUsingTokenResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LookupUsingTokenResponse{`,
		`OrganizationID:` + fmt.Sprintf("%v", this.OrganizationID) + `,`,
		`FeatureFlags:` + fmt.Sprintf("%v", this.FeatureFlags) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LookupAdminRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LookupAdminRequest{`,
		`Cookie:` + fmt.Sprintf("%v", this.Cookie) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LookupAdminResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LookupAdminResponse{`,
		`AdminID:` + fmt.Sprintf("%v", this.AdminID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LookupUserRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LookupUserRequest{`,
		`Cookie:` + fmt.Sprintf("%v", this.Cookie) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LookupUserResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LookupUserResponse{`,
		`UserID:` + fmt.Sprintf("%v", this.UserID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetOrganizationsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetOrganizationsRequest{`,
		`Query:` + fmt.Sprintf("%v", this.Query) + `,`,
		`PageNumber:` + fmt.Sprintf("%v", this.PageNumber) + `,`,
		`IncludeDeleted:` + fmt.Sprintf("%v", this.IncludeDeleted) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetOrganizationsResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForOrganizations := "[]Organization{"
	for _, f := range this.Organizations {
		repeatedStringForOrganizations += strings.Replace(strings.Replace(f.String(), "Organization", "Organization", 1), `&`, ``, 1) + ","
	}
	repeatedStringForOrganizations += "}"
	s := strings.Join([]string{`&GetOrganizationsResponse{`,
		`Organizations:` + repeatedStringForOrganizations + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetBillableOrganizationsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetBillableOrganizationsRequest{`,
		`Now:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Now), "Timestamp", "timestamp.Timestamp", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetBillableOrganizationsResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForOrganizations := "[]Organization{"
	for _, f := range this.Organizations {
		repeatedStringForOrganizations += strings.Replace(strings.Replace(f.String(), "Organization", "Organization", 1), `&`, ``, 1) + ","
	}
	repeatedStringForOrganizations += "}"
	s := strings.Join([]string{`&GetBillableOrganizationsResponse{`,
		`Organizations:` + repeatedStringForOrganizations + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetTrialOrganizationsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetTrialOrganizationsRequest{`,
		`Now:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Now), "Timestamp", "timestamp.Timestamp", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetTrialOrganizationsResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForOrganizations := "[]Organization{"
	for _, f := range this.Organizations {
		repeatedStringForOrganizations += strings.Replace(strings.Replace(f.String(), "Organization", "Organization", 1), `&`, ``, 1) + ","
	}
	repeatedStringForOrganizations += "}"
	s := strings.Join([]string{`&GetTrialOrganizationsResponse{`,
		`Organizations:` + repeatedStringForOrganizations + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetDelinquentOrganizationsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetDelinquentOrganizationsRequest{`,
		`Now:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Now), "Timestamp", "timestamp.Timestamp", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetDelinquentOrganizationsResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForOrganizations := "[]Organization{"
	for _, f := range this.Organizations {
		repeatedStringForOrganizations += strings.Replace(strings.Replace(f.String(), "Organization", "Organization", 1), `&`, ``, 1) + ","
	}
	repeatedStringForOrganizations += "}"
	s := strings.Join([]string{`&GetDelinquentOrganizationsResponse{`,
		`Organizations:` + repeatedStringForOrganizations + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetOrganizationRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetOrganizationRequest{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetOrganizationRequest_ExternalID) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetOrganizationRequest_ExternalID{`,
		`ExternalID:` + fmt.Sprintf("%v", this.ExternalID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetOrganizationRequest_GCPExternalAccountID) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetOrganizationRequest_GCPExternalAccountID{`,
		`GCPExternalAccountID:` + fmt.Sprintf("%v", this.GCPExternalAccountID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetOrganizationRequest_InternalID) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetOrganizationRequest_InternalID{`,
		`InternalID:` + fmt.Sprintf("%v", this.InternalID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetOrganizationResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetOrganizationResponse{`,
		`Organization:` + strings.Replace(strings.Replace(this.Organization.String(), "Organization", "Organization", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Organization) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Organization{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`ExternalID:` + fmt.Sprintf("%v", this.ExternalID) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ProbeToken:` + fmt.Sprintf("%v", this.ProbeToken) + `,`,
		`CreatedAt:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.CreatedAt), "Timestamp", "timestamp.Timestamp", 1), `&`, ``, 1) + `,`,
		`FeatureFlags:` + fmt.Sprintf("%v", this.FeatureFlags) + `,`,
		`RefuseDataAccess:` + fmt.Sprintf("%v", this.RefuseDataAccess) + `,`,
		`RefuseDataUpload:` + fmt.Sprintf("%v", this.RefuseDataUpload) + `,`,
		`FirstSeenConnectedAt:` + strings.Replace(fmt.Sprintf("%v", this.FirstSeenConnectedAt), "Timestamp", "timestamp.Timestamp", 1) + `,`,
		`Platform:` + fmt.Sprintf("%v", this.Platform) + `,`,
		`Environment:` + fmt.Sprintf("%v", this.Environment) + `,`,
		`TrialExpiresAt:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.TrialExpiresAt), "Timestamp", "timestamp.Timestamp", 1), `&`, ``, 1) + `,`,
		`ZuoraAccountNumber:` + fmt.Sprintf("%v", this.ZuoraAccountNumber) + `,`,
		`ZuoraAccountCreatedAt:` + strings.Replace(fmt.Sprintf("%v", this.ZuoraAccountCreatedAt), "Timestamp", "timestamp.Timestamp", 1) + `,`,
		`TrialPendingExpiryNotifiedAt:` + strings.Replace(fmt.Sprintf("%v", this.TrialPendingExpiryNotifiedAt), "Timestamp", "timestamp.Timestamp", 1) + `,`,
		`TrialExpiredNotifiedAt:` + strings.Replace(fmt.Sprintf("%v", this.TrialExpiredNotifiedAt), "Timestamp", "timestamp.Timestamp", 1) + `,`,
		`GCP:` + strings.Replace(this.GCP.String(), "GoogleCloudPlatform", "GoogleCloudPlatform", 1) + `,`,
		`TeamID:` + fmt.Sprintf("%v", this.TeamID) + `,`,
		`TeamExternalID:` + fmt.Sprintf("%v", this.TeamExternalID) + `,`,
		`DeletedAt:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.DeletedAt), "Timestamp", "timestamp.Timestamp", 1), `&`, ``, 1) + `,`,
		`Cleanup:` + fmt.Sprintf("%v", this.Cleanup) + `,`,
		`FirstSeenFluxConnectedAt:` + strings.Replace(fmt.Sprintf("%v", this.FirstSeenFluxConnectedAt), "Timestamp", "timestamp.Timestamp", 1) + `,`,
		`FirstSeenNetConnectedAt:` + strings.Replace(fmt.Sprintf("%v", this.FirstSeenNetConnectedAt), "Timestamp", "timestamp.Timestamp", 1) + `,`,
		`FirstSeenPromConnectedAt:` + strings.Replace(fmt.Sprintf("%v", this.FirstSeenPromConnectedAt), "Timestamp", "timestamp.Timestamp", 1) + `,`,
		`FirstSeenScopeConnectedAt:` + strings.Replace(fmt.Sprintf("%v", this.FirstSeenScopeConnectedAt), "Timestamp", "timestamp.Timestamp", 1) + `,`,
		`RefuseDataReason:` + fmt.Sprintf("%v", this.RefuseDataReason) + `,`,
		`LastSentWeeklyReportAt:` + strings.Replace(fmt.Sprintf("%v", this.LastSentWeeklyReportAt), "Timestamp", "timestamp.Timestamp", 1) + `,`,
		`PlatformVersion:` + fmt.Sprintf("%v", this.PlatformVersion) + `,`,
		`DeletedBy:` + fmt.Sprintf("%v", this.DeletedBy) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GoogleCloudPlatform) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GoogleCloudPlatform{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`ExternalAccountID:` + fmt.Sprintf("%v", this.ExternalAccountID) + `,`,
		`Activated:` + fmt.Sprintf("%v", this.Activated) + `,`,
		`CreatedAt:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.CreatedAt), "Timestamp", "timestamp.Timestamp", 1), `&`, ``, 1) + `,`,
		`ConsumerID:` + fmt.Sprintf("%v", this.ConsumerID) + `,`,
		`SubscriptionName:` + fmt.Sprintf("%v", this.SubscriptionName) + `,`,
		`SubscriptionLevel:` + fmt.Sprintf("%v", this.SubscriptionLevel) + `,`,
		`SubscriptionStatus:` + fmt.Sprintf("%v", this.SubscriptionStatus) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetGCPRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetGCPRequest{`,
		`ExternalAccountID:` + fmt.Sprintf("%v", this.ExternalAccountID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetGCPResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetGCPResponse{`,
		`GCP:` + strings.Replace(strings.Replace(this.GCP.String(), "GoogleCloudPlatform", "GoogleCloudPlatform", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateGCPRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateGCPRequest{`,
		`GCP:` + strings.Replace(this.GCP.String(), "GoogleCloudPlatform", "GoogleCloudPlatform", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateGCPResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateGCPResponse{`,
		`}`,
	}, "")
	return s
}
func (this *SetOrganizationZuoraAccountRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SetOrganizationZuoraAccountRequest{`,
		`ExternalID:` + fmt.Sprintf("%v", this.ExternalID) + `,`,
		`Number:` + fmt.Sprintf("%v", this.Number) + `,`,
		`CreatedAt:` + strings.Replace(fmt.Sprintf("%v", this.CreatedAt), "Timestamp", "timestamp.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SetOrganizationZuoraAccountResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SetOrganizationZuoraAccountResponse{`,
		`}`,
	}, "")
	return s
}
func (this *SetOrganizationFlagRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SetOrganizationFlagRequest{`,
		`ExternalID:` + fmt.Sprintf("%v", this.ExternalID) + `,`,
		`Flag:` + fmt.Sprintf("%v", this.Flag) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SetOrganizationFlagResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SetOrganizationFlagResponse{`,
		`}`,
	}, "")
	return s
}
func (this *GetUserRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetUserRequest{`,
		`UserID:` + fmt.Sprintf("%v", this.UserID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetUserResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetUserResponse{`,
		`User:` + strings.Replace(strings.Replace(this.User.String(), "User", "User", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetOrganizationsReadyForWeeklyReportRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetOrganizationsReadyForWeeklyReportRequest{`,
		`Now:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Now), "Timestamp", "timestamp.Timestamp", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetOrganizationsReadyForWeeklyReportResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForOrganizations := "[]Organization{"
	for _, f := range this.Organizations {
		repeatedStringForOrganizations += strings.Replace(strings.Replace(f.String(), "Organization", "Organization", 1), `&`, ``, 1) + ","
	}
	repeatedStringForOrganizations += "}"
	s := strings.Join([]string{`&GetOrganizationsReadyForWeeklyReportResponse{`,
		`Organizations:` + repeatedStringForOrganizations + `,`,
		`}`,
	}, "")
	return s
}
func (this *SendOutWeeklyReportRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SendOutWeeklyReportRequest{`,
		`Now:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Now), "Timestamp", "timestamp.Timestamp", 1), `&`, ``, 1) + `,`,
		`ExternalID:` + fmt.Sprintf("%v", this.ExternalID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SendOutWeeklyReportResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SendOutWeeklyReportResponse{`,
		`}`,
	}, "")
	return s
}
func (this *User) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&User{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`Email:` + fmt.Sprintf("%v", this.Email) + `,`,
		`Token:` + fmt.Sprintf("%v", this.Token) + `,`,
		`TokenCreatedAt:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.TokenCreatedAt), "Timestamp", "timestamp.Timestamp", 1), `&`, ``, 1) + `,`,
		`FirstLoginAt:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.FirstLoginAt), "Timestamp", "timestamp.Timestamp", 1), `&`, ``, 1) + `,`,
		`CreatedAt:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.CreatedAt), "Timestamp", "timestamp.Timestamp", 1), `&`, ``, 1) + `,`,
		`Admin:` + fmt.Sprintf("%v", this.Admin) + `,`,
		`LastLoginAt:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.LastLoginAt), "Timestamp", "timestamp.Timestamp", 1), `&`, ``, 1) + `,`,
		`Company:` + fmt.Sprintf("%v", this.Company) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`FirstName:` + fmt.Sprintf("%v", this.FirstName) + `,`,
		`LastName:` + fmt.Sprintf("%v", this.LastName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NotifyTrialPendingExpiryRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NotifyTrialPendingExpiryRequest{`,
		`ExternalID:` + fmt.Sprintf("%v", this.ExternalID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NotifyTrialPendingExpiryResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NotifyTrialPendingExpiryResponse{`,
		`}`,
	}, "")
	return s
}
func (this *NotifyTrialExpiredRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NotifyTrialExpiredRequest{`,
		`ExternalID:` + fmt.Sprintf("%v", this.ExternalID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NotifyTrialExpiredResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NotifyTrialExpiredResponse{`,
		`}`,
	}, "")
	return s
}
func (this *NotifyRefuseDataUploadRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NotifyRefuseDataUploadRequest{`,
		`ExternalID:` + fmt.Sprintf("%v", this.ExternalID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NotifyRefuseDataUploadResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NotifyRefuseDataUploadResponse{`,
		`}`,
	}, "")
	return s
}
func (this *Team) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Team{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ExternalID:` + fmt.Sprintf("%v", this.ExternalID) + `,`,
		`ZuoraAccountNumber:` + fmt.Sprintf("%v", this.ZuoraAccountNumber) + `,`,
		`ZuoraAccountCreatedAt:` + strings.Replace(fmt.Sprintf("%v", this.ZuoraAccountCreatedAt), "Timestamp", "timestamp.Timestamp", 1) + `,`,
		`TrialExpiresAt:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.TrialExpiresAt), "Timestamp", "timestamp.Timestamp", 1), `&`, ``, 1) + `,`,
		`TrialPendingExpiryNotifiedAt:` + strings.Replace(fmt.Sprintf("%v", this.TrialPendingExpiryNotifiedAt), "Timestamp", "timestamp.Timestamp", 1) + `,`,
		`TrialExpiredNotifiedAt:` + strings.Replace(fmt.Sprintf("%v", this.TrialExpiredNotifiedAt), "Timestamp", "timestamp.Timestamp", 1) + `,`,
		`CreatedAt:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.CreatedAt), "Timestamp", "timestamp.Timestamp", 1), `&`, ``, 1) + `,`,
		`DeletedAt:` + strings.Replace(fmt.Sprintf("%v", this.DeletedAt), "Timestamp", "timestamp.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Empty) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Empty{`,
		`}`,
	}, "")
	return s
}
func (this *Summary) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForEntries := "[]*SummaryEntry{"
	for _, f := range this.Entries {
		repeatedStringForEntries += strings.Replace(f.String(), "SummaryEntry", "SummaryEntry", 1) + ","
	}
	repeatedStringForEntries += "}"
	s := strings.Join([]string{`&Summary{`,
		`Entries:` + repeatedStringForEntries + `,`,
		`}`,
	}, "")
	return s
}
func (this *SummaryEntry) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SummaryEntry{`,
		`TeamExternalID:` + fmt.Sprintf("%v", this.TeamExternalID) + `,`,
		`TeamName:` + fmt.Sprintf("%v", this.TeamName) + `,`,
		`OrgID:` + fmt.Sprintf("%v", this.OrgID) + `,`,
		`OrgExternalID:` + fmt.Sprintf("%v", this.OrgExternalID) + `,`,
		`OrgName:` + fmt.Sprintf("%v", this.OrgName) + `,`,
		`Emails:` + fmt.Sprintf("%v", this.Emails) + `,`,
		`OrgCreatedAt:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.OrgCreatedAt), "Timestamp", "timestamp.Timestamp", 1), `&`, ``, 1) + `,`,
		`FirstSeenConnectedAt:` + strings.Replace(fmt.Sprintf("%v", this.FirstSeenConnectedAt), "Timestamp", "timestamp.Timestamp", 1) + `,`,
		`Platform:` + fmt.Sprintf("%v", this.Platform) + `,`,
		`Environment:` + fmt.Sprintf("%v", this.Environment) + `,`,
		`TrialExpiresAt:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.TrialExpiresAt), "Timestamp", "timestamp.Timestamp", 1), `&`, ``, 1) + `,`,
		`TrialPendingExpiryNotifiedAt:` + strings.Replace(fmt.Sprintf("%v", this.TrialPendingExpiryNotifiedAt), "Timestamp", "timestamp.Timestamp", 1) + `,`,
		`TrialExpiredNotifiedAt:` + strings.Replace(fmt.Sprintf("%v", this.TrialExpiredNotifiedAt), "Timestamp", "timestamp.Timestamp", 1) + `,`,
		`BillingEnabled:` + fmt.Sprintf("%v", this.BillingEnabled) + `,`,
		`RefuseDataAccess:` + fmt.Sprintf("%v", this.RefuseDataAccess) + `,`,
		`RefuseDataUpload:` + fmt.Sprintf("%v", this.RefuseDataUpload) + `,`,
		`ZuoraAccountNumber:` + fmt.Sprintf("%v", this.ZuoraAccountNumber) + `,`,
		`ZuoraAccountCreatedAt:` + strings.Replace(fmt.Sprintf("%v", this.ZuoraAccountCreatedAt), "Timestamp", "timestamp.Timestamp", 1) + `,`,
		`GCPAccountExternalID:` + fmt.Sprintf("%v", this.GCPAccountExternalID) + `,`,
		`GCPAccountCreatedAt:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.GCPAccountCreatedAt), "Timestamp", "timestamp.Timestamp", 1), `&`, ``, 1) + `,`,
		`GCPAccountSubscriptionLevel:` + fmt.Sprintf("%v", this.GCPAccountSubscriptionLevel) + `,`,
		`GCPAccountSubscriptionStatus:` + fmt.Sprintf("%v", this.GCPAccountSubscriptionStatus) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Webhook) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Webhook{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`OrganizationID:` + fmt.Sprintf("%v", this.OrganizationID) + `,`,
		`IntegrationType:` + fmt.Sprintf("%v", this.IntegrationType) + `,`,
		`SecretID:` + fmt.Sprintf("%v", this.SecretID) + `,`,
		`SecretSigningKey:` + fmt.Sprintf("%v", this.SecretSigningKey) + `,`,
		`CreatedAt:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.CreatedAt), "Timestamp", "timestamp.Timestamp", 1), `&`, ``, 1) + `,`,
		`DeletedAt:` + strings.Replace(fmt.Sprintf("%v", this.DeletedAt), "Timestamp", "timestamp.Timestamp", 1) + `,`,
		`FirstSeenAt:` + strings.Replace(fmt.Sprintf("%v", this.FirstSeenAt), "Timestamp", "timestamp.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LookupOrganizationWebhookUsingSecretIDRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LookupOrganizationWebhookUsingSecretIDRequest{`,
		`SecretID:` + fmt.Sprintf("%v", this.SecretID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LookupOrganizationWebhookUsingSecretIDResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LookupOrganizationWebhookUsingSecretIDResponse{`,
		`Webhook:` + strings.Replace(this.Webhook.String(), "Webhook", "Webhook", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SetOrganizationWebhookFirstSeenAtRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SetOrganizationWebhookFirstSeenAtRequest{`,
		`SecretID:` + fmt.Sprintf("%v", this.SecretID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SetOrganizationWebhookFirstSeenAtResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SetOrganizationWebhookFirstSeenAtResponse{`,
		`FirstSeenAt:` + strings.Replace(fmt.Sprintf("%v", this.FirstSeenAt), "Timestamp", "timestamp.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *InformOrganizationBillingConfiguredRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InformOrganizationBillingConfiguredRequest{`,
		`ExternalID:` + fmt.Sprintf("%v", this.ExternalID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Permission) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Permission{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Role) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Role{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequireTeamMemberPermissionToRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequireTeamMemberPermissionToRequest{`,
		`UserID:` + fmt.Sprintf("%v", this.UserID) + `,`,
		`TeamID:` + fmt.Sprintf("%v", this.TeamID) + `,`,
		`PermissionID:` + fmt.Sprintf("%v", this.PermissionID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequireTeamMemberPermissionToRequest_TeamExternalID) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequireTeamMemberPermissionToRequest_TeamExternalID{`,
		`TeamExternalID:` + fmt.Sprintf("%v", this.TeamExternalID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequireTeamMemberPermissionToRequest_TeamInternalID) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequireTeamMemberPermissionToRequest_TeamInternalID{`,
		`TeamInternalID:` + fmt.Sprintf("%v", this.TeamInternalID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequireOrgMemberPermissionToRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequireOrgMemberPermissionToRequest{`,
		`UserID:` + fmt.Sprintf("%v", this.UserID) + `,`,
		`OrgID:` + fmt.Sprintf("%v", this.OrgID) + `,`,
		`PermissionID:` + fmt.Sprintf("%v", this.PermissionID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequireOrgMemberPermissionToRequest_OrgExternalID) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequireOrgMemberPermissionToRequest_OrgExternalID{`,
		`OrgExternalID:` + fmt.Sprintf("%v", this.OrgExternalID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequireOrgMemberPermissionToRequest_OrgInternalID) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequireOrgMemberPermissionToRequest_OrgInternalID{`,
		`OrgInternalID:` + fmt.Sprintf("%v", this.OrgInternalID) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringUsers(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *LookupOrgRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LookupOrgRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LookupOrgRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cookie", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cookie = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgExternalID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrgExternalID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorizeFor", wireType)
			}
			m.AuthorizeFor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuthorizeFor |= AuthorizedAction(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LookupOrgResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LookupOrgResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LookupOrgResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrganizationID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeatureFlags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeatureFlags = append(m.FeatureFlags, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LookupUsingTokenRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LookupUsingTokenRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LookupUsingTokenRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorizeFor", wireType)
			}
			m.AuthorizeFor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuthorizeFor |= AuthorizedAction(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LookupUsingTokenResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LookupUsingTokenResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LookupUsingTokenResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrganizationID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeatureFlags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeatureFlags = append(m.FeatureFlags, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LookupAdminRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LookupAdminRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LookupAdminRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cookie", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cookie = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LookupAdminResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LookupAdminResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LookupAdminResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdminID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LookupUserRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LookupUserRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LookupUserRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cookie", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cookie = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LookupUserResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LookupUserResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LookupUserResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetOrganizationsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetOrganizationsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetOrganizationsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Query = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageNumber", wireType)
			}
			m.PageNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageNumber |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeDeleted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IncludeDeleted = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetOrganizationsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetOrganizationsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetOrganizationsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Organizations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Organizations = append(m.Organizations, Organization{})
			if err := m.Organizations[len(m.Organizations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetBillableOrganizationsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBillableOrganizationsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBillableOrganizationsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Now", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Now, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetBillableOrganizationsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBillableOrganizationsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBillableOrganizationsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Organizations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Organizations = append(m.Organizations, Organization{})
			if err := m.Organizations[len(m.Organizations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTrialOrganizationsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTrialOrganizationsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTrialOrganizationsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Now", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Now, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTrialOrganizationsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTrialOrganizationsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTrialOrganizationsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Organizations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Organizations = append(m.Organizations, Organization{})
			if err := m.Organizations[len(m.Organizations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDelinquentOrganizationsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDelinquentOrganizationsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDelinquentOrganizationsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Now", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Now, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDelinquentOrganizationsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDelinquentOrganizationsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDelinquentOrganizationsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Organizations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Organizations = append(m.Organizations, Organization{})
			if err := m.Organizations[len(m.Organizations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetOrganizationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetOrganizationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetOrganizationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = &GetOrganizationRequest_ExternalID{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GCPExternalAccountID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = &GetOrganizationRequest_GCPExternalAccountID{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InternalID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = &GetOrganizationRequest_InternalID{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetOrganizationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetOrganizationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetOrganizationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Organization", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Organization.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Organization) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Organization: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Organization: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProbeToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProbeToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeatureFlags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeatureFlags = append(m.FeatureFlags, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefuseDataAccess", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RefuseDataAccess = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefuseDataUpload", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RefuseDataUpload = bool(v != 0)
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstSeenConnectedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FirstSeenConnectedAt == nil {
				m.FirstSeenConnectedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.FirstSeenConnectedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Platform = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Environment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Environment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrialExpiresAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.TrialExpiresAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZuoraAccountNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ZuoraAccountNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZuoraAccountCreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ZuoraAccountCreatedAt == nil {
				m.ZuoraAccountCreatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.ZuoraAccountCreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrialPendingExpiryNotifiedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TrialPendingExpiryNotifiedAt == nil {
				m.TrialPendingExpiryNotifiedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.TrialPendingExpiryNotifiedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrialExpiredNotifiedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TrialExpiredNotifiedAt == nil {
				m.TrialExpiredNotifiedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.TrialExpiredNotifiedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GCP", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GCP == nil {
				m.GCP = &GoogleCloudPlatform{}
			}
			if err := m.GCP.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TeamID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamExternalID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TeamExternalID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.DeletedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cleanup", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Cleanup = bool(v != 0)
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstSeenFluxConnectedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FirstSeenFluxConnectedAt == nil {
				m.FirstSeenFluxConnectedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.FirstSeenFluxConnectedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstSeenNetConnectedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FirstSeenNetConnectedAt == nil {
				m.FirstSeenNetConnectedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.FirstSeenNetConnectedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstSeenPromConnectedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FirstSeenPromConnectedAt == nil {
				m.FirstSeenPromConnectedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.FirstSeenPromConnectedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstSeenScopeConnectedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FirstSeenScopeConnectedAt == nil {
				m.FirstSeenScopeConnectedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.FirstSeenScopeConnectedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefuseDataReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RefuseDataReason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastSentWeeklyReportAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastSentWeeklyReportAt == nil {
				m.LastSentWeeklyReportAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.LastSentWeeklyReportAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlatformVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlatformVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletedBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeletedBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GoogleCloudPlatform) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GoogleCloudPlatform: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GoogleCloudPlatform: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalAccountID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalAccountID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Activated", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Activated = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsumerID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConsumerID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubscriptionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubscriptionName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubscriptionLevel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubscriptionLevel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubscriptionStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubscriptionStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetGCPRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetGCPRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetGCPRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalAccountID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalAccountID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetGCPResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetGCPResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetGCPResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GCP", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GCP.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateGCPRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateGCPRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateGCPRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GCP", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GCP == nil {
				m.GCP = &GoogleCloudPlatform{}
			}
			if err := m.GCP.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateGCPResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateGCPResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateGCPResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetOrganizationZuoraAccountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetOrganizationZuoraAccountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetOrganizationZuoraAccountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Number", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Number = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetOrganizationZuoraAccountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetOrganizationZuoraAccountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetOrganizationZuoraAccountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetOrganizationFlagRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetOrganizationFlagRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetOrganizationFlagRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Flag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Value = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetOrganizationFlagResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetOrganizationFlagResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetOrganizationFlagResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.User.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetOrganizationsReadyForWeeklyReportRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetOrganizationsReadyForWeeklyReportRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetOrganizationsReadyForWeeklyReportRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Now", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Now, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetOrganizationsReadyForWeeklyReportResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetOrganizationsReadyForWeeklyReportResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetOrganizationsReadyForWeeklyReportResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Organizations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Organizations = append(m.Organizations, Organization{})
			if err := m.Organizations[len(m.Organizations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SendOutWeeklyReportRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendOutWeeklyReportRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendOutWeeklyReportRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Now", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Now, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SendOutWeeklyReportResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendOutWeeklyReportResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendOutWeeklyReportResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: User: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: User: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenCreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.TokenCreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstLoginAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.FirstLoginAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admin", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Admin = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastLoginAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.LastLoginAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Company", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Company = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NotifyTrialPendingExpiryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NotifyTrialPendingExpiryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NotifyTrialPendingExpiryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NotifyTrialPendingExpiryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NotifyTrialPendingExpiryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NotifyTrialPendingExpiryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NotifyTrialExpiredRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NotifyTrialExpiredRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NotifyTrialExpiredRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NotifyTrialExpiredResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NotifyTrialExpiredResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NotifyTrialExpiredResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NotifyRefuseDataUploadRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NotifyRefuseDataUploadRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NotifyRefuseDataUploadRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NotifyRefuseDataUploadResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NotifyRefuseDataUploadResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NotifyRefuseDataUploadResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Team) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Team: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Team: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZuoraAccountNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ZuoraAccountNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZuoraAccountCreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ZuoraAccountCreatedAt == nil {
				m.ZuoraAccountCreatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.ZuoraAccountCreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrialExpiresAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.TrialExpiresAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrialPendingExpiryNotifiedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TrialPendingExpiryNotifiedAt == nil {
				m.TrialPendingExpiryNotifiedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.TrialPendingExpiryNotifiedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrialExpiredNotifiedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TrialExpiredNotifiedAt == nil {
				m.TrialExpiredNotifiedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.TrialExpiredNotifiedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DeletedAt == nil {
				m.DeletedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.DeletedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Empty) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Empty: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Empty: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Summary) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Summary: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Summary: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entries = append(m.Entries, &SummaryEntry{})
			if err := m.Entries[len(m.Entries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SummaryEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SummaryEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SummaryEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamExternalID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TeamExternalID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TeamName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrgID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgExternalID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrgExternalID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrgName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Emails", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Emails = append(m.Emails, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgCreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.OrgCreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstSeenConnectedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FirstSeenConnectedAt == nil {
				m.FirstSeenConnectedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.FirstSeenConnectedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Platform = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Environment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Environment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrialExpiresAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.TrialExpiresAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrialPendingExpiryNotifiedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TrialPendingExpiryNotifiedAt == nil {
				m.TrialPendingExpiryNotifiedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.TrialPendingExpiryNotifiedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrialExpiredNotifiedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TrialExpiredNotifiedAt == nil {
				m.TrialExpiredNotifiedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.TrialExpiredNotifiedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BillingEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BillingEnabled = bool(v != 0)
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefuseDataAccess", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RefuseDataAccess = bool(v != 0)
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefuseDataUpload", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RefuseDataUpload = bool(v != 0)
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZuoraAccountNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ZuoraAccountNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZuoraAccountCreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ZuoraAccountCreatedAt == nil {
				m.ZuoraAccountCreatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.ZuoraAccountCreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GCPAccountExternalID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GCPAccountExternalID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GCPAccountCreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.GCPAccountCreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GCPAccountSubscriptionLevel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GCPAccountSubscriptionLevel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GCPAccountSubscriptionStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GCPAccountSubscriptionStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Webhook) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Webhook: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Webhook: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrganizationID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntegrationType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IntegrationType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecretID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecretID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecretSigningKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecretSigningKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DeletedAt == nil {
				m.DeletedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.DeletedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstSeenAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FirstSeenAt == nil {
				m.FirstSeenAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.FirstSeenAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LookupOrganizationWebhookUsingSecretIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LookupOrganizationWebhookUsingSecretIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LookupOrganizationWebhookUsingSecretIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecretID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecretID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LookupOrganizationWebhookUsingSecretIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LookupOrganizationWebhookUsingSecretIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LookupOrganizationWebhookUsingSecretIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Webhook", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Webhook == nil {
				m.Webhook = &Webhook{}
			}
			if err := m.Webhook.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetOrganizationWebhookFirstSeenAtRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetOrganizationWebhookFirstSeenAtRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetOrganizationWebhookFirstSeenAtRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecretID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecretID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetOrganizationWebhookFirstSeenAtResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetOrganizationWebhookFirstSeenAtResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetOrganizationWebhookFirstSeenAtResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstSeenAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FirstSeenAt == nil {
				m.FirstSeenAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.FirstSeenAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InformOrganizationBillingConfiguredRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InformOrganizationBillingConfiguredRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InformOrganizationBillingConfiguredRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Permission) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Permission: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Permission: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Role) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Role: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Role: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequireTeamMemberPermissionToRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequireTeamMemberPermissionToRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequireTeamMemberPermissionToRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamExternalID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TeamID = &RequireTeamMemberPermissionToRequest_TeamExternalID{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PermissionID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PermissionID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamInternalID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TeamID = &RequireTeamMemberPermissionToRequest_TeamInternalID{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequireOrgMemberPermissionToRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequireOrgMemberPermissionToRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequireOrgMemberPermissionToRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgExternalID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrgID = &RequireOrgMemberPermissionToRequest_OrgExternalID{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PermissionID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PermissionID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgInternalID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrgID = &RequireOrgMemberPermissionToRequest_OrgInternalID{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipUsers(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthUsers
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupUsers
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthUsers
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthUsers        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowUsers          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupUsers = fmt.Errorf("proto: unexpected end of group")
)
