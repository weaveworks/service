// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: users.proto

/*
	Package users is a generated protocol buffer package.

	It is generated from these files:
		users.proto

	It has these top-level messages:
		LookupOrgRequest
		LookupOrgResponse
		LookupUsingTokenRequest
		LookupUsingTokenResponse
		LookupAdminRequest
		LookupAdminResponse
		LookupUserRequest
		LookupUserResponse
		GetOrganizationsRequest
		GetOrganizationsResponse
		GetBillableOrganizationsRequest
		GetBillableOrganizationsResponse
		GetTrialOrganizationsRequest
		GetTrialOrganizationsResponse
		GetDelinquentOrganizationsRequest
		GetDelinquentOrganizationsResponse
		GetOrganizationRequest
		GetOrganizationResponse
		Organization
		GoogleCloudPlatform
		GetGCPRequest
		GetGCPResponse
		UpdateGCPRequest
		UpdateGCPResponse
		SetOrganizationZuoraAccountRequest
		SetOrganizationZuoraAccountResponse
		SetOrganizationFlagRequest
		SetOrganizationFlagResponse
		GetUserRequest
		GetUserResponse
		User
		NotifyTrialPendingExpiryRequest
		NotifyTrialPendingExpiryResponse
		NotifyTrialExpiredRequest
		NotifyTrialExpiredResponse
		NotifyRefuseDataUploadRequest
		NotifyRefuseDataUploadResponse
		Team
		Empty
		Summary
		SummaryEntry
		Webhook
		LookupOrganizationWebhookUsingSecretIDRequest
		LookupOrganizationWebhookUsingSecretIDResponse
*/
package users

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/golang/protobuf/ptypes/timestamp"

import time "time"

import strconv "strconv"

import strings "strings"
import reflect "reflect"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type AuthorizedAction int32

const (
	OTHER AuthorizedAction = 0
	// Allows reading data
	INSTANCE_DATA_ACCESS AuthorizedAction = 1
	// Allows writing data
	INSTANCE_DATA_UPLOAD AuthorizedAction = 2
)

var AuthorizedAction_name = map[int32]string{
	0: "OTHER",
	1: "INSTANCE_DATA_ACCESS",
	2: "INSTANCE_DATA_UPLOAD",
}
var AuthorizedAction_value = map[string]int32{
	"OTHER":                0,
	"INSTANCE_DATA_ACCESS": 1,
	"INSTANCE_DATA_UPLOAD": 2,
}

func (AuthorizedAction) EnumDescriptor() ([]byte, []int) { return fileDescriptorUsers, []int{0} }

type LookupOrgRequest struct {
	Cookie        string           `protobuf:"bytes,1,opt,name=Cookie,proto3" json:"Cookie,omitempty"`
	OrgExternalID string           `protobuf:"bytes,2,opt,name=OrgExternalID,proto3" json:"OrgExternalID,omitempty"`
	AuthorizeFor  AuthorizedAction `protobuf:"varint,4,opt,name=AuthorizeFor,proto3,enum=users.AuthorizedAction" json:"AuthorizeFor,omitempty"`
}

func (m *LookupOrgRequest) Reset()                    { *m = LookupOrgRequest{} }
func (*LookupOrgRequest) ProtoMessage()               {}
func (*LookupOrgRequest) Descriptor() ([]byte, []int) { return fileDescriptorUsers, []int{0} }

func (m *LookupOrgRequest) GetCookie() string {
	if m != nil {
		return m.Cookie
	}
	return ""
}

func (m *LookupOrgRequest) GetOrgExternalID() string {
	if m != nil {
		return m.OrgExternalID
	}
	return ""
}

func (m *LookupOrgRequest) GetAuthorizeFor() AuthorizedAction {
	if m != nil {
		return m.AuthorizeFor
	}
	return OTHER
}

type LookupOrgResponse struct {
	OrganizationID string   `protobuf:"bytes,1,opt,name=OrganizationID,proto3" json:"organizationID,omitempty"`
	UserID         string   `protobuf:"bytes,2,opt,name=UserID,proto3" json:"userID,omitempty"`
	FeatureFlags   []string `protobuf:"bytes,3,rep,name=FeatureFlags" json:"featureFlags,omitempty"`
}

func (m *LookupOrgResponse) Reset()                    { *m = LookupOrgResponse{} }
func (*LookupOrgResponse) ProtoMessage()               {}
func (*LookupOrgResponse) Descriptor() ([]byte, []int) { return fileDescriptorUsers, []int{1} }

func (m *LookupOrgResponse) GetOrganizationID() string {
	if m != nil {
		return m.OrganizationID
	}
	return ""
}

func (m *LookupOrgResponse) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *LookupOrgResponse) GetFeatureFlags() []string {
	if m != nil {
		return m.FeatureFlags
	}
	return nil
}

type LookupUsingTokenRequest struct {
	Token        string           `protobuf:"bytes,1,opt,name=Token,proto3" json:"Token,omitempty"`
	AuthorizeFor AuthorizedAction `protobuf:"varint,2,opt,name=AuthorizeFor,proto3,enum=users.AuthorizedAction" json:"AuthorizeFor,omitempty"`
}

func (m *LookupUsingTokenRequest) Reset()                    { *m = LookupUsingTokenRequest{} }
func (*LookupUsingTokenRequest) ProtoMessage()               {}
func (*LookupUsingTokenRequest) Descriptor() ([]byte, []int) { return fileDescriptorUsers, []int{2} }

func (m *LookupUsingTokenRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *LookupUsingTokenRequest) GetAuthorizeFor() AuthorizedAction {
	if m != nil {
		return m.AuthorizeFor
	}
	return OTHER
}

type LookupUsingTokenResponse struct {
	OrganizationID string   `protobuf:"bytes,1,opt,name=OrganizationID,proto3" json:"organizationID,omitempty"`
	FeatureFlags   []string `protobuf:"bytes,2,rep,name=FeatureFlags" json:"featureFlags,omitempty"`
}

func (m *LookupUsingTokenResponse) Reset()                    { *m = LookupUsingTokenResponse{} }
func (*LookupUsingTokenResponse) ProtoMessage()               {}
func (*LookupUsingTokenResponse) Descriptor() ([]byte, []int) { return fileDescriptorUsers, []int{3} }

func (m *LookupUsingTokenResponse) GetOrganizationID() string {
	if m != nil {
		return m.OrganizationID
	}
	return ""
}

func (m *LookupUsingTokenResponse) GetFeatureFlags() []string {
	if m != nil {
		return m.FeatureFlags
	}
	return nil
}

type LookupAdminRequest struct {
	Cookie string `protobuf:"bytes,1,opt,name=Cookie,proto3" json:"Cookie,omitempty"`
}

func (m *LookupAdminRequest) Reset()                    { *m = LookupAdminRequest{} }
func (*LookupAdminRequest) ProtoMessage()               {}
func (*LookupAdminRequest) Descriptor() ([]byte, []int) { return fileDescriptorUsers, []int{4} }

func (m *LookupAdminRequest) GetCookie() string {
	if m != nil {
		return m.Cookie
	}
	return ""
}

type LookupAdminResponse struct {
	AdminID string `protobuf:"bytes,1,opt,name=AdminID,proto3" json:"adminID,omitempty"`
}

func (m *LookupAdminResponse) Reset()                    { *m = LookupAdminResponse{} }
func (*LookupAdminResponse) ProtoMessage()               {}
func (*LookupAdminResponse) Descriptor() ([]byte, []int) { return fileDescriptorUsers, []int{5} }

func (m *LookupAdminResponse) GetAdminID() string {
	if m != nil {
		return m.AdminID
	}
	return ""
}

type LookupUserRequest struct {
	Cookie string `protobuf:"bytes,1,opt,name=Cookie,proto3" json:"Cookie,omitempty"`
}

func (m *LookupUserRequest) Reset()                    { *m = LookupUserRequest{} }
func (*LookupUserRequest) ProtoMessage()               {}
func (*LookupUserRequest) Descriptor() ([]byte, []int) { return fileDescriptorUsers, []int{6} }

func (m *LookupUserRequest) GetCookie() string {
	if m != nil {
		return m.Cookie
	}
	return ""
}

type LookupUserResponse struct {
	UserID string `protobuf:"bytes,1,opt,name=UserID,proto3" json:"userID,omitempty"`
}

func (m *LookupUserResponse) Reset()                    { *m = LookupUserResponse{} }
func (*LookupUserResponse) ProtoMessage()               {}
func (*LookupUserResponse) Descriptor() ([]byte, []int) { return fileDescriptorUsers, []int{7} }

func (m *LookupUserResponse) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

// GetOrganizationsRequest requests a list of organizations.
type GetOrganizationsRequest struct {
	// Query restricts the organizations returned. If specified, will find
	// only organizations that have Query as a substring of the organization
	// name.
	Query string `protobuf:"bytes,1,opt,name=Query,proto3" json:"Query,omitempty"`
	// If 0 or less, return everything. Otherwise, return a single page of
	// implementation-dependent results (currently 30).
	PageNumber int32 `protobuf:"varint,2,opt,name=PageNumber,proto3" json:"PageNumber,omitempty"`
}

func (m *GetOrganizationsRequest) Reset()                    { *m = GetOrganizationsRequest{} }
func (*GetOrganizationsRequest) ProtoMessage()               {}
func (*GetOrganizationsRequest) Descriptor() ([]byte, []int) { return fileDescriptorUsers, []int{8} }

func (m *GetOrganizationsRequest) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

func (m *GetOrganizationsRequest) GetPageNumber() int32 {
	if m != nil {
		return m.PageNumber
	}
	return 0
}

type GetOrganizationsResponse struct {
	Organizations []Organization `protobuf:"bytes,1,rep,name=Organizations" json:"Organizations"`
}

func (m *GetOrganizationsResponse) Reset()                    { *m = GetOrganizationsResponse{} }
func (*GetOrganizationsResponse) ProtoMessage()               {}
func (*GetOrganizationsResponse) Descriptor() ([]byte, []int) { return fileDescriptorUsers, []int{9} }

func (m *GetOrganizationsResponse) GetOrganizations() []Organization {
	if m != nil {
		return m.Organizations
	}
	return nil
}

// An organization is billable if its trial period has expired.
type GetBillableOrganizationsRequest struct {
	// The current time for the purposes of determining whether the trial
	// period has expired.
	Now time.Time `protobuf:"bytes,1,opt,name=Now,stdtime" json:"Now"`
}

func (m *GetBillableOrganizationsRequest) Reset()      { *m = GetBillableOrganizationsRequest{} }
func (*GetBillableOrganizationsRequest) ProtoMessage() {}
func (*GetBillableOrganizationsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorUsers, []int{10}
}

func (m *GetBillableOrganizationsRequest) GetNow() time.Time {
	if m != nil {
		return m.Now
	}
	return time.Time{}
}

type GetBillableOrganizationsResponse struct {
	Organizations []Organization `protobuf:"bytes,1,rep,name=Organizations" json:"Organizations"`
}

func (m *GetBillableOrganizationsResponse) Reset()      { *m = GetBillableOrganizationsResponse{} }
func (*GetBillableOrganizationsResponse) ProtoMessage() {}
func (*GetBillableOrganizationsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorUsers, []int{11}
}

func (m *GetBillableOrganizationsResponse) GetOrganizations() []Organization {
	if m != nil {
		return m.Organizations
	}
	return nil
}

type GetTrialOrganizationsRequest struct {
	// The current time for the purposes of determining whether the trial
	// period has expired.
	Now time.Time `protobuf:"bytes,1,opt,name=Now,stdtime" json:"Now"`
}

func (m *GetTrialOrganizationsRequest) Reset()      { *m = GetTrialOrganizationsRequest{} }
func (*GetTrialOrganizationsRequest) ProtoMessage() {}
func (*GetTrialOrganizationsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorUsers, []int{12}
}

func (m *GetTrialOrganizationsRequest) GetNow() time.Time {
	if m != nil {
		return m.Now
	}
	return time.Time{}
}

type GetTrialOrganizationsResponse struct {
	Organizations []Organization `protobuf:"bytes,1,rep,name=Organizations" json:"Organizations"`
}

func (m *GetTrialOrganizationsResponse) Reset()      { *m = GetTrialOrganizationsResponse{} }
func (*GetTrialOrganizationsResponse) ProtoMessage() {}
func (*GetTrialOrganizationsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorUsers, []int{13}
}

func (m *GetTrialOrganizationsResponse) GetOrganizations() []Organization {
	if m != nil {
		return m.Organizations
	}
	return nil
}

// An organization is delinquent if its trial period is expired and no
// associated payment account exists.
type GetDelinquentOrganizationsRequest struct {
	// The current time for the purposes of determining whether the trial
	// period has expired.
	Now time.Time `protobuf:"bytes,1,opt,name=Now,stdtime" json:"Now"`
}

func (m *GetDelinquentOrganizationsRequest) Reset()      { *m = GetDelinquentOrganizationsRequest{} }
func (*GetDelinquentOrganizationsRequest) ProtoMessage() {}
func (*GetDelinquentOrganizationsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorUsers, []int{14}
}

func (m *GetDelinquentOrganizationsRequest) GetNow() time.Time {
	if m != nil {
		return m.Now
	}
	return time.Time{}
}

type GetDelinquentOrganizationsResponse struct {
	Organizations []Organization `protobuf:"bytes,1,rep,name=Organizations" json:"Organizations"`
}

func (m *GetDelinquentOrganizationsResponse) Reset()      { *m = GetDelinquentOrganizationsResponse{} }
func (*GetDelinquentOrganizationsResponse) ProtoMessage() {}
func (*GetDelinquentOrganizationsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorUsers, []int{15}
}

func (m *GetDelinquentOrganizationsResponse) GetOrganizations() []Organization {
	if m != nil {
		return m.Organizations
	}
	return nil
}

type GetOrganizationRequest struct {
	// Types that are valid to be assigned to ID:
	//	*GetOrganizationRequest_ExternalID
	//	*GetOrganizationRequest_GCPExternalAccountID
	//	*GetOrganizationRequest_InternalID
	ID isGetOrganizationRequest_ID `protobuf_oneof:"ID"`
}

func (m *GetOrganizationRequest) Reset()                    { *m = GetOrganizationRequest{} }
func (*GetOrganizationRequest) ProtoMessage()               {}
func (*GetOrganizationRequest) Descriptor() ([]byte, []int) { return fileDescriptorUsers, []int{16} }

type isGetOrganizationRequest_ID interface {
	isGetOrganizationRequest_ID()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GetOrganizationRequest_ExternalID struct {
	ExternalID string `protobuf:"bytes,1,opt,name=ExternalID,proto3,oneof"`
}
type GetOrganizationRequest_GCPExternalAccountID struct {
	GCPExternalAccountID string `protobuf:"bytes,2,opt,name=GCPExternalAccountID,proto3,oneof"`
}
type GetOrganizationRequest_InternalID struct {
	InternalID string `protobuf:"bytes,3,opt,name=InternalID,proto3,oneof"`
}

func (*GetOrganizationRequest_ExternalID) isGetOrganizationRequest_ID()           {}
func (*GetOrganizationRequest_GCPExternalAccountID) isGetOrganizationRequest_ID() {}
func (*GetOrganizationRequest_InternalID) isGetOrganizationRequest_ID()           {}

func (m *GetOrganizationRequest) GetID() isGetOrganizationRequest_ID {
	if m != nil {
		return m.ID
	}
	return nil
}

func (m *GetOrganizationRequest) GetExternalID() string {
	if x, ok := m.GetID().(*GetOrganizationRequest_ExternalID); ok {
		return x.ExternalID
	}
	return ""
}

func (m *GetOrganizationRequest) GetGCPExternalAccountID() string {
	if x, ok := m.GetID().(*GetOrganizationRequest_GCPExternalAccountID); ok {
		return x.GCPExternalAccountID
	}
	return ""
}

func (m *GetOrganizationRequest) GetInternalID() string {
	if x, ok := m.GetID().(*GetOrganizationRequest_InternalID); ok {
		return x.InternalID
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*GetOrganizationRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _GetOrganizationRequest_OneofMarshaler, _GetOrganizationRequest_OneofUnmarshaler, _GetOrganizationRequest_OneofSizer, []interface{}{
		(*GetOrganizationRequest_ExternalID)(nil),
		(*GetOrganizationRequest_GCPExternalAccountID)(nil),
		(*GetOrganizationRequest_InternalID)(nil),
	}
}

func _GetOrganizationRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*GetOrganizationRequest)
	// ID
	switch x := m.ID.(type) {
	case *GetOrganizationRequest_ExternalID:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.ExternalID)
	case *GetOrganizationRequest_GCPExternalAccountID:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.GCPExternalAccountID)
	case *GetOrganizationRequest_InternalID:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.InternalID)
	case nil:
	default:
		return fmt.Errorf("GetOrganizationRequest.ID has unexpected type %T", x)
	}
	return nil
}

func _GetOrganizationRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*GetOrganizationRequest)
	switch tag {
	case 1: // ID.ExternalID
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.ID = &GetOrganizationRequest_ExternalID{x}
		return true, err
	case 2: // ID.GCPExternalAccountID
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.ID = &GetOrganizationRequest_GCPExternalAccountID{x}
		return true, err
	case 3: // ID.InternalID
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.ID = &GetOrganizationRequest_InternalID{x}
		return true, err
	default:
		return false, nil
	}
}

func _GetOrganizationRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*GetOrganizationRequest)
	// ID
	switch x := m.ID.(type) {
	case *GetOrganizationRequest_ExternalID:
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.ExternalID)))
		n += len(x.ExternalID)
	case *GetOrganizationRequest_GCPExternalAccountID:
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.GCPExternalAccountID)))
		n += len(x.GCPExternalAccountID)
	case *GetOrganizationRequest_InternalID:
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.InternalID)))
		n += len(x.InternalID)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type GetOrganizationResponse struct {
	Organization Organization `protobuf:"bytes,1,opt,name=Organization" json:"Organization"`
}

func (m *GetOrganizationResponse) Reset()                    { *m = GetOrganizationResponse{} }
func (*GetOrganizationResponse) ProtoMessage()               {}
func (*GetOrganizationResponse) Descriptor() ([]byte, []int) { return fileDescriptorUsers, []int{17} }

func (m *GetOrganizationResponse) GetOrganization() Organization {
	if m != nil {
		return m.Organization
	}
	return Organization{}
}

type Organization struct {
	ID                   string     `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	ExternalID           string     `protobuf:"bytes,2,opt,name=ExternalID,proto3" json:"ExternalID,omitempty"`
	Name                 string     `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
	ProbeToken           string     `protobuf:"bytes,4,opt,name=ProbeToken,proto3" json:"ProbeToken,omitempty"`
	CreatedAt            time.Time  `protobuf:"bytes,5,opt,name=CreatedAt,stdtime" json:"CreatedAt"`
	FeatureFlags         []string   `protobuf:"bytes,6,rep,name=FeatureFlags" json:"FeatureFlags,omitempty"`
	RefuseDataAccess     bool       `protobuf:"varint,7,opt,name=RefuseDataAccess,proto3" json:"RefuseDataAccess,omitempty"`
	RefuseDataUpload     bool       `protobuf:"varint,8,opt,name=RefuseDataUpload,proto3" json:"RefuseDataUpload,omitempty"`
	FirstSeenConnectedAt *time.Time `protobuf:"bytes,9,opt,name=FirstSeenConnectedAt,stdtime" json:"FirstSeenConnectedAt,omitempty"`
	Platform             string     `protobuf:"bytes,10,opt,name=Platform,proto3" json:"Platform,omitempty"`
	Environment          string     `protobuf:"bytes,11,opt,name=Environment,proto3" json:"Environment,omitempty"`
	// When the organization's trial period expires.
	TrialExpiresAt        time.Time  `protobuf:"bytes,12,opt,name=TrialExpiresAt,stdtime" json:"TrialExpiresAt"`
	ZuoraAccountNumber    string     `protobuf:"bytes,13,opt,name=ZuoraAccountNumber,proto3" json:"ZuoraAccountNumber,omitempty"`
	ZuoraAccountCreatedAt *time.Time `protobuf:"bytes,14,opt,name=ZuoraAccountCreatedAt,stdtime" json:"ZuoraAccountCreatedAt,omitempty"`
	// When we sent a «trial expiring soon» notification at
	TrialPendingExpiryNotifiedAt *time.Time `protobuf:"bytes,15,opt,name=TrialPendingExpiryNotifiedAt,stdtime" json:"TrialPendingExpiryNotifiedAt,omitempty"`
	// When we sent a «trial expired» notification at
	TrialExpiredNotifiedAt *time.Time `protobuf:"bytes,16,opt,name=TrialExpiredNotifiedAt,stdtime" json:"TrialExpiredNotifiedAt,omitempty"`
	// For organizations that are coming from GCP
	GCP                       *GoogleCloudPlatform `protobuf:"bytes,17,opt,name=GCP" json:"GCP,omitempty"`
	TeamID                    string               `protobuf:"bytes,18,opt,name=TeamID,proto3" json:"TeamID,omitempty"`
	TeamExternalID            string               `protobuf:"bytes,19,opt,name=TeamExternalID,proto3" json:"TeamExternalID,omitempty"`
	DeletedAt                 time.Time            `protobuf:"bytes,20,opt,name=DeletedAt,stdtime" json:"DeletedAt"`
	Cleanup                   bool                 `protobuf:"varint,21,opt,name=Cleanup,proto3" json:"Cleanup,omitempty"`
	FirstSeenFluxConnectedAt  *time.Time           `protobuf:"bytes,22,opt,name=FirstSeenFluxConnectedAt,stdtime" json:"FirstSeenFluxConnectedAt,omitempty"`
	FirstSeenNetConnectedAt   *time.Time           `protobuf:"bytes,23,opt,name=FirstSeenNetConnectedAt,stdtime" json:"FirstSeenNetConnectedAt,omitempty"`
	FirstSeenPromConnectedAt  *time.Time           `protobuf:"bytes,24,opt,name=FirstSeenPromConnectedAt,stdtime" json:"FirstSeenPromConnectedAt,omitempty"`
	FirstSeenScopeConnectedAt *time.Time           `protobuf:"bytes,25,opt,name=FirstSeenScopeConnectedAt,stdtime" json:"FirstSeenScopeConnectedAt,omitempty"`
	// Replacing the default data refusal reason
	RefuseDataReason string `protobuf:"bytes,26,opt,name=RefuseDataReason,proto3" json:"RefuseDataReason,omitempty"`
}

func (m *Organization) Reset()                    { *m = Organization{} }
func (*Organization) ProtoMessage()               {}
func (*Organization) Descriptor() ([]byte, []int) { return fileDescriptorUsers, []int{18} }

func (m *Organization) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Organization) GetExternalID() string {
	if m != nil {
		return m.ExternalID
	}
	return ""
}

func (m *Organization) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Organization) GetProbeToken() string {
	if m != nil {
		return m.ProbeToken
	}
	return ""
}

func (m *Organization) GetCreatedAt() time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return time.Time{}
}

func (m *Organization) GetFeatureFlags() []string {
	if m != nil {
		return m.FeatureFlags
	}
	return nil
}

func (m *Organization) GetRefuseDataAccess() bool {
	if m != nil {
		return m.RefuseDataAccess
	}
	return false
}

func (m *Organization) GetRefuseDataUpload() bool {
	if m != nil {
		return m.RefuseDataUpload
	}
	return false
}

func (m *Organization) GetFirstSeenConnectedAt() *time.Time {
	if m != nil {
		return m.FirstSeenConnectedAt
	}
	return nil
}

func (m *Organization) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *Organization) GetEnvironment() string {
	if m != nil {
		return m.Environment
	}
	return ""
}

func (m *Organization) GetTrialExpiresAt() time.Time {
	if m != nil {
		return m.TrialExpiresAt
	}
	return time.Time{}
}

func (m *Organization) GetZuoraAccountNumber() string {
	if m != nil {
		return m.ZuoraAccountNumber
	}
	return ""
}

func (m *Organization) GetZuoraAccountCreatedAt() *time.Time {
	if m != nil {
		return m.ZuoraAccountCreatedAt
	}
	return nil
}

func (m *Organization) GetTrialPendingExpiryNotifiedAt() *time.Time {
	if m != nil {
		return m.TrialPendingExpiryNotifiedAt
	}
	return nil
}

func (m *Organization) GetTrialExpiredNotifiedAt() *time.Time {
	if m != nil {
		return m.TrialExpiredNotifiedAt
	}
	return nil
}

func (m *Organization) GetGCP() *GoogleCloudPlatform {
	if m != nil {
		return m.GCP
	}
	return nil
}

func (m *Organization) GetTeamID() string {
	if m != nil {
		return m.TeamID
	}
	return ""
}

func (m *Organization) GetTeamExternalID() string {
	if m != nil {
		return m.TeamExternalID
	}
	return ""
}

func (m *Organization) GetDeletedAt() time.Time {
	if m != nil {
		return m.DeletedAt
	}
	return time.Time{}
}

func (m *Organization) GetCleanup() bool {
	if m != nil {
		return m.Cleanup
	}
	return false
}

func (m *Organization) GetFirstSeenFluxConnectedAt() *time.Time {
	if m != nil {
		return m.FirstSeenFluxConnectedAt
	}
	return nil
}

func (m *Organization) GetFirstSeenNetConnectedAt() *time.Time {
	if m != nil {
		return m.FirstSeenNetConnectedAt
	}
	return nil
}

func (m *Organization) GetFirstSeenPromConnectedAt() *time.Time {
	if m != nil {
		return m.FirstSeenPromConnectedAt
	}
	return nil
}

func (m *Organization) GetFirstSeenScopeConnectedAt() *time.Time {
	if m != nil {
		return m.FirstSeenScopeConnectedAt
	}
	return nil
}

func (m *Organization) GetRefuseDataReason() string {
	if m != nil {
		return m.RefuseDataReason
	}
	return ""
}

type GoogleCloudPlatform struct {
	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	// External account ID from Google
	ExternalAccountID string `protobuf:"bytes,2,opt,name=ExternalAccountID,proto3" json:"ExternalAccountID,omitempty"`
	// Whether the GCP account has been activated or not. Note that this does not describe the state of the subscription.
	Activated bool      `protobuf:"varint,3,opt,name=Activated,proto3" json:"Activated,omitempty"`
	CreatedAt time.Time `protobuf:"bytes,4,opt,name=CreatedAt,stdtime" json:"CreatedAt"`
	// Consumer ID to report usage against
	ConsumerID string `protobuf:"bytes,5,opt,name=ConsumerID,proto3" json:"ConsumerID,omitempty"`
	// Name of the running subscription, in the format "partnerSubscriptions/*"
	SubscriptionName string `protobuf:"bytes,6,opt,name=SubscriptionName,proto3" json:"SubscriptionName,omitempty"`
	// Level of the subscription, can be "standard" or "enterprise"
	SubscriptionLevel string `protobuf:"bytes,7,opt,name=SubscriptionLevel,proto3" json:"SubscriptionLevel,omitempty"`
	// Status of the subscrption, can be one of "PENDING", "ACTIVE', or "COMPLETE"
	SubscriptionStatus string `protobuf:"bytes,8,opt,name=SubscriptionStatus,proto3" json:"SubscriptionStatus,omitempty"`
}

func (m *GoogleCloudPlatform) Reset()                    { *m = GoogleCloudPlatform{} }
func (*GoogleCloudPlatform) ProtoMessage()               {}
func (*GoogleCloudPlatform) Descriptor() ([]byte, []int) { return fileDescriptorUsers, []int{19} }

func (m *GoogleCloudPlatform) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *GoogleCloudPlatform) GetExternalAccountID() string {
	if m != nil {
		return m.ExternalAccountID
	}
	return ""
}

func (m *GoogleCloudPlatform) GetActivated() bool {
	if m != nil {
		return m.Activated
	}
	return false
}

func (m *GoogleCloudPlatform) GetCreatedAt() time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return time.Time{}
}

func (m *GoogleCloudPlatform) GetConsumerID() string {
	if m != nil {
		return m.ConsumerID
	}
	return ""
}

func (m *GoogleCloudPlatform) GetSubscriptionName() string {
	if m != nil {
		return m.SubscriptionName
	}
	return ""
}

func (m *GoogleCloudPlatform) GetSubscriptionLevel() string {
	if m != nil {
		return m.SubscriptionLevel
	}
	return ""
}

func (m *GoogleCloudPlatform) GetSubscriptionStatus() string {
	if m != nil {
		return m.SubscriptionStatus
	}
	return ""
}

type GetGCPRequest struct {
	ExternalAccountID string `protobuf:"bytes,1,opt,name=ExternalAccountID,proto3" json:"ExternalAccountID,omitempty"`
}

func (m *GetGCPRequest) Reset()                    { *m = GetGCPRequest{} }
func (*GetGCPRequest) ProtoMessage()               {}
func (*GetGCPRequest) Descriptor() ([]byte, []int) { return fileDescriptorUsers, []int{20} }

func (m *GetGCPRequest) GetExternalAccountID() string {
	if m != nil {
		return m.ExternalAccountID
	}
	return ""
}

type GetGCPResponse struct {
	GCP GoogleCloudPlatform `protobuf:"bytes,1,opt,name=GCP" json:"GCP"`
}

func (m *GetGCPResponse) Reset()                    { *m = GetGCPResponse{} }
func (*GetGCPResponse) ProtoMessage()               {}
func (*GetGCPResponse) Descriptor() ([]byte, []int) { return fileDescriptorUsers, []int{21} }

func (m *GetGCPResponse) GetGCP() GoogleCloudPlatform {
	if m != nil {
		return m.GCP
	}
	return GoogleCloudPlatform{}
}

type UpdateGCPRequest struct {
	GCP *GoogleCloudPlatform `protobuf:"bytes,1,opt,name=GCP" json:"GCP,omitempty"`
}

func (m *UpdateGCPRequest) Reset()                    { *m = UpdateGCPRequest{} }
func (*UpdateGCPRequest) ProtoMessage()               {}
func (*UpdateGCPRequest) Descriptor() ([]byte, []int) { return fileDescriptorUsers, []int{22} }

func (m *UpdateGCPRequest) GetGCP() *GoogleCloudPlatform {
	if m != nil {
		return m.GCP
	}
	return nil
}

type UpdateGCPResponse struct {
}

func (m *UpdateGCPResponse) Reset()                    { *m = UpdateGCPResponse{} }
func (*UpdateGCPResponse) ProtoMessage()               {}
func (*UpdateGCPResponse) Descriptor() ([]byte, []int) { return fileDescriptorUsers, []int{23} }

type SetOrganizationZuoraAccountRequest struct {
	ExternalID string     `protobuf:"bytes,1,opt,name=ExternalID,proto3" json:"ExternalID,omitempty"`
	Number     string     `protobuf:"bytes,2,opt,name=Number,proto3" json:"Number,omitempty"`
	CreatedAt  *time.Time `protobuf:"bytes,3,opt,name=CreatedAt,stdtime" json:"CreatedAt,omitempty"`
}

func (m *SetOrganizationZuoraAccountRequest) Reset()      { *m = SetOrganizationZuoraAccountRequest{} }
func (*SetOrganizationZuoraAccountRequest) ProtoMessage() {}
func (*SetOrganizationZuoraAccountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorUsers, []int{24}
}

func (m *SetOrganizationZuoraAccountRequest) GetExternalID() string {
	if m != nil {
		return m.ExternalID
	}
	return ""
}

func (m *SetOrganizationZuoraAccountRequest) GetNumber() string {
	if m != nil {
		return m.Number
	}
	return ""
}

func (m *SetOrganizationZuoraAccountRequest) GetCreatedAt() *time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

type SetOrganizationZuoraAccountResponse struct {
}

func (m *SetOrganizationZuoraAccountResponse) Reset()      { *m = SetOrganizationZuoraAccountResponse{} }
func (*SetOrganizationZuoraAccountResponse) ProtoMessage() {}
func (*SetOrganizationZuoraAccountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorUsers, []int{25}
}

type SetOrganizationFlagRequest struct {
	ExternalID string `protobuf:"bytes,1,opt,name=ExternalID,proto3" json:"ExternalID,omitempty"`
	Flag       string `protobuf:"bytes,2,opt,name=Flag,proto3" json:"Flag,omitempty"`
	Value      bool   `protobuf:"varint,3,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (m *SetOrganizationFlagRequest) Reset()                    { *m = SetOrganizationFlagRequest{} }
func (*SetOrganizationFlagRequest) ProtoMessage()               {}
func (*SetOrganizationFlagRequest) Descriptor() ([]byte, []int) { return fileDescriptorUsers, []int{26} }

func (m *SetOrganizationFlagRequest) GetExternalID() string {
	if m != nil {
		return m.ExternalID
	}
	return ""
}

func (m *SetOrganizationFlagRequest) GetFlag() string {
	if m != nil {
		return m.Flag
	}
	return ""
}

func (m *SetOrganizationFlagRequest) GetValue() bool {
	if m != nil {
		return m.Value
	}
	return false
}

type SetOrganizationFlagResponse struct {
}

func (m *SetOrganizationFlagResponse) Reset()      { *m = SetOrganizationFlagResponse{} }
func (*SetOrganizationFlagResponse) ProtoMessage() {}
func (*SetOrganizationFlagResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorUsers, []int{27}
}

type GetUserRequest struct {
	UserID string `protobuf:"bytes,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
}

func (m *GetUserRequest) Reset()                    { *m = GetUserRequest{} }
func (*GetUserRequest) ProtoMessage()               {}
func (*GetUserRequest) Descriptor() ([]byte, []int) { return fileDescriptorUsers, []int{28} }

func (m *GetUserRequest) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

type GetUserResponse struct {
	User User `protobuf:"bytes,1,opt,name=User" json:"User"`
}

func (m *GetUserResponse) Reset()                    { *m = GetUserResponse{} }
func (*GetUserResponse) ProtoMessage()               {}
func (*GetUserResponse) Descriptor() ([]byte, []int) { return fileDescriptorUsers, []int{29} }

func (m *GetUserResponse) GetUser() User {
	if m != nil {
		return m.User
	}
	return User{}
}

type User struct {
	ID             string    `protobuf:"bytes,1,opt,name=ID,proto3" json:"-"`
	Email          string    `protobuf:"bytes,2,opt,name=Email,proto3" json:"email"`
	Token          string    `protobuf:"bytes,3,opt,name=Token,proto3" json:"-"`
	TokenCreatedAt time.Time `protobuf:"bytes,4,opt,name=TokenCreatedAt,stdtime" json:"-"`
	FirstLoginAt   time.Time `protobuf:"bytes,5,opt,name=FirstLoginAt,stdtime" json:"-"`
	CreatedAt      time.Time `protobuf:"bytes,6,opt,name=CreatedAt,stdtime" json:"-"`
	Admin          bool      `protobuf:"varint,7,opt,name=Admin,proto3" json:"-"`
	LastLoginAt    time.Time `protobuf:"bytes,8,opt,name=LastLoginAt,stdtime" json:"-"`
}

func (m *User) Reset()                    { *m = User{} }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptorUsers, []int{30} }

func (m *User) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *User) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *User) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *User) GetTokenCreatedAt() time.Time {
	if m != nil {
		return m.TokenCreatedAt
	}
	return time.Time{}
}

func (m *User) GetFirstLoginAt() time.Time {
	if m != nil {
		return m.FirstLoginAt
	}
	return time.Time{}
}

func (m *User) GetCreatedAt() time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return time.Time{}
}

func (m *User) GetAdmin() bool {
	if m != nil {
		return m.Admin
	}
	return false
}

func (m *User) GetLastLoginAt() time.Time {
	if m != nil {
		return m.LastLoginAt
	}
	return time.Time{}
}

type NotifyTrialPendingExpiryRequest struct {
	ExternalID string `protobuf:"bytes,1,opt,name=ExternalID,proto3" json:"ExternalID,omitempty"`
}

func (m *NotifyTrialPendingExpiryRequest) Reset()      { *m = NotifyTrialPendingExpiryRequest{} }
func (*NotifyTrialPendingExpiryRequest) ProtoMessage() {}
func (*NotifyTrialPendingExpiryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorUsers, []int{31}
}

func (m *NotifyTrialPendingExpiryRequest) GetExternalID() string {
	if m != nil {
		return m.ExternalID
	}
	return ""
}

type NotifyTrialPendingExpiryResponse struct {
}

func (m *NotifyTrialPendingExpiryResponse) Reset()      { *m = NotifyTrialPendingExpiryResponse{} }
func (*NotifyTrialPendingExpiryResponse) ProtoMessage() {}
func (*NotifyTrialPendingExpiryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorUsers, []int{32}
}

type NotifyTrialExpiredRequest struct {
	ExternalID string `protobuf:"bytes,1,opt,name=ExternalID,proto3" json:"ExternalID,omitempty"`
}

func (m *NotifyTrialExpiredRequest) Reset()                    { *m = NotifyTrialExpiredRequest{} }
func (*NotifyTrialExpiredRequest) ProtoMessage()               {}
func (*NotifyTrialExpiredRequest) Descriptor() ([]byte, []int) { return fileDescriptorUsers, []int{33} }

func (m *NotifyTrialExpiredRequest) GetExternalID() string {
	if m != nil {
		return m.ExternalID
	}
	return ""
}

type NotifyTrialExpiredResponse struct {
}

func (m *NotifyTrialExpiredResponse) Reset()                    { *m = NotifyTrialExpiredResponse{} }
func (*NotifyTrialExpiredResponse) ProtoMessage()               {}
func (*NotifyTrialExpiredResponse) Descriptor() ([]byte, []int) { return fileDescriptorUsers, []int{34} }

type NotifyRefuseDataUploadRequest struct {
	ExternalID string `protobuf:"bytes,1,opt,name=ExternalID,proto3" json:"ExternalID,omitempty"`
}

func (m *NotifyRefuseDataUploadRequest) Reset()      { *m = NotifyRefuseDataUploadRequest{} }
func (*NotifyRefuseDataUploadRequest) ProtoMessage() {}
func (*NotifyRefuseDataUploadRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorUsers, []int{35}
}

func (m *NotifyRefuseDataUploadRequest) GetExternalID() string {
	if m != nil {
		return m.ExternalID
	}
	return ""
}

type NotifyRefuseDataUploadResponse struct {
}

func (m *NotifyRefuseDataUploadResponse) Reset()      { *m = NotifyRefuseDataUploadResponse{} }
func (*NotifyRefuseDataUploadResponse) ProtoMessage() {}
func (*NotifyRefuseDataUploadResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorUsers, []int{36}
}

type Team struct {
	ID                           string     `protobuf:"bytes,1,opt,name=ID,proto3" json:"-"`
	Name                         string     `protobuf:"bytes,2,opt,name=Name,proto3" json:"-"`
	ExternalID                   string     `protobuf:"bytes,3,opt,name=ExternalID,proto3" json:"-"`
	ZuoraAccountNumber           string     `protobuf:"bytes,4,opt,name=ZuoraAccountNumber,proto3" json:"-"`
	ZuoraAccountCreatedAt        *time.Time `protobuf:"bytes,5,opt,name=ZuoraAccountCreatedAt,stdtime" json:"-"`
	TrialExpiresAt               time.Time  `protobuf:"bytes,6,opt,name=TrialExpiresAt,stdtime" json:"-"`
	TrialPendingExpiryNotifiedAt *time.Time `protobuf:"bytes,7,opt,name=TrialPendingExpiryNotifiedAt,stdtime" json:"-"`
	TrialExpiredNotifiedAt       *time.Time `protobuf:"bytes,8,opt,name=TrialExpiredNotifiedAt,stdtime" json:"-"`
	CreatedAt                    time.Time  `protobuf:"bytes,9,opt,name=CreatedAt,stdtime" json:"-"`
}

func (m *Team) Reset()                    { *m = Team{} }
func (*Team) ProtoMessage()               {}
func (*Team) Descriptor() ([]byte, []int) { return fileDescriptorUsers, []int{37} }

func (m *Team) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Team) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Team) GetExternalID() string {
	if m != nil {
		return m.ExternalID
	}
	return ""
}

func (m *Team) GetZuoraAccountNumber() string {
	if m != nil {
		return m.ZuoraAccountNumber
	}
	return ""
}

func (m *Team) GetZuoraAccountCreatedAt() *time.Time {
	if m != nil {
		return m.ZuoraAccountCreatedAt
	}
	return nil
}

func (m *Team) GetTrialExpiresAt() time.Time {
	if m != nil {
		return m.TrialExpiresAt
	}
	return time.Time{}
}

func (m *Team) GetTrialPendingExpiryNotifiedAt() *time.Time {
	if m != nil {
		return m.TrialPendingExpiryNotifiedAt
	}
	return nil
}

func (m *Team) GetTrialExpiredNotifiedAt() *time.Time {
	if m != nil {
		return m.TrialExpiredNotifiedAt
	}
	return nil
}

func (m *Team) GetCreatedAt() time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return time.Time{}
}

// Empty message, i.e. equivalent to "void"/"Unit"/etc.
type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptorUsers, []int{38} }

type Summary struct {
	Entries []*SummaryEntry `protobuf:"bytes,1,rep,name=Entries" json:"Entries,omitempty"`
}

func (m *Summary) Reset()                    { *m = Summary{} }
func (*Summary) ProtoMessage()               {}
func (*Summary) Descriptor() ([]byte, []int) { return fileDescriptorUsers, []int{39} }

func (m *Summary) GetEntries() []*SummaryEntry {
	if m != nil {
		return m.Entries
	}
	return nil
}

type SummaryEntry struct {
	TeamExternalID       string     `protobuf:"bytes,1,opt,name=TeamExternalID,proto3" json:"-"`
	TeamName             string     `protobuf:"bytes,2,opt,name=TeamName,proto3" json:"-"`
	OrgID                string     `protobuf:"bytes,3,opt,name=OrgID,proto3" json:"-"`
	OrgExternalID        string     `protobuf:"bytes,4,opt,name=OrgExternalID,proto3" json:"-"`
	OrgName              string     `protobuf:"bytes,5,opt,name=OrgName,proto3" json:"-"`
	Emails               []string   `protobuf:"bytes,6,rep,name=Emails" json:"Emails,omitempty"`
	OrgCreatedAt         time.Time  `protobuf:"bytes,7,opt,name=OrgCreatedAt,stdtime" json:"OrgCreatedAt"`
	FirstSeenConnectedAt *time.Time `protobuf:"bytes,8,opt,name=FirstSeenConnectedAt,stdtime" json:"FirstSeenConnectedAt,omitempty"`
	Platform             string     `protobuf:"bytes,9,opt,name=Platform,proto3" json:"Platform,omitempty"`
	Environment          string     `protobuf:"bytes,10,opt,name=Environment,proto3" json:"Environment,omitempty"`
	// When the organization's trial period expires.
	TrialExpiresAt time.Time `protobuf:"bytes,11,opt,name=TrialExpiresAt,stdtime" json:"TrialExpiresAt"`
	// When we sent a «trial expiring soon» notification at
	TrialPendingExpiryNotifiedAt *time.Time `protobuf:"bytes,12,opt,name=TrialPendingExpiryNotifiedAt,stdtime" json:"TrialPendingExpiryNotifiedAt,omitempty"`
	// When we sent a «trial expired» notification at
	TrialExpiredNotifiedAt *time.Time `protobuf:"bytes,13,opt,name=TrialExpiredNotifiedAt,stdtime" json:"TrialExpiredNotifiedAt,omitempty"`
	BillingEnabled         bool       `protobuf:"varint,14,opt,name=BillingEnabled,proto3" json:"-"`
	RefuseDataAccess       bool       `protobuf:"varint,15,opt,name=RefuseDataAccess,proto3" json:"RefuseDataAccess,omitempty"`
	RefuseDataUpload       bool       `protobuf:"varint,16,opt,name=RefuseDataUpload,proto3" json:"RefuseDataUpload,omitempty"`
	ZuoraAccountNumber     string     `protobuf:"bytes,17,opt,name=ZuoraAccountNumber,proto3" json:"ZuoraAccountNumber,omitempty"`
	ZuoraAccountCreatedAt  *time.Time `protobuf:"bytes,18,opt,name=ZuoraAccountCreatedAt,stdtime" json:"ZuoraAccountCreatedAt,omitempty"`
	GCPAccountExternalID   string     `protobuf:"bytes,19,opt,name=GCPAccountExternalID,proto3" json:"GCPAccountExternalID,omitempty"`
	GCPAccountCreatedAt    time.Time  `protobuf:"bytes,20,opt,name=GCPAccountCreatedAt,stdtime" json:"GCPAccountCreatedAt"`
	// Level of the subscription, can be "standard" or "enterprise"
	GCPAccountSubscriptionLevel string `protobuf:"bytes,21,opt,name=GCPAccountSubscriptionLevel,proto3" json:"GCPAccountSubscriptionLevel,omitempty"`
	// Status of the subscrption, can be one of "PENDING", "ACTIVE', or "COMPLETE"
	GCPAccountSubscriptionStatus string `protobuf:"bytes,22,opt,name=GCPAccountSubscriptionStatus,proto3" json:"GCPAccountSubscriptionStatus,omitempty"`
}

func (m *SummaryEntry) Reset()                    { *m = SummaryEntry{} }
func (*SummaryEntry) ProtoMessage()               {}
func (*SummaryEntry) Descriptor() ([]byte, []int) { return fileDescriptorUsers, []int{40} }

func (m *SummaryEntry) GetTeamExternalID() string {
	if m != nil {
		return m.TeamExternalID
	}
	return ""
}

func (m *SummaryEntry) GetTeamName() string {
	if m != nil {
		return m.TeamName
	}
	return ""
}

func (m *SummaryEntry) GetOrgID() string {
	if m != nil {
		return m.OrgID
	}
	return ""
}

func (m *SummaryEntry) GetOrgExternalID() string {
	if m != nil {
		return m.OrgExternalID
	}
	return ""
}

func (m *SummaryEntry) GetOrgName() string {
	if m != nil {
		return m.OrgName
	}
	return ""
}

func (m *SummaryEntry) GetEmails() []string {
	if m != nil {
		return m.Emails
	}
	return nil
}

func (m *SummaryEntry) GetOrgCreatedAt() time.Time {
	if m != nil {
		return m.OrgCreatedAt
	}
	return time.Time{}
}

func (m *SummaryEntry) GetFirstSeenConnectedAt() *time.Time {
	if m != nil {
		return m.FirstSeenConnectedAt
	}
	return nil
}

func (m *SummaryEntry) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *SummaryEntry) GetEnvironment() string {
	if m != nil {
		return m.Environment
	}
	return ""
}

func (m *SummaryEntry) GetTrialExpiresAt() time.Time {
	if m != nil {
		return m.TrialExpiresAt
	}
	return time.Time{}
}

func (m *SummaryEntry) GetTrialPendingExpiryNotifiedAt() *time.Time {
	if m != nil {
		return m.TrialPendingExpiryNotifiedAt
	}
	return nil
}

func (m *SummaryEntry) GetTrialExpiredNotifiedAt() *time.Time {
	if m != nil {
		return m.TrialExpiredNotifiedAt
	}
	return nil
}

func (m *SummaryEntry) GetBillingEnabled() bool {
	if m != nil {
		return m.BillingEnabled
	}
	return false
}

func (m *SummaryEntry) GetRefuseDataAccess() bool {
	if m != nil {
		return m.RefuseDataAccess
	}
	return false
}

func (m *SummaryEntry) GetRefuseDataUpload() bool {
	if m != nil {
		return m.RefuseDataUpload
	}
	return false
}

func (m *SummaryEntry) GetZuoraAccountNumber() string {
	if m != nil {
		return m.ZuoraAccountNumber
	}
	return ""
}

func (m *SummaryEntry) GetZuoraAccountCreatedAt() *time.Time {
	if m != nil {
		return m.ZuoraAccountCreatedAt
	}
	return nil
}

func (m *SummaryEntry) GetGCPAccountExternalID() string {
	if m != nil {
		return m.GCPAccountExternalID
	}
	return ""
}

func (m *SummaryEntry) GetGCPAccountCreatedAt() time.Time {
	if m != nil {
		return m.GCPAccountCreatedAt
	}
	return time.Time{}
}

func (m *SummaryEntry) GetGCPAccountSubscriptionLevel() string {
	if m != nil {
		return m.GCPAccountSubscriptionLevel
	}
	return ""
}

func (m *SummaryEntry) GetGCPAccountSubscriptionStatus() string {
	if m != nil {
		return m.GCPAccountSubscriptionStatus
	}
	return ""
}

type Webhook struct {
	ID               string     `protobuf:"bytes,1,opt,name=ID,proto3" json:"-"`
	OrganizationID   string     `protobuf:"bytes,2,opt,name=OrganizationID,proto3" json:"-"`
	IntegrationType  string     `protobuf:"bytes,3,opt,name=IntegrationType,proto3" json:"integrationType"`
	SecretID         string     `protobuf:"bytes,4,opt,name=SecretID,proto3" json:"secretID"`
	SecretSigningKey string     `protobuf:"bytes,5,opt,name=SecretSigningKey,proto3" json:"secretSigningKey"`
	CreatedAt        time.Time  `protobuf:"bytes,6,opt,name=CreatedAt,stdtime" json:"createdAt"`
	DeletedAt        *time.Time `protobuf:"bytes,7,opt,name=DeletedAt,stdtime" json:"deletedAt"`
}

func (m *Webhook) Reset()                    { *m = Webhook{} }
func (*Webhook) ProtoMessage()               {}
func (*Webhook) Descriptor() ([]byte, []int) { return fileDescriptorUsers, []int{41} }

func (m *Webhook) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Webhook) GetOrganizationID() string {
	if m != nil {
		return m.OrganizationID
	}
	return ""
}

func (m *Webhook) GetIntegrationType() string {
	if m != nil {
		return m.IntegrationType
	}
	return ""
}

func (m *Webhook) GetSecretID() string {
	if m != nil {
		return m.SecretID
	}
	return ""
}

func (m *Webhook) GetSecretSigningKey() string {
	if m != nil {
		return m.SecretSigningKey
	}
	return ""
}

func (m *Webhook) GetCreatedAt() time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return time.Time{}
}

func (m *Webhook) GetDeletedAt() *time.Time {
	if m != nil {
		return m.DeletedAt
	}
	return nil
}

type LookupOrganizationWebhookUsingSecretIDRequest struct {
	OrgExternalID string `protobuf:"bytes,1,opt,name=OrgExternalID,proto3" json:"OrgExternalID,omitempty"`
	SecretID      string `protobuf:"bytes,2,opt,name=SecretID,proto3" json:"SecretID,omitempty"`
}

func (m *LookupOrganizationWebhookUsingSecretIDRequest) Reset() {
	*m = LookupOrganizationWebhookUsingSecretIDRequest{}
}
func (*LookupOrganizationWebhookUsingSecretIDRequest) ProtoMessage() {}
func (*LookupOrganizationWebhookUsingSecretIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorUsers, []int{42}
}

func (m *LookupOrganizationWebhookUsingSecretIDRequest) GetOrgExternalID() string {
	if m != nil {
		return m.OrgExternalID
	}
	return ""
}

func (m *LookupOrganizationWebhookUsingSecretIDRequest) GetSecretID() string {
	if m != nil {
		return m.SecretID
	}
	return ""
}

type LookupOrganizationWebhookUsingSecretIDResponse struct {
	Webhook *Webhook `protobuf:"bytes,1,opt,name=Webhook" json:"Webhook,omitempty"`
}

func (m *LookupOrganizationWebhookUsingSecretIDResponse) Reset() {
	*m = LookupOrganizationWebhookUsingSecretIDResponse{}
}
func (*LookupOrganizationWebhookUsingSecretIDResponse) ProtoMessage() {}
func (*LookupOrganizationWebhookUsingSecretIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorUsers, []int{43}
}

func (m *LookupOrganizationWebhookUsingSecretIDResponse) GetWebhook() *Webhook {
	if m != nil {
		return m.Webhook
	}
	return nil
}

func init() {
	proto.RegisterType((*LookupOrgRequest)(nil), "users.LookupOrgRequest")
	proto.RegisterType((*LookupOrgResponse)(nil), "users.LookupOrgResponse")
	proto.RegisterType((*LookupUsingTokenRequest)(nil), "users.LookupUsingTokenRequest")
	proto.RegisterType((*LookupUsingTokenResponse)(nil), "users.LookupUsingTokenResponse")
	proto.RegisterType((*LookupAdminRequest)(nil), "users.LookupAdminRequest")
	proto.RegisterType((*LookupAdminResponse)(nil), "users.LookupAdminResponse")
	proto.RegisterType((*LookupUserRequest)(nil), "users.LookupUserRequest")
	proto.RegisterType((*LookupUserResponse)(nil), "users.LookupUserResponse")
	proto.RegisterType((*GetOrganizationsRequest)(nil), "users.GetOrganizationsRequest")
	proto.RegisterType((*GetOrganizationsResponse)(nil), "users.GetOrganizationsResponse")
	proto.RegisterType((*GetBillableOrganizationsRequest)(nil), "users.GetBillableOrganizationsRequest")
	proto.RegisterType((*GetBillableOrganizationsResponse)(nil), "users.GetBillableOrganizationsResponse")
	proto.RegisterType((*GetTrialOrganizationsRequest)(nil), "users.GetTrialOrganizationsRequest")
	proto.RegisterType((*GetTrialOrganizationsResponse)(nil), "users.GetTrialOrganizationsResponse")
	proto.RegisterType((*GetDelinquentOrganizationsRequest)(nil), "users.GetDelinquentOrganizationsRequest")
	proto.RegisterType((*GetDelinquentOrganizationsResponse)(nil), "users.GetDelinquentOrganizationsResponse")
	proto.RegisterType((*GetOrganizationRequest)(nil), "users.GetOrganizationRequest")
	proto.RegisterType((*GetOrganizationResponse)(nil), "users.GetOrganizationResponse")
	proto.RegisterType((*Organization)(nil), "users.Organization")
	proto.RegisterType((*GoogleCloudPlatform)(nil), "users.GoogleCloudPlatform")
	proto.RegisterType((*GetGCPRequest)(nil), "users.GetGCPRequest")
	proto.RegisterType((*GetGCPResponse)(nil), "users.GetGCPResponse")
	proto.RegisterType((*UpdateGCPRequest)(nil), "users.UpdateGCPRequest")
	proto.RegisterType((*UpdateGCPResponse)(nil), "users.UpdateGCPResponse")
	proto.RegisterType((*SetOrganizationZuoraAccountRequest)(nil), "users.SetOrganizationZuoraAccountRequest")
	proto.RegisterType((*SetOrganizationZuoraAccountResponse)(nil), "users.SetOrganizationZuoraAccountResponse")
	proto.RegisterType((*SetOrganizationFlagRequest)(nil), "users.SetOrganizationFlagRequest")
	proto.RegisterType((*SetOrganizationFlagResponse)(nil), "users.SetOrganizationFlagResponse")
	proto.RegisterType((*GetUserRequest)(nil), "users.GetUserRequest")
	proto.RegisterType((*GetUserResponse)(nil), "users.GetUserResponse")
	proto.RegisterType((*User)(nil), "users.User")
	proto.RegisterType((*NotifyTrialPendingExpiryRequest)(nil), "users.NotifyTrialPendingExpiryRequest")
	proto.RegisterType((*NotifyTrialPendingExpiryResponse)(nil), "users.NotifyTrialPendingExpiryResponse")
	proto.RegisterType((*NotifyTrialExpiredRequest)(nil), "users.NotifyTrialExpiredRequest")
	proto.RegisterType((*NotifyTrialExpiredResponse)(nil), "users.NotifyTrialExpiredResponse")
	proto.RegisterType((*NotifyRefuseDataUploadRequest)(nil), "users.NotifyRefuseDataUploadRequest")
	proto.RegisterType((*NotifyRefuseDataUploadResponse)(nil), "users.NotifyRefuseDataUploadResponse")
	proto.RegisterType((*Team)(nil), "users.Team")
	proto.RegisterType((*Empty)(nil), "users.Empty")
	proto.RegisterType((*Summary)(nil), "users.Summary")
	proto.RegisterType((*SummaryEntry)(nil), "users.SummaryEntry")
	proto.RegisterType((*Webhook)(nil), "users.Webhook")
	proto.RegisterType((*LookupOrganizationWebhookUsingSecretIDRequest)(nil), "users.LookupOrganizationWebhookUsingSecretIDRequest")
	proto.RegisterType((*LookupOrganizationWebhookUsingSecretIDResponse)(nil), "users.LookupOrganizationWebhookUsingSecretIDResponse")
	proto.RegisterEnum("users.AuthorizedAction", AuthorizedAction_name, AuthorizedAction_value)
}
func (x AuthorizedAction) String() string {
	s, ok := AuthorizedAction_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *LookupOrgRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*LookupOrgRequest)
	if !ok {
		that2, ok := that.(LookupOrgRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Cookie != that1.Cookie {
		return false
	}
	if this.OrgExternalID != that1.OrgExternalID {
		return false
	}
	if this.AuthorizeFor != that1.AuthorizeFor {
		return false
	}
	return true
}
func (this *LookupOrgResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*LookupOrgResponse)
	if !ok {
		that2, ok := that.(LookupOrgResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.OrganizationID != that1.OrganizationID {
		return false
	}
	if this.UserID != that1.UserID {
		return false
	}
	if len(this.FeatureFlags) != len(that1.FeatureFlags) {
		return false
	}
	for i := range this.FeatureFlags {
		if this.FeatureFlags[i] != that1.FeatureFlags[i] {
			return false
		}
	}
	return true
}
func (this *LookupUsingTokenRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*LookupUsingTokenRequest)
	if !ok {
		that2, ok := that.(LookupUsingTokenRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Token != that1.Token {
		return false
	}
	if this.AuthorizeFor != that1.AuthorizeFor {
		return false
	}
	return true
}
func (this *LookupUsingTokenResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*LookupUsingTokenResponse)
	if !ok {
		that2, ok := that.(LookupUsingTokenResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.OrganizationID != that1.OrganizationID {
		return false
	}
	if len(this.FeatureFlags) != len(that1.FeatureFlags) {
		return false
	}
	for i := range this.FeatureFlags {
		if this.FeatureFlags[i] != that1.FeatureFlags[i] {
			return false
		}
	}
	return true
}
func (this *LookupAdminRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*LookupAdminRequest)
	if !ok {
		that2, ok := that.(LookupAdminRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Cookie != that1.Cookie {
		return false
	}
	return true
}
func (this *LookupAdminResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*LookupAdminResponse)
	if !ok {
		that2, ok := that.(LookupAdminResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.AdminID != that1.AdminID {
		return false
	}
	return true
}
func (this *LookupUserRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*LookupUserRequest)
	if !ok {
		that2, ok := that.(LookupUserRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Cookie != that1.Cookie {
		return false
	}
	return true
}
func (this *LookupUserResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*LookupUserResponse)
	if !ok {
		that2, ok := that.(LookupUserResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.UserID != that1.UserID {
		return false
	}
	return true
}
func (this *GetOrganizationsRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GetOrganizationsRequest)
	if !ok {
		that2, ok := that.(GetOrganizationsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Query != that1.Query {
		return false
	}
	if this.PageNumber != that1.PageNumber {
		return false
	}
	return true
}
func (this *GetOrganizationsResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GetOrganizationsResponse)
	if !ok {
		that2, ok := that.(GetOrganizationsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Organizations) != len(that1.Organizations) {
		return false
	}
	for i := range this.Organizations {
		if !this.Organizations[i].Equal(&that1.Organizations[i]) {
			return false
		}
	}
	return true
}
func (this *GetBillableOrganizationsRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GetBillableOrganizationsRequest)
	if !ok {
		that2, ok := that.(GetBillableOrganizationsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Now.Equal(that1.Now) {
		return false
	}
	return true
}
func (this *GetBillableOrganizationsResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GetBillableOrganizationsResponse)
	if !ok {
		that2, ok := that.(GetBillableOrganizationsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Organizations) != len(that1.Organizations) {
		return false
	}
	for i := range this.Organizations {
		if !this.Organizations[i].Equal(&that1.Organizations[i]) {
			return false
		}
	}
	return true
}
func (this *GetTrialOrganizationsRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GetTrialOrganizationsRequest)
	if !ok {
		that2, ok := that.(GetTrialOrganizationsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Now.Equal(that1.Now) {
		return false
	}
	return true
}
func (this *GetTrialOrganizationsResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GetTrialOrganizationsResponse)
	if !ok {
		that2, ok := that.(GetTrialOrganizationsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Organizations) != len(that1.Organizations) {
		return false
	}
	for i := range this.Organizations {
		if !this.Organizations[i].Equal(&that1.Organizations[i]) {
			return false
		}
	}
	return true
}
func (this *GetDelinquentOrganizationsRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GetDelinquentOrganizationsRequest)
	if !ok {
		that2, ok := that.(GetDelinquentOrganizationsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Now.Equal(that1.Now) {
		return false
	}
	return true
}
func (this *GetDelinquentOrganizationsResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GetDelinquentOrganizationsResponse)
	if !ok {
		that2, ok := that.(GetDelinquentOrganizationsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Organizations) != len(that1.Organizations) {
		return false
	}
	for i := range this.Organizations {
		if !this.Organizations[i].Equal(&that1.Organizations[i]) {
			return false
		}
	}
	return true
}
func (this *GetOrganizationRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GetOrganizationRequest)
	if !ok {
		that2, ok := that.(GetOrganizationRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if that1.ID == nil {
		if this.ID != nil {
			return false
		}
	} else if this.ID == nil {
		return false
	} else if !this.ID.Equal(that1.ID) {
		return false
	}
	return true
}
func (this *GetOrganizationRequest_ExternalID) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GetOrganizationRequest_ExternalID)
	if !ok {
		that2, ok := that.(GetOrganizationRequest_ExternalID)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ExternalID != that1.ExternalID {
		return false
	}
	return true
}
func (this *GetOrganizationRequest_GCPExternalAccountID) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GetOrganizationRequest_GCPExternalAccountID)
	if !ok {
		that2, ok := that.(GetOrganizationRequest_GCPExternalAccountID)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.GCPExternalAccountID != that1.GCPExternalAccountID {
		return false
	}
	return true
}
func (this *GetOrganizationRequest_InternalID) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GetOrganizationRequest_InternalID)
	if !ok {
		that2, ok := that.(GetOrganizationRequest_InternalID)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.InternalID != that1.InternalID {
		return false
	}
	return true
}
func (this *GetOrganizationResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GetOrganizationResponse)
	if !ok {
		that2, ok := that.(GetOrganizationResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Organization.Equal(&that1.Organization) {
		return false
	}
	return true
}
func (this *Organization) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Organization)
	if !ok {
		that2, ok := that.(Organization)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.ExternalID != that1.ExternalID {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.ProbeToken != that1.ProbeToken {
		return false
	}
	if !this.CreatedAt.Equal(that1.CreatedAt) {
		return false
	}
	if len(this.FeatureFlags) != len(that1.FeatureFlags) {
		return false
	}
	for i := range this.FeatureFlags {
		if this.FeatureFlags[i] != that1.FeatureFlags[i] {
			return false
		}
	}
	if this.RefuseDataAccess != that1.RefuseDataAccess {
		return false
	}
	if this.RefuseDataUpload != that1.RefuseDataUpload {
		return false
	}
	if that1.FirstSeenConnectedAt == nil {
		if this.FirstSeenConnectedAt != nil {
			return false
		}
	} else if !this.FirstSeenConnectedAt.Equal(*that1.FirstSeenConnectedAt) {
		return false
	}
	if this.Platform != that1.Platform {
		return false
	}
	if this.Environment != that1.Environment {
		return false
	}
	if !this.TrialExpiresAt.Equal(that1.TrialExpiresAt) {
		return false
	}
	if this.ZuoraAccountNumber != that1.ZuoraAccountNumber {
		return false
	}
	if that1.ZuoraAccountCreatedAt == nil {
		if this.ZuoraAccountCreatedAt != nil {
			return false
		}
	} else if !this.ZuoraAccountCreatedAt.Equal(*that1.ZuoraAccountCreatedAt) {
		return false
	}
	if that1.TrialPendingExpiryNotifiedAt == nil {
		if this.TrialPendingExpiryNotifiedAt != nil {
			return false
		}
	} else if !this.TrialPendingExpiryNotifiedAt.Equal(*that1.TrialPendingExpiryNotifiedAt) {
		return false
	}
	if that1.TrialExpiredNotifiedAt == nil {
		if this.TrialExpiredNotifiedAt != nil {
			return false
		}
	} else if !this.TrialExpiredNotifiedAt.Equal(*that1.TrialExpiredNotifiedAt) {
		return false
	}
	if !this.GCP.Equal(that1.GCP) {
		return false
	}
	if this.TeamID != that1.TeamID {
		return false
	}
	if this.TeamExternalID != that1.TeamExternalID {
		return false
	}
	if !this.DeletedAt.Equal(that1.DeletedAt) {
		return false
	}
	if this.Cleanup != that1.Cleanup {
		return false
	}
	if that1.FirstSeenFluxConnectedAt == nil {
		if this.FirstSeenFluxConnectedAt != nil {
			return false
		}
	} else if !this.FirstSeenFluxConnectedAt.Equal(*that1.FirstSeenFluxConnectedAt) {
		return false
	}
	if that1.FirstSeenNetConnectedAt == nil {
		if this.FirstSeenNetConnectedAt != nil {
			return false
		}
	} else if !this.FirstSeenNetConnectedAt.Equal(*that1.FirstSeenNetConnectedAt) {
		return false
	}
	if that1.FirstSeenPromConnectedAt == nil {
		if this.FirstSeenPromConnectedAt != nil {
			return false
		}
	} else if !this.FirstSeenPromConnectedAt.Equal(*that1.FirstSeenPromConnectedAt) {
		return false
	}
	if that1.FirstSeenScopeConnectedAt == nil {
		if this.FirstSeenScopeConnectedAt != nil {
			return false
		}
	} else if !this.FirstSeenScopeConnectedAt.Equal(*that1.FirstSeenScopeConnectedAt) {
		return false
	}
	if this.RefuseDataReason != that1.RefuseDataReason {
		return false
	}
	return true
}
func (this *GoogleCloudPlatform) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GoogleCloudPlatform)
	if !ok {
		that2, ok := that.(GoogleCloudPlatform)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.ExternalAccountID != that1.ExternalAccountID {
		return false
	}
	if this.Activated != that1.Activated {
		return false
	}
	if !this.CreatedAt.Equal(that1.CreatedAt) {
		return false
	}
	if this.ConsumerID != that1.ConsumerID {
		return false
	}
	if this.SubscriptionName != that1.SubscriptionName {
		return false
	}
	if this.SubscriptionLevel != that1.SubscriptionLevel {
		return false
	}
	if this.SubscriptionStatus != that1.SubscriptionStatus {
		return false
	}
	return true
}
func (this *GetGCPRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GetGCPRequest)
	if !ok {
		that2, ok := that.(GetGCPRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ExternalAccountID != that1.ExternalAccountID {
		return false
	}
	return true
}
func (this *GetGCPResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GetGCPResponse)
	if !ok {
		that2, ok := that.(GetGCPResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.GCP.Equal(&that1.GCP) {
		return false
	}
	return true
}
func (this *UpdateGCPRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateGCPRequest)
	if !ok {
		that2, ok := that.(UpdateGCPRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.GCP.Equal(that1.GCP) {
		return false
	}
	return true
}
func (this *UpdateGCPResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateGCPResponse)
	if !ok {
		that2, ok := that.(UpdateGCPResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *SetOrganizationZuoraAccountRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SetOrganizationZuoraAccountRequest)
	if !ok {
		that2, ok := that.(SetOrganizationZuoraAccountRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ExternalID != that1.ExternalID {
		return false
	}
	if this.Number != that1.Number {
		return false
	}
	if that1.CreatedAt == nil {
		if this.CreatedAt != nil {
			return false
		}
	} else if !this.CreatedAt.Equal(*that1.CreatedAt) {
		return false
	}
	return true
}
func (this *SetOrganizationZuoraAccountResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SetOrganizationZuoraAccountResponse)
	if !ok {
		that2, ok := that.(SetOrganizationZuoraAccountResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *SetOrganizationFlagRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SetOrganizationFlagRequest)
	if !ok {
		that2, ok := that.(SetOrganizationFlagRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ExternalID != that1.ExternalID {
		return false
	}
	if this.Flag != that1.Flag {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	return true
}
func (this *SetOrganizationFlagResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SetOrganizationFlagResponse)
	if !ok {
		that2, ok := that.(SetOrganizationFlagResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *GetUserRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GetUserRequest)
	if !ok {
		that2, ok := that.(GetUserRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.UserID != that1.UserID {
		return false
	}
	return true
}
func (this *GetUserResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GetUserResponse)
	if !ok {
		that2, ok := that.(GetUserResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.User.Equal(&that1.User) {
		return false
	}
	return true
}
func (this *User) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*User)
	if !ok {
		that2, ok := that.(User)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.Email != that1.Email {
		return false
	}
	if this.Token != that1.Token {
		return false
	}
	if !this.TokenCreatedAt.Equal(that1.TokenCreatedAt) {
		return false
	}
	if !this.FirstLoginAt.Equal(that1.FirstLoginAt) {
		return false
	}
	if !this.CreatedAt.Equal(that1.CreatedAt) {
		return false
	}
	if this.Admin != that1.Admin {
		return false
	}
	if !this.LastLoginAt.Equal(that1.LastLoginAt) {
		return false
	}
	return true
}
func (this *NotifyTrialPendingExpiryRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*NotifyTrialPendingExpiryRequest)
	if !ok {
		that2, ok := that.(NotifyTrialPendingExpiryRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ExternalID != that1.ExternalID {
		return false
	}
	return true
}
func (this *NotifyTrialPendingExpiryResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*NotifyTrialPendingExpiryResponse)
	if !ok {
		that2, ok := that.(NotifyTrialPendingExpiryResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *NotifyTrialExpiredRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*NotifyTrialExpiredRequest)
	if !ok {
		that2, ok := that.(NotifyTrialExpiredRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ExternalID != that1.ExternalID {
		return false
	}
	return true
}
func (this *NotifyTrialExpiredResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*NotifyTrialExpiredResponse)
	if !ok {
		that2, ok := that.(NotifyTrialExpiredResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *NotifyRefuseDataUploadRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*NotifyRefuseDataUploadRequest)
	if !ok {
		that2, ok := that.(NotifyRefuseDataUploadRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ExternalID != that1.ExternalID {
		return false
	}
	return true
}
func (this *NotifyRefuseDataUploadResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*NotifyRefuseDataUploadResponse)
	if !ok {
		that2, ok := that.(NotifyRefuseDataUploadResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *Team) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Team)
	if !ok {
		that2, ok := that.(Team)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.ExternalID != that1.ExternalID {
		return false
	}
	if this.ZuoraAccountNumber != that1.ZuoraAccountNumber {
		return false
	}
	if that1.ZuoraAccountCreatedAt == nil {
		if this.ZuoraAccountCreatedAt != nil {
			return false
		}
	} else if !this.ZuoraAccountCreatedAt.Equal(*that1.ZuoraAccountCreatedAt) {
		return false
	}
	if !this.TrialExpiresAt.Equal(that1.TrialExpiresAt) {
		return false
	}
	if that1.TrialPendingExpiryNotifiedAt == nil {
		if this.TrialPendingExpiryNotifiedAt != nil {
			return false
		}
	} else if !this.TrialPendingExpiryNotifiedAt.Equal(*that1.TrialPendingExpiryNotifiedAt) {
		return false
	}
	if that1.TrialExpiredNotifiedAt == nil {
		if this.TrialExpiredNotifiedAt != nil {
			return false
		}
	} else if !this.TrialExpiredNotifiedAt.Equal(*that1.TrialExpiredNotifiedAt) {
		return false
	}
	if !this.CreatedAt.Equal(that1.CreatedAt) {
		return false
	}
	return true
}
func (this *Empty) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Empty)
	if !ok {
		that2, ok := that.(Empty)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *Summary) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Summary)
	if !ok {
		that2, ok := that.(Summary)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Entries) != len(that1.Entries) {
		return false
	}
	for i := range this.Entries {
		if !this.Entries[i].Equal(that1.Entries[i]) {
			return false
		}
	}
	return true
}
func (this *SummaryEntry) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SummaryEntry)
	if !ok {
		that2, ok := that.(SummaryEntry)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.TeamExternalID != that1.TeamExternalID {
		return false
	}
	if this.TeamName != that1.TeamName {
		return false
	}
	if this.OrgID != that1.OrgID {
		return false
	}
	if this.OrgExternalID != that1.OrgExternalID {
		return false
	}
	if this.OrgName != that1.OrgName {
		return false
	}
	if len(this.Emails) != len(that1.Emails) {
		return false
	}
	for i := range this.Emails {
		if this.Emails[i] != that1.Emails[i] {
			return false
		}
	}
	if !this.OrgCreatedAt.Equal(that1.OrgCreatedAt) {
		return false
	}
	if that1.FirstSeenConnectedAt == nil {
		if this.FirstSeenConnectedAt != nil {
			return false
		}
	} else if !this.FirstSeenConnectedAt.Equal(*that1.FirstSeenConnectedAt) {
		return false
	}
	if this.Platform != that1.Platform {
		return false
	}
	if this.Environment != that1.Environment {
		return false
	}
	if !this.TrialExpiresAt.Equal(that1.TrialExpiresAt) {
		return false
	}
	if that1.TrialPendingExpiryNotifiedAt == nil {
		if this.TrialPendingExpiryNotifiedAt != nil {
			return false
		}
	} else if !this.TrialPendingExpiryNotifiedAt.Equal(*that1.TrialPendingExpiryNotifiedAt) {
		return false
	}
	if that1.TrialExpiredNotifiedAt == nil {
		if this.TrialExpiredNotifiedAt != nil {
			return false
		}
	} else if !this.TrialExpiredNotifiedAt.Equal(*that1.TrialExpiredNotifiedAt) {
		return false
	}
	if this.BillingEnabled != that1.BillingEnabled {
		return false
	}
	if this.RefuseDataAccess != that1.RefuseDataAccess {
		return false
	}
	if this.RefuseDataUpload != that1.RefuseDataUpload {
		return false
	}
	if this.ZuoraAccountNumber != that1.ZuoraAccountNumber {
		return false
	}
	if that1.ZuoraAccountCreatedAt == nil {
		if this.ZuoraAccountCreatedAt != nil {
			return false
		}
	} else if !this.ZuoraAccountCreatedAt.Equal(*that1.ZuoraAccountCreatedAt) {
		return false
	}
	if this.GCPAccountExternalID != that1.GCPAccountExternalID {
		return false
	}
	if !this.GCPAccountCreatedAt.Equal(that1.GCPAccountCreatedAt) {
		return false
	}
	if this.GCPAccountSubscriptionLevel != that1.GCPAccountSubscriptionLevel {
		return false
	}
	if this.GCPAccountSubscriptionStatus != that1.GCPAccountSubscriptionStatus {
		return false
	}
	return true
}
func (this *Webhook) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Webhook)
	if !ok {
		that2, ok := that.(Webhook)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.OrganizationID != that1.OrganizationID {
		return false
	}
	if this.IntegrationType != that1.IntegrationType {
		return false
	}
	if this.SecretID != that1.SecretID {
		return false
	}
	if this.SecretSigningKey != that1.SecretSigningKey {
		return false
	}
	if !this.CreatedAt.Equal(that1.CreatedAt) {
		return false
	}
	if that1.DeletedAt == nil {
		if this.DeletedAt != nil {
			return false
		}
	} else if !this.DeletedAt.Equal(*that1.DeletedAt) {
		return false
	}
	return true
}
func (this *LookupOrganizationWebhookUsingSecretIDRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*LookupOrganizationWebhookUsingSecretIDRequest)
	if !ok {
		that2, ok := that.(LookupOrganizationWebhookUsingSecretIDRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.OrgExternalID != that1.OrgExternalID {
		return false
	}
	if this.SecretID != that1.SecretID {
		return false
	}
	return true
}
func (this *LookupOrganizationWebhookUsingSecretIDResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*LookupOrganizationWebhookUsingSecretIDResponse)
	if !ok {
		that2, ok := that.(LookupOrganizationWebhookUsingSecretIDResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Webhook.Equal(that1.Webhook) {
		return false
	}
	return true
}
func (this *LookupOrgRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&users.LookupOrgRequest{")
	s = append(s, "Cookie: "+fmt.Sprintf("%#v", this.Cookie)+",\n")
	s = append(s, "OrgExternalID: "+fmt.Sprintf("%#v", this.OrgExternalID)+",\n")
	s = append(s, "AuthorizeFor: "+fmt.Sprintf("%#v", this.AuthorizeFor)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LookupOrgResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&users.LookupOrgResponse{")
	s = append(s, "OrganizationID: "+fmt.Sprintf("%#v", this.OrganizationID)+",\n")
	s = append(s, "UserID: "+fmt.Sprintf("%#v", this.UserID)+",\n")
	s = append(s, "FeatureFlags: "+fmt.Sprintf("%#v", this.FeatureFlags)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LookupUsingTokenRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&users.LookupUsingTokenRequest{")
	s = append(s, "Token: "+fmt.Sprintf("%#v", this.Token)+",\n")
	s = append(s, "AuthorizeFor: "+fmt.Sprintf("%#v", this.AuthorizeFor)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LookupUsingTokenResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&users.LookupUsingTokenResponse{")
	s = append(s, "OrganizationID: "+fmt.Sprintf("%#v", this.OrganizationID)+",\n")
	s = append(s, "FeatureFlags: "+fmt.Sprintf("%#v", this.FeatureFlags)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LookupAdminRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&users.LookupAdminRequest{")
	s = append(s, "Cookie: "+fmt.Sprintf("%#v", this.Cookie)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LookupAdminResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&users.LookupAdminResponse{")
	s = append(s, "AdminID: "+fmt.Sprintf("%#v", this.AdminID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LookupUserRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&users.LookupUserRequest{")
	s = append(s, "Cookie: "+fmt.Sprintf("%#v", this.Cookie)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LookupUserResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&users.LookupUserResponse{")
	s = append(s, "UserID: "+fmt.Sprintf("%#v", this.UserID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetOrganizationsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&users.GetOrganizationsRequest{")
	s = append(s, "Query: "+fmt.Sprintf("%#v", this.Query)+",\n")
	s = append(s, "PageNumber: "+fmt.Sprintf("%#v", this.PageNumber)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetOrganizationsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&users.GetOrganizationsResponse{")
	if this.Organizations != nil {
		vs := make([]*Organization, len(this.Organizations))
		for i := range vs {
			vs[i] = &this.Organizations[i]
		}
		s = append(s, "Organizations: "+fmt.Sprintf("%#v", vs)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetBillableOrganizationsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&users.GetBillableOrganizationsRequest{")
	s = append(s, "Now: "+fmt.Sprintf("%#v", this.Now)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetBillableOrganizationsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&users.GetBillableOrganizationsResponse{")
	if this.Organizations != nil {
		vs := make([]*Organization, len(this.Organizations))
		for i := range vs {
			vs[i] = &this.Organizations[i]
		}
		s = append(s, "Organizations: "+fmt.Sprintf("%#v", vs)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetTrialOrganizationsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&users.GetTrialOrganizationsRequest{")
	s = append(s, "Now: "+fmt.Sprintf("%#v", this.Now)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetTrialOrganizationsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&users.GetTrialOrganizationsResponse{")
	if this.Organizations != nil {
		vs := make([]*Organization, len(this.Organizations))
		for i := range vs {
			vs[i] = &this.Organizations[i]
		}
		s = append(s, "Organizations: "+fmt.Sprintf("%#v", vs)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetDelinquentOrganizationsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&users.GetDelinquentOrganizationsRequest{")
	s = append(s, "Now: "+fmt.Sprintf("%#v", this.Now)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetDelinquentOrganizationsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&users.GetDelinquentOrganizationsResponse{")
	if this.Organizations != nil {
		vs := make([]*Organization, len(this.Organizations))
		for i := range vs {
			vs[i] = &this.Organizations[i]
		}
		s = append(s, "Organizations: "+fmt.Sprintf("%#v", vs)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetOrganizationRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&users.GetOrganizationRequest{")
	if this.ID != nil {
		s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetOrganizationRequest_ExternalID) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&users.GetOrganizationRequest_ExternalID{` +
		`ExternalID:` + fmt.Sprintf("%#v", this.ExternalID) + `}`}, ", ")
	return s
}
func (this *GetOrganizationRequest_GCPExternalAccountID) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&users.GetOrganizationRequest_GCPExternalAccountID{` +
		`GCPExternalAccountID:` + fmt.Sprintf("%#v", this.GCPExternalAccountID) + `}`}, ", ")
	return s
}
func (this *GetOrganizationRequest_InternalID) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&users.GetOrganizationRequest_InternalID{` +
		`InternalID:` + fmt.Sprintf("%#v", this.InternalID) + `}`}, ", ")
	return s
}
func (this *GetOrganizationResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&users.GetOrganizationResponse{")
	s = append(s, "Organization: "+strings.Replace(this.Organization.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Organization) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 30)
	s = append(s, "&users.Organization{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "ExternalID: "+fmt.Sprintf("%#v", this.ExternalID)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "ProbeToken: "+fmt.Sprintf("%#v", this.ProbeToken)+",\n")
	s = append(s, "CreatedAt: "+fmt.Sprintf("%#v", this.CreatedAt)+",\n")
	s = append(s, "FeatureFlags: "+fmt.Sprintf("%#v", this.FeatureFlags)+",\n")
	s = append(s, "RefuseDataAccess: "+fmt.Sprintf("%#v", this.RefuseDataAccess)+",\n")
	s = append(s, "RefuseDataUpload: "+fmt.Sprintf("%#v", this.RefuseDataUpload)+",\n")
	s = append(s, "FirstSeenConnectedAt: "+fmt.Sprintf("%#v", this.FirstSeenConnectedAt)+",\n")
	s = append(s, "Platform: "+fmt.Sprintf("%#v", this.Platform)+",\n")
	s = append(s, "Environment: "+fmt.Sprintf("%#v", this.Environment)+",\n")
	s = append(s, "TrialExpiresAt: "+fmt.Sprintf("%#v", this.TrialExpiresAt)+",\n")
	s = append(s, "ZuoraAccountNumber: "+fmt.Sprintf("%#v", this.ZuoraAccountNumber)+",\n")
	s = append(s, "ZuoraAccountCreatedAt: "+fmt.Sprintf("%#v", this.ZuoraAccountCreatedAt)+",\n")
	s = append(s, "TrialPendingExpiryNotifiedAt: "+fmt.Sprintf("%#v", this.TrialPendingExpiryNotifiedAt)+",\n")
	s = append(s, "TrialExpiredNotifiedAt: "+fmt.Sprintf("%#v", this.TrialExpiredNotifiedAt)+",\n")
	if this.GCP != nil {
		s = append(s, "GCP: "+fmt.Sprintf("%#v", this.GCP)+",\n")
	}
	s = append(s, "TeamID: "+fmt.Sprintf("%#v", this.TeamID)+",\n")
	s = append(s, "TeamExternalID: "+fmt.Sprintf("%#v", this.TeamExternalID)+",\n")
	s = append(s, "DeletedAt: "+fmt.Sprintf("%#v", this.DeletedAt)+",\n")
	s = append(s, "Cleanup: "+fmt.Sprintf("%#v", this.Cleanup)+",\n")
	s = append(s, "FirstSeenFluxConnectedAt: "+fmt.Sprintf("%#v", this.FirstSeenFluxConnectedAt)+",\n")
	s = append(s, "FirstSeenNetConnectedAt: "+fmt.Sprintf("%#v", this.FirstSeenNetConnectedAt)+",\n")
	s = append(s, "FirstSeenPromConnectedAt: "+fmt.Sprintf("%#v", this.FirstSeenPromConnectedAt)+",\n")
	s = append(s, "FirstSeenScopeConnectedAt: "+fmt.Sprintf("%#v", this.FirstSeenScopeConnectedAt)+",\n")
	s = append(s, "RefuseDataReason: "+fmt.Sprintf("%#v", this.RefuseDataReason)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GoogleCloudPlatform) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&users.GoogleCloudPlatform{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "ExternalAccountID: "+fmt.Sprintf("%#v", this.ExternalAccountID)+",\n")
	s = append(s, "Activated: "+fmt.Sprintf("%#v", this.Activated)+",\n")
	s = append(s, "CreatedAt: "+fmt.Sprintf("%#v", this.CreatedAt)+",\n")
	s = append(s, "ConsumerID: "+fmt.Sprintf("%#v", this.ConsumerID)+",\n")
	s = append(s, "SubscriptionName: "+fmt.Sprintf("%#v", this.SubscriptionName)+",\n")
	s = append(s, "SubscriptionLevel: "+fmt.Sprintf("%#v", this.SubscriptionLevel)+",\n")
	s = append(s, "SubscriptionStatus: "+fmt.Sprintf("%#v", this.SubscriptionStatus)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetGCPRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&users.GetGCPRequest{")
	s = append(s, "ExternalAccountID: "+fmt.Sprintf("%#v", this.ExternalAccountID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetGCPResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&users.GetGCPResponse{")
	s = append(s, "GCP: "+strings.Replace(this.GCP.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateGCPRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&users.UpdateGCPRequest{")
	if this.GCP != nil {
		s = append(s, "GCP: "+fmt.Sprintf("%#v", this.GCP)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateGCPResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&users.UpdateGCPResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SetOrganizationZuoraAccountRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&users.SetOrganizationZuoraAccountRequest{")
	s = append(s, "ExternalID: "+fmt.Sprintf("%#v", this.ExternalID)+",\n")
	s = append(s, "Number: "+fmt.Sprintf("%#v", this.Number)+",\n")
	s = append(s, "CreatedAt: "+fmt.Sprintf("%#v", this.CreatedAt)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SetOrganizationZuoraAccountResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&users.SetOrganizationZuoraAccountResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SetOrganizationFlagRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&users.SetOrganizationFlagRequest{")
	s = append(s, "ExternalID: "+fmt.Sprintf("%#v", this.ExternalID)+",\n")
	s = append(s, "Flag: "+fmt.Sprintf("%#v", this.Flag)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SetOrganizationFlagResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&users.SetOrganizationFlagResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetUserRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&users.GetUserRequest{")
	s = append(s, "UserID: "+fmt.Sprintf("%#v", this.UserID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetUserResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&users.GetUserResponse{")
	s = append(s, "User: "+strings.Replace(this.User.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *User) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&users.User{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "Email: "+fmt.Sprintf("%#v", this.Email)+",\n")
	s = append(s, "Token: "+fmt.Sprintf("%#v", this.Token)+",\n")
	s = append(s, "TokenCreatedAt: "+fmt.Sprintf("%#v", this.TokenCreatedAt)+",\n")
	s = append(s, "FirstLoginAt: "+fmt.Sprintf("%#v", this.FirstLoginAt)+",\n")
	s = append(s, "CreatedAt: "+fmt.Sprintf("%#v", this.CreatedAt)+",\n")
	s = append(s, "Admin: "+fmt.Sprintf("%#v", this.Admin)+",\n")
	s = append(s, "LastLoginAt: "+fmt.Sprintf("%#v", this.LastLoginAt)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NotifyTrialPendingExpiryRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&users.NotifyTrialPendingExpiryRequest{")
	s = append(s, "ExternalID: "+fmt.Sprintf("%#v", this.ExternalID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NotifyTrialPendingExpiryResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&users.NotifyTrialPendingExpiryResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NotifyTrialExpiredRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&users.NotifyTrialExpiredRequest{")
	s = append(s, "ExternalID: "+fmt.Sprintf("%#v", this.ExternalID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NotifyTrialExpiredResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&users.NotifyTrialExpiredResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NotifyRefuseDataUploadRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&users.NotifyRefuseDataUploadRequest{")
	s = append(s, "ExternalID: "+fmt.Sprintf("%#v", this.ExternalID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NotifyRefuseDataUploadResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&users.NotifyRefuseDataUploadResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Team) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&users.Team{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "ExternalID: "+fmt.Sprintf("%#v", this.ExternalID)+",\n")
	s = append(s, "ZuoraAccountNumber: "+fmt.Sprintf("%#v", this.ZuoraAccountNumber)+",\n")
	s = append(s, "ZuoraAccountCreatedAt: "+fmt.Sprintf("%#v", this.ZuoraAccountCreatedAt)+",\n")
	s = append(s, "TrialExpiresAt: "+fmt.Sprintf("%#v", this.TrialExpiresAt)+",\n")
	s = append(s, "TrialPendingExpiryNotifiedAt: "+fmt.Sprintf("%#v", this.TrialPendingExpiryNotifiedAt)+",\n")
	s = append(s, "TrialExpiredNotifiedAt: "+fmt.Sprintf("%#v", this.TrialExpiredNotifiedAt)+",\n")
	s = append(s, "CreatedAt: "+fmt.Sprintf("%#v", this.CreatedAt)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Empty) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&users.Empty{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Summary) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&users.Summary{")
	if this.Entries != nil {
		s = append(s, "Entries: "+fmt.Sprintf("%#v", this.Entries)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SummaryEntry) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 26)
	s = append(s, "&users.SummaryEntry{")
	s = append(s, "TeamExternalID: "+fmt.Sprintf("%#v", this.TeamExternalID)+",\n")
	s = append(s, "TeamName: "+fmt.Sprintf("%#v", this.TeamName)+",\n")
	s = append(s, "OrgID: "+fmt.Sprintf("%#v", this.OrgID)+",\n")
	s = append(s, "OrgExternalID: "+fmt.Sprintf("%#v", this.OrgExternalID)+",\n")
	s = append(s, "OrgName: "+fmt.Sprintf("%#v", this.OrgName)+",\n")
	s = append(s, "Emails: "+fmt.Sprintf("%#v", this.Emails)+",\n")
	s = append(s, "OrgCreatedAt: "+fmt.Sprintf("%#v", this.OrgCreatedAt)+",\n")
	s = append(s, "FirstSeenConnectedAt: "+fmt.Sprintf("%#v", this.FirstSeenConnectedAt)+",\n")
	s = append(s, "Platform: "+fmt.Sprintf("%#v", this.Platform)+",\n")
	s = append(s, "Environment: "+fmt.Sprintf("%#v", this.Environment)+",\n")
	s = append(s, "TrialExpiresAt: "+fmt.Sprintf("%#v", this.TrialExpiresAt)+",\n")
	s = append(s, "TrialPendingExpiryNotifiedAt: "+fmt.Sprintf("%#v", this.TrialPendingExpiryNotifiedAt)+",\n")
	s = append(s, "TrialExpiredNotifiedAt: "+fmt.Sprintf("%#v", this.TrialExpiredNotifiedAt)+",\n")
	s = append(s, "BillingEnabled: "+fmt.Sprintf("%#v", this.BillingEnabled)+",\n")
	s = append(s, "RefuseDataAccess: "+fmt.Sprintf("%#v", this.RefuseDataAccess)+",\n")
	s = append(s, "RefuseDataUpload: "+fmt.Sprintf("%#v", this.RefuseDataUpload)+",\n")
	s = append(s, "ZuoraAccountNumber: "+fmt.Sprintf("%#v", this.ZuoraAccountNumber)+",\n")
	s = append(s, "ZuoraAccountCreatedAt: "+fmt.Sprintf("%#v", this.ZuoraAccountCreatedAt)+",\n")
	s = append(s, "GCPAccountExternalID: "+fmt.Sprintf("%#v", this.GCPAccountExternalID)+",\n")
	s = append(s, "GCPAccountCreatedAt: "+fmt.Sprintf("%#v", this.GCPAccountCreatedAt)+",\n")
	s = append(s, "GCPAccountSubscriptionLevel: "+fmt.Sprintf("%#v", this.GCPAccountSubscriptionLevel)+",\n")
	s = append(s, "GCPAccountSubscriptionStatus: "+fmt.Sprintf("%#v", this.GCPAccountSubscriptionStatus)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Webhook) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&users.Webhook{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "OrganizationID: "+fmt.Sprintf("%#v", this.OrganizationID)+",\n")
	s = append(s, "IntegrationType: "+fmt.Sprintf("%#v", this.IntegrationType)+",\n")
	s = append(s, "SecretID: "+fmt.Sprintf("%#v", this.SecretID)+",\n")
	s = append(s, "SecretSigningKey: "+fmt.Sprintf("%#v", this.SecretSigningKey)+",\n")
	s = append(s, "CreatedAt: "+fmt.Sprintf("%#v", this.CreatedAt)+",\n")
	s = append(s, "DeletedAt: "+fmt.Sprintf("%#v", this.DeletedAt)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LookupOrganizationWebhookUsingSecretIDRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&users.LookupOrganizationWebhookUsingSecretIDRequest{")
	s = append(s, "OrgExternalID: "+fmt.Sprintf("%#v", this.OrgExternalID)+",\n")
	s = append(s, "SecretID: "+fmt.Sprintf("%#v", this.SecretID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LookupOrganizationWebhookUsingSecretIDResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&users.LookupOrganizationWebhookUsingSecretIDResponse{")
	if this.Webhook != nil {
		s = append(s, "Webhook: "+fmt.Sprintf("%#v", this.Webhook)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringUsers(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Users service

type UsersClient interface {
	// LookupOrg authenticates & authorizes a cookie for access to an org by extenal ID.
	LookupOrg(ctx context.Context, in *LookupOrgRequest, opts ...grpc.CallOption) (*LookupOrgResponse, error)
	// LookupUsingToken authenticates & authorizes a token for access to an org.
	LookupUsingToken(ctx context.Context, in *LookupUsingTokenRequest, opts ...grpc.CallOption) (*LookupUsingTokenResponse, error)
	// LookupAdmin authenticates & authorizes a cookie for admin access.
	LookupAdmin(ctx context.Context, in *LookupAdminRequest, opts ...grpc.CallOption) (*LookupAdminResponse, error)
	// LookupUser authenticates a cookie.
	LookupUser(ctx context.Context, in *LookupUserRequest, opts ...grpc.CallOption) (*LookupUserResponse, error)
	// GetOrganizations returns a list of all organizations by default. See
	// GetOrganizationsRequest for more details.
	GetOrganizations(ctx context.Context, in *GetOrganizationsRequest, opts ...grpc.CallOption) (*GetOrganizationsResponse, error)
	// GetBillableOrganizations returns all of the organizations that are past
	// their trial period and have billing enabled. Currently knows nothing
	// about payment status, so will include organizations that are well past
	// their trial period but haven't provided credit card details.
	GetBillableOrganizations(ctx context.Context, in *GetBillableOrganizationsRequest, opts ...grpc.CallOption) (*GetBillableOrganizationsResponse, error)
	// GetTrialOrganizations returns all organizations that are currently in their
	// trial period.
	GetTrialOrganizations(ctx context.Context, in *GetTrialOrganizationsRequest, opts ...grpc.CallOption) (*GetTrialOrganizationsResponse, error)
	// GetDelinquentOrganizations returns all organizations that are beyond their
	// trial period and haven't yet supplied any payment method. We determine this
	// by means of having a Zuora account.
	GetDelinquentOrganizations(ctx context.Context, in *GetDelinquentOrganizationsRequest, opts ...grpc.CallOption) (*GetDelinquentOrganizationsResponse, error)
	GetOrganization(ctx context.Context, in *GetOrganizationRequest, opts ...grpc.CallOption) (*GetOrganizationResponse, error)
	SetOrganizationFlag(ctx context.Context, in *SetOrganizationFlagRequest, opts ...grpc.CallOption) (*SetOrganizationFlagResponse, error)
	// SetOrganizationZuoraAccount updates zuora account information. It should only
	// be called when changed which denotes that an account has been created. If you
	// omit `ZuoraAccountCreatedAt` it will be automatically updated to now.
	SetOrganizationZuoraAccount(ctx context.Context, in *SetOrganizationZuoraAccountRequest, opts ...grpc.CallOption) (*SetOrganizationZuoraAccountResponse, error)
	// GetGCP returns the Google Cloud Platform entry.
	GetGCP(ctx context.Context, in *GetGCPRequest, opts ...grpc.CallOption) (*GetGCPResponse, error)
	// UpdateGCP updates the Google Cloud Platform entry.
	UpdateGCP(ctx context.Context, in *UpdateGCPRequest, opts ...grpc.CallOption) (*UpdateGCPResponse, error)
	// GetUser returns details for a user
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
	// NotifyTrialPendingExpiry sends a "Trial expiring soon" notification
	// to this user and records the date sent.
	NotifyTrialPendingExpiry(ctx context.Context, in *NotifyTrialPendingExpiryRequest, opts ...grpc.CallOption) (*NotifyTrialPendingExpiryResponse, error)
	// NotifyTrialExpired sends a "Trial expired" notification to this user
	// and records the date sent.
	NotifyTrialExpired(ctx context.Context, in *NotifyTrialExpiredRequest, opts ...grpc.CallOption) (*NotifyTrialExpiredResponse, error)
	// NotifyRefuseDataUpload sends a "data upload blocked" notification to the members
	// of this organization.
	NotifyRefuseDataUpload(ctx context.Context, in *NotifyRefuseDataUploadRequest, opts ...grpc.CallOption) (*NotifyRefuseDataUploadResponse, error)
	// GetSummary exports a summary of the DB.
	// WARNING: this is a relatively expensive query, and basically exports the entire DB.
	GetSummary(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Summary, error)
	// LookupOrganizationWebhookUsingSecretID returns a Webhook given the external org ID and the webhook secret ID
	LookupOrganizationWebhookUsingSecretID(ctx context.Context, in *LookupOrganizationWebhookUsingSecretIDRequest, opts ...grpc.CallOption) (*LookupOrganizationWebhookUsingSecretIDResponse, error)
}

type usersClient struct {
	cc *grpc.ClientConn
}

func NewUsersClient(cc *grpc.ClientConn) UsersClient {
	return &usersClient{cc}
}

func (c *usersClient) LookupOrg(ctx context.Context, in *LookupOrgRequest, opts ...grpc.CallOption) (*LookupOrgResponse, error) {
	out := new(LookupOrgResponse)
	err := grpc.Invoke(ctx, "/users.Users/LookupOrg", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) LookupUsingToken(ctx context.Context, in *LookupUsingTokenRequest, opts ...grpc.CallOption) (*LookupUsingTokenResponse, error) {
	out := new(LookupUsingTokenResponse)
	err := grpc.Invoke(ctx, "/users.Users/LookupUsingToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) LookupAdmin(ctx context.Context, in *LookupAdminRequest, opts ...grpc.CallOption) (*LookupAdminResponse, error) {
	out := new(LookupAdminResponse)
	err := grpc.Invoke(ctx, "/users.Users/LookupAdmin", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) LookupUser(ctx context.Context, in *LookupUserRequest, opts ...grpc.CallOption) (*LookupUserResponse, error) {
	out := new(LookupUserResponse)
	err := grpc.Invoke(ctx, "/users.Users/LookupUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) GetOrganizations(ctx context.Context, in *GetOrganizationsRequest, opts ...grpc.CallOption) (*GetOrganizationsResponse, error) {
	out := new(GetOrganizationsResponse)
	err := grpc.Invoke(ctx, "/users.Users/GetOrganizations", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) GetBillableOrganizations(ctx context.Context, in *GetBillableOrganizationsRequest, opts ...grpc.CallOption) (*GetBillableOrganizationsResponse, error) {
	out := new(GetBillableOrganizationsResponse)
	err := grpc.Invoke(ctx, "/users.Users/GetBillableOrganizations", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) GetTrialOrganizations(ctx context.Context, in *GetTrialOrganizationsRequest, opts ...grpc.CallOption) (*GetTrialOrganizationsResponse, error) {
	out := new(GetTrialOrganizationsResponse)
	err := grpc.Invoke(ctx, "/users.Users/GetTrialOrganizations", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) GetDelinquentOrganizations(ctx context.Context, in *GetDelinquentOrganizationsRequest, opts ...grpc.CallOption) (*GetDelinquentOrganizationsResponse, error) {
	out := new(GetDelinquentOrganizationsResponse)
	err := grpc.Invoke(ctx, "/users.Users/GetDelinquentOrganizations", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) GetOrganization(ctx context.Context, in *GetOrganizationRequest, opts ...grpc.CallOption) (*GetOrganizationResponse, error) {
	out := new(GetOrganizationResponse)
	err := grpc.Invoke(ctx, "/users.Users/GetOrganization", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) SetOrganizationFlag(ctx context.Context, in *SetOrganizationFlagRequest, opts ...grpc.CallOption) (*SetOrganizationFlagResponse, error) {
	out := new(SetOrganizationFlagResponse)
	err := grpc.Invoke(ctx, "/users.Users/SetOrganizationFlag", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) SetOrganizationZuoraAccount(ctx context.Context, in *SetOrganizationZuoraAccountRequest, opts ...grpc.CallOption) (*SetOrganizationZuoraAccountResponse, error) {
	out := new(SetOrganizationZuoraAccountResponse)
	err := grpc.Invoke(ctx, "/users.Users/SetOrganizationZuoraAccount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) GetGCP(ctx context.Context, in *GetGCPRequest, opts ...grpc.CallOption) (*GetGCPResponse, error) {
	out := new(GetGCPResponse)
	err := grpc.Invoke(ctx, "/users.Users/GetGCP", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) UpdateGCP(ctx context.Context, in *UpdateGCPRequest, opts ...grpc.CallOption) (*UpdateGCPResponse, error) {
	out := new(UpdateGCPResponse)
	err := grpc.Invoke(ctx, "/users.Users/UpdateGCP", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	out := new(GetUserResponse)
	err := grpc.Invoke(ctx, "/users.Users/GetUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) NotifyTrialPendingExpiry(ctx context.Context, in *NotifyTrialPendingExpiryRequest, opts ...grpc.CallOption) (*NotifyTrialPendingExpiryResponse, error) {
	out := new(NotifyTrialPendingExpiryResponse)
	err := grpc.Invoke(ctx, "/users.Users/NotifyTrialPendingExpiry", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) NotifyTrialExpired(ctx context.Context, in *NotifyTrialExpiredRequest, opts ...grpc.CallOption) (*NotifyTrialExpiredResponse, error) {
	out := new(NotifyTrialExpiredResponse)
	err := grpc.Invoke(ctx, "/users.Users/NotifyTrialExpired", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) NotifyRefuseDataUpload(ctx context.Context, in *NotifyRefuseDataUploadRequest, opts ...grpc.CallOption) (*NotifyRefuseDataUploadResponse, error) {
	out := new(NotifyRefuseDataUploadResponse)
	err := grpc.Invoke(ctx, "/users.Users/NotifyRefuseDataUpload", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) GetSummary(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Summary, error) {
	out := new(Summary)
	err := grpc.Invoke(ctx, "/users.Users/GetSummary", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) LookupOrganizationWebhookUsingSecretID(ctx context.Context, in *LookupOrganizationWebhookUsingSecretIDRequest, opts ...grpc.CallOption) (*LookupOrganizationWebhookUsingSecretIDResponse, error) {
	out := new(LookupOrganizationWebhookUsingSecretIDResponse)
	err := grpc.Invoke(ctx, "/users.Users/LookupOrganizationWebhookUsingSecretID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Users service

type UsersServer interface {
	// LookupOrg authenticates & authorizes a cookie for access to an org by extenal ID.
	LookupOrg(context.Context, *LookupOrgRequest) (*LookupOrgResponse, error)
	// LookupUsingToken authenticates & authorizes a token for access to an org.
	LookupUsingToken(context.Context, *LookupUsingTokenRequest) (*LookupUsingTokenResponse, error)
	// LookupAdmin authenticates & authorizes a cookie for admin access.
	LookupAdmin(context.Context, *LookupAdminRequest) (*LookupAdminResponse, error)
	// LookupUser authenticates a cookie.
	LookupUser(context.Context, *LookupUserRequest) (*LookupUserResponse, error)
	// GetOrganizations returns a list of all organizations by default. See
	// GetOrganizationsRequest for more details.
	GetOrganizations(context.Context, *GetOrganizationsRequest) (*GetOrganizationsResponse, error)
	// GetBillableOrganizations returns all of the organizations that are past
	// their trial period and have billing enabled. Currently knows nothing
	// about payment status, so will include organizations that are well past
	// their trial period but haven't provided credit card details.
	GetBillableOrganizations(context.Context, *GetBillableOrganizationsRequest) (*GetBillableOrganizationsResponse, error)
	// GetTrialOrganizations returns all organizations that are currently in their
	// trial period.
	GetTrialOrganizations(context.Context, *GetTrialOrganizationsRequest) (*GetTrialOrganizationsResponse, error)
	// GetDelinquentOrganizations returns all organizations that are beyond their
	// trial period and haven't yet supplied any payment method. We determine this
	// by means of having a Zuora account.
	GetDelinquentOrganizations(context.Context, *GetDelinquentOrganizationsRequest) (*GetDelinquentOrganizationsResponse, error)
	GetOrganization(context.Context, *GetOrganizationRequest) (*GetOrganizationResponse, error)
	SetOrganizationFlag(context.Context, *SetOrganizationFlagRequest) (*SetOrganizationFlagResponse, error)
	// SetOrganizationZuoraAccount updates zuora account information. It should only
	// be called when changed which denotes that an account has been created. If you
	// omit `ZuoraAccountCreatedAt` it will be automatically updated to now.
	SetOrganizationZuoraAccount(context.Context, *SetOrganizationZuoraAccountRequest) (*SetOrganizationZuoraAccountResponse, error)
	// GetGCP returns the Google Cloud Platform entry.
	GetGCP(context.Context, *GetGCPRequest) (*GetGCPResponse, error)
	// UpdateGCP updates the Google Cloud Platform entry.
	UpdateGCP(context.Context, *UpdateGCPRequest) (*UpdateGCPResponse, error)
	// GetUser returns details for a user
	GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error)
	// NotifyTrialPendingExpiry sends a "Trial expiring soon" notification
	// to this user and records the date sent.
	NotifyTrialPendingExpiry(context.Context, *NotifyTrialPendingExpiryRequest) (*NotifyTrialPendingExpiryResponse, error)
	// NotifyTrialExpired sends a "Trial expired" notification to this user
	// and records the date sent.
	NotifyTrialExpired(context.Context, *NotifyTrialExpiredRequest) (*NotifyTrialExpiredResponse, error)
	// NotifyRefuseDataUpload sends a "data upload blocked" notification to the members
	// of this organization.
	NotifyRefuseDataUpload(context.Context, *NotifyRefuseDataUploadRequest) (*NotifyRefuseDataUploadResponse, error)
	// GetSummary exports a summary of the DB.
	// WARNING: this is a relatively expensive query, and basically exports the entire DB.
	GetSummary(context.Context, *Empty) (*Summary, error)
	// LookupOrganizationWebhookUsingSecretID returns a Webhook given the external org ID and the webhook secret ID
	LookupOrganizationWebhookUsingSecretID(context.Context, *LookupOrganizationWebhookUsingSecretIDRequest) (*LookupOrganizationWebhookUsingSecretIDResponse, error)
}

func RegisterUsersServer(s *grpc.Server, srv UsersServer) {
	s.RegisterService(&_Users_serviceDesc, srv)
}

func _Users_LookupOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupOrgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).LookupOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.Users/LookupOrg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).LookupOrg(ctx, req.(*LookupOrgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_LookupUsingToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupUsingTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).LookupUsingToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.Users/LookupUsingToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).LookupUsingToken(ctx, req.(*LookupUsingTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_LookupAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).LookupAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.Users/LookupAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).LookupAdmin(ctx, req.(*LookupAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_LookupUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).LookupUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.Users/LookupUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).LookupUser(ctx, req.(*LookupUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_GetOrganizations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).GetOrganizations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.Users/GetOrganizations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).GetOrganizations(ctx, req.(*GetOrganizationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_GetBillableOrganizations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBillableOrganizationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).GetBillableOrganizations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.Users/GetBillableOrganizations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).GetBillableOrganizations(ctx, req.(*GetBillableOrganizationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_GetTrialOrganizations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTrialOrganizationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).GetTrialOrganizations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.Users/GetTrialOrganizations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).GetTrialOrganizations(ctx, req.(*GetTrialOrganizationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_GetDelinquentOrganizations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDelinquentOrganizationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).GetDelinquentOrganizations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.Users/GetDelinquentOrganizations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).GetDelinquentOrganizations(ctx, req.(*GetDelinquentOrganizationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_GetOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).GetOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.Users/GetOrganization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).GetOrganization(ctx, req.(*GetOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_SetOrganizationFlag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetOrganizationFlagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).SetOrganizationFlag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.Users/SetOrganizationFlag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).SetOrganizationFlag(ctx, req.(*SetOrganizationFlagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_SetOrganizationZuoraAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetOrganizationZuoraAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).SetOrganizationZuoraAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.Users/SetOrganizationZuoraAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).SetOrganizationZuoraAccount(ctx, req.(*SetOrganizationZuoraAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_GetGCP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGCPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).GetGCP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.Users/GetGCP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).GetGCP(ctx, req.(*GetGCPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_UpdateGCP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGCPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).UpdateGCP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.Users/UpdateGCP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).UpdateGCP(ctx, req.(*UpdateGCPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.Users/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_NotifyTrialPendingExpiry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotifyTrialPendingExpiryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).NotifyTrialPendingExpiry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.Users/NotifyTrialPendingExpiry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).NotifyTrialPendingExpiry(ctx, req.(*NotifyTrialPendingExpiryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_NotifyTrialExpired_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotifyTrialExpiredRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).NotifyTrialExpired(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.Users/NotifyTrialExpired",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).NotifyTrialExpired(ctx, req.(*NotifyTrialExpiredRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_NotifyRefuseDataUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotifyRefuseDataUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).NotifyRefuseDataUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.Users/NotifyRefuseDataUpload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).NotifyRefuseDataUpload(ctx, req.(*NotifyRefuseDataUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_GetSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).GetSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.Users/GetSummary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).GetSummary(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_LookupOrganizationWebhookUsingSecretID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupOrganizationWebhookUsingSecretIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).LookupOrganizationWebhookUsingSecretID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.Users/LookupOrganizationWebhookUsingSecretID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).LookupOrganizationWebhookUsingSecretID(ctx, req.(*LookupOrganizationWebhookUsingSecretIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Users_serviceDesc = grpc.ServiceDesc{
	ServiceName: "users.Users",
	HandlerType: (*UsersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LookupOrg",
			Handler:    _Users_LookupOrg_Handler,
		},
		{
			MethodName: "LookupUsingToken",
			Handler:    _Users_LookupUsingToken_Handler,
		},
		{
			MethodName: "LookupAdmin",
			Handler:    _Users_LookupAdmin_Handler,
		},
		{
			MethodName: "LookupUser",
			Handler:    _Users_LookupUser_Handler,
		},
		{
			MethodName: "GetOrganizations",
			Handler:    _Users_GetOrganizations_Handler,
		},
		{
			MethodName: "GetBillableOrganizations",
			Handler:    _Users_GetBillableOrganizations_Handler,
		},
		{
			MethodName: "GetTrialOrganizations",
			Handler:    _Users_GetTrialOrganizations_Handler,
		},
		{
			MethodName: "GetDelinquentOrganizations",
			Handler:    _Users_GetDelinquentOrganizations_Handler,
		},
		{
			MethodName: "GetOrganization",
			Handler:    _Users_GetOrganization_Handler,
		},
		{
			MethodName: "SetOrganizationFlag",
			Handler:    _Users_SetOrganizationFlag_Handler,
		},
		{
			MethodName: "SetOrganizationZuoraAccount",
			Handler:    _Users_SetOrganizationZuoraAccount_Handler,
		},
		{
			MethodName: "GetGCP",
			Handler:    _Users_GetGCP_Handler,
		},
		{
			MethodName: "UpdateGCP",
			Handler:    _Users_UpdateGCP_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _Users_GetUser_Handler,
		},
		{
			MethodName: "NotifyTrialPendingExpiry",
			Handler:    _Users_NotifyTrialPendingExpiry_Handler,
		},
		{
			MethodName: "NotifyTrialExpired",
			Handler:    _Users_NotifyTrialExpired_Handler,
		},
		{
			MethodName: "NotifyRefuseDataUpload",
			Handler:    _Users_NotifyRefuseDataUpload_Handler,
		},
		{
			MethodName: "GetSummary",
			Handler:    _Users_GetSummary_Handler,
		},
		{
			MethodName: "LookupOrganizationWebhookUsingSecretID",
			Handler:    _Users_LookupOrganizationWebhookUsingSecretID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "users.proto",
}

func (m *LookupOrgRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LookupOrgRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Cookie) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintUsers(dAtA, i, uint64(len(m.Cookie)))
		i += copy(dAtA[i:], m.Cookie)
	}
	if len(m.OrgExternalID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintUsers(dAtA, i, uint64(len(m.OrgExternalID)))
		i += copy(dAtA[i:], m.OrgExternalID)
	}
	if m.AuthorizeFor != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintUsers(dAtA, i, uint64(m.AuthorizeFor))
	}
	return i, nil
}

func (m *LookupOrgResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LookupOrgResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.OrganizationID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintUsers(dAtA, i, uint64(len(m.OrganizationID)))
		i += copy(dAtA[i:], m.OrganizationID)
	}
	if len(m.UserID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintUsers(dAtA, i, uint64(len(m.UserID)))
		i += copy(dAtA[i:], m.UserID)
	}
	if len(m.FeatureFlags) > 0 {
		for _, s := range m.FeatureFlags {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *LookupUsingTokenRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LookupUsingTokenRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintUsers(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	if m.AuthorizeFor != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUsers(dAtA, i, uint64(m.AuthorizeFor))
	}
	return i, nil
}

func (m *LookupUsingTokenResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LookupUsingTokenResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.OrganizationID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintUsers(dAtA, i, uint64(len(m.OrganizationID)))
		i += copy(dAtA[i:], m.OrganizationID)
	}
	if len(m.FeatureFlags) > 0 {
		for _, s := range m.FeatureFlags {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *LookupAdminRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LookupAdminRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Cookie) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintUsers(dAtA, i, uint64(len(m.Cookie)))
		i += copy(dAtA[i:], m.Cookie)
	}
	return i, nil
}

func (m *LookupAdminResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LookupAdminResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AdminID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintUsers(dAtA, i, uint64(len(m.AdminID)))
		i += copy(dAtA[i:], m.AdminID)
	}
	return i, nil
}

func (m *LookupUserRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LookupUserRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Cookie) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintUsers(dAtA, i, uint64(len(m.Cookie)))
		i += copy(dAtA[i:], m.Cookie)
	}
	return i, nil
}

func (m *LookupUserResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LookupUserResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UserID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintUsers(dAtA, i, uint64(len(m.UserID)))
		i += copy(dAtA[i:], m.UserID)
	}
	return i, nil
}

func (m *GetOrganizationsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetOrganizationsRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Query) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintUsers(dAtA, i, uint64(len(m.Query)))
		i += copy(dAtA[i:], m.Query)
	}
	if m.PageNumber != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUsers(dAtA, i, uint64(m.PageNumber))
	}
	return i, nil
}

func (m *GetOrganizationsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetOrganizationsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Organizations) > 0 {
		for _, msg := range m.Organizations {
			dAtA[i] = 0xa
			i++
			i = encodeVarintUsers(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GetBillableOrganizationsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBillableOrganizationsRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintUsers(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.Now)))
	n1, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Now, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	return i, nil
}

func (m *GetBillableOrganizationsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBillableOrganizationsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Organizations) > 0 {
		for _, msg := range m.Organizations {
			dAtA[i] = 0xa
			i++
			i = encodeVarintUsers(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GetTrialOrganizationsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTrialOrganizationsRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintUsers(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.Now)))
	n2, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Now, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	return i, nil
}

func (m *GetTrialOrganizationsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTrialOrganizationsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Organizations) > 0 {
		for _, msg := range m.Organizations {
			dAtA[i] = 0xa
			i++
			i = encodeVarintUsers(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GetDelinquentOrganizationsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDelinquentOrganizationsRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintUsers(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.Now)))
	n3, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Now, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	return i, nil
}

func (m *GetDelinquentOrganizationsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDelinquentOrganizationsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Organizations) > 0 {
		for _, msg := range m.Organizations {
			dAtA[i] = 0xa
			i++
			i = encodeVarintUsers(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GetOrganizationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetOrganizationRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != nil {
		nn4, err := m.ID.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn4
	}
	return i, nil
}

func (m *GetOrganizationRequest_ExternalID) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0xa
	i++
	i = encodeVarintUsers(dAtA, i, uint64(len(m.ExternalID)))
	i += copy(dAtA[i:], m.ExternalID)
	return i, nil
}
func (m *GetOrganizationRequest_GCPExternalAccountID) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x12
	i++
	i = encodeVarintUsers(dAtA, i, uint64(len(m.GCPExternalAccountID)))
	i += copy(dAtA[i:], m.GCPExternalAccountID)
	return i, nil
}
func (m *GetOrganizationRequest_InternalID) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x1a
	i++
	i = encodeVarintUsers(dAtA, i, uint64(len(m.InternalID)))
	i += copy(dAtA[i:], m.InternalID)
	return i, nil
}
func (m *GetOrganizationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetOrganizationResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintUsers(dAtA, i, uint64(m.Organization.Size()))
	n5, err := m.Organization.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	return i, nil
}

func (m *Organization) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Organization) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintUsers(dAtA, i, uint64(len(m.ID)))
		i += copy(dAtA[i:], m.ID)
	}
	if len(m.ExternalID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintUsers(dAtA, i, uint64(len(m.ExternalID)))
		i += copy(dAtA[i:], m.ExternalID)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintUsers(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.ProbeToken) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintUsers(dAtA, i, uint64(len(m.ProbeToken)))
		i += copy(dAtA[i:], m.ProbeToken)
	}
	dAtA[i] = 0x2a
	i++
	i = encodeVarintUsers(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt)))
	n6, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.CreatedAt, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n6
	if len(m.FeatureFlags) > 0 {
		for _, s := range m.FeatureFlags {
			dAtA[i] = 0x32
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.RefuseDataAccess {
		dAtA[i] = 0x38
		i++
		if m.RefuseDataAccess {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.RefuseDataUpload {
		dAtA[i] = 0x40
		i++
		if m.RefuseDataUpload {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.FirstSeenConnectedAt != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintUsers(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(*m.FirstSeenConnectedAt)))
		n7, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.FirstSeenConnectedAt, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if len(m.Platform) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintUsers(dAtA, i, uint64(len(m.Platform)))
		i += copy(dAtA[i:], m.Platform)
	}
	if len(m.Environment) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintUsers(dAtA, i, uint64(len(m.Environment)))
		i += copy(dAtA[i:], m.Environment)
	}
	dAtA[i] = 0x62
	i++
	i = encodeVarintUsers(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.TrialExpiresAt)))
	n8, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.TrialExpiresAt, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n8
	if len(m.ZuoraAccountNumber) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintUsers(dAtA, i, uint64(len(m.ZuoraAccountNumber)))
		i += copy(dAtA[i:], m.ZuoraAccountNumber)
	}
	if m.ZuoraAccountCreatedAt != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintUsers(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(*m.ZuoraAccountCreatedAt)))
		n9, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.ZuoraAccountCreatedAt, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.TrialPendingExpiryNotifiedAt != nil {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintUsers(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(*m.TrialPendingExpiryNotifiedAt)))
		n10, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.TrialPendingExpiryNotifiedAt, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if m.TrialExpiredNotifiedAt != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintUsers(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(*m.TrialExpiredNotifiedAt)))
		n11, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.TrialExpiredNotifiedAt, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if m.GCP != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintUsers(dAtA, i, uint64(m.GCP.Size()))
		n12, err := m.GCP.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	if len(m.TeamID) > 0 {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintUsers(dAtA, i, uint64(len(m.TeamID)))
		i += copy(dAtA[i:], m.TeamID)
	}
	if len(m.TeamExternalID) > 0 {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintUsers(dAtA, i, uint64(len(m.TeamExternalID)))
		i += copy(dAtA[i:], m.TeamExternalID)
	}
	dAtA[i] = 0xa2
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintUsers(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.DeletedAt)))
	n13, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.DeletedAt, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n13
	if m.Cleanup {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x1
		i++
		if m.Cleanup {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.FirstSeenFluxConnectedAt != nil {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintUsers(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(*m.FirstSeenFluxConnectedAt)))
		n14, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.FirstSeenFluxConnectedAt, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	if m.FirstSeenNetConnectedAt != nil {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintUsers(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(*m.FirstSeenNetConnectedAt)))
		n15, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.FirstSeenNetConnectedAt, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	if m.FirstSeenPromConnectedAt != nil {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintUsers(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(*m.FirstSeenPromConnectedAt)))
		n16, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.FirstSeenPromConnectedAt, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	if m.FirstSeenScopeConnectedAt != nil {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintUsers(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(*m.FirstSeenScopeConnectedAt)))
		n17, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.FirstSeenScopeConnectedAt, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	if len(m.RefuseDataReason) > 0 {
		dAtA[i] = 0xd2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintUsers(dAtA, i, uint64(len(m.RefuseDataReason)))
		i += copy(dAtA[i:], m.RefuseDataReason)
	}
	return i, nil
}

func (m *GoogleCloudPlatform) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GoogleCloudPlatform) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintUsers(dAtA, i, uint64(len(m.ID)))
		i += copy(dAtA[i:], m.ID)
	}
	if len(m.ExternalAccountID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintUsers(dAtA, i, uint64(len(m.ExternalAccountID)))
		i += copy(dAtA[i:], m.ExternalAccountID)
	}
	if m.Activated {
		dAtA[i] = 0x18
		i++
		if m.Activated {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	dAtA[i] = 0x22
	i++
	i = encodeVarintUsers(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt)))
	n18, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.CreatedAt, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n18
	if len(m.ConsumerID) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintUsers(dAtA, i, uint64(len(m.ConsumerID)))
		i += copy(dAtA[i:], m.ConsumerID)
	}
	if len(m.SubscriptionName) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintUsers(dAtA, i, uint64(len(m.SubscriptionName)))
		i += copy(dAtA[i:], m.SubscriptionName)
	}
	if len(m.SubscriptionLevel) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintUsers(dAtA, i, uint64(len(m.SubscriptionLevel)))
		i += copy(dAtA[i:], m.SubscriptionLevel)
	}
	if len(m.SubscriptionStatus) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintUsers(dAtA, i, uint64(len(m.SubscriptionStatus)))
		i += copy(dAtA[i:], m.SubscriptionStatus)
	}
	return i, nil
}

func (m *GetGCPRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetGCPRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ExternalAccountID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintUsers(dAtA, i, uint64(len(m.ExternalAccountID)))
		i += copy(dAtA[i:], m.ExternalAccountID)
	}
	return i, nil
}

func (m *GetGCPResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetGCPResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintUsers(dAtA, i, uint64(m.GCP.Size()))
	n19, err := m.GCP.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n19
	return i, nil
}

func (m *UpdateGCPRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateGCPRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GCP != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintUsers(dAtA, i, uint64(m.GCP.Size()))
		n20, err := m.GCP.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	return i, nil
}

func (m *UpdateGCPResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateGCPResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *SetOrganizationZuoraAccountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetOrganizationZuoraAccountRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ExternalID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintUsers(dAtA, i, uint64(len(m.ExternalID)))
		i += copy(dAtA[i:], m.ExternalID)
	}
	if len(m.Number) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintUsers(dAtA, i, uint64(len(m.Number)))
		i += copy(dAtA[i:], m.Number)
	}
	if m.CreatedAt != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintUsers(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt)))
		n21, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.CreatedAt, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	return i, nil
}

func (m *SetOrganizationZuoraAccountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetOrganizationZuoraAccountResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *SetOrganizationFlagRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetOrganizationFlagRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ExternalID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintUsers(dAtA, i, uint64(len(m.ExternalID)))
		i += copy(dAtA[i:], m.ExternalID)
	}
	if len(m.Flag) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintUsers(dAtA, i, uint64(len(m.Flag)))
		i += copy(dAtA[i:], m.Flag)
	}
	if m.Value {
		dAtA[i] = 0x18
		i++
		if m.Value {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *SetOrganizationFlagResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetOrganizationFlagResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GetUserRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UserID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintUsers(dAtA, i, uint64(len(m.UserID)))
		i += copy(dAtA[i:], m.UserID)
	}
	return i, nil
}

func (m *GetUserResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintUsers(dAtA, i, uint64(m.User.Size()))
	n22, err := m.User.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n22
	return i, nil
}

func (m *User) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintUsers(dAtA, i, uint64(len(m.ID)))
		i += copy(dAtA[i:], m.ID)
	}
	if len(m.Email) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintUsers(dAtA, i, uint64(len(m.Email)))
		i += copy(dAtA[i:], m.Email)
	}
	if len(m.Token) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintUsers(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	dAtA[i] = 0x22
	i++
	i = encodeVarintUsers(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.TokenCreatedAt)))
	n23, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.TokenCreatedAt, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n23
	dAtA[i] = 0x2a
	i++
	i = encodeVarintUsers(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.FirstLoginAt)))
	n24, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.FirstLoginAt, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n24
	dAtA[i] = 0x32
	i++
	i = encodeVarintUsers(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt)))
	n25, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.CreatedAt, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n25
	if m.Admin {
		dAtA[i] = 0x38
		i++
		if m.Admin {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	dAtA[i] = 0x42
	i++
	i = encodeVarintUsers(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.LastLoginAt)))
	n26, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.LastLoginAt, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n26
	return i, nil
}

func (m *NotifyTrialPendingExpiryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotifyTrialPendingExpiryRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ExternalID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintUsers(dAtA, i, uint64(len(m.ExternalID)))
		i += copy(dAtA[i:], m.ExternalID)
	}
	return i, nil
}

func (m *NotifyTrialPendingExpiryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotifyTrialPendingExpiryResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *NotifyTrialExpiredRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotifyTrialExpiredRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ExternalID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintUsers(dAtA, i, uint64(len(m.ExternalID)))
		i += copy(dAtA[i:], m.ExternalID)
	}
	return i, nil
}

func (m *NotifyTrialExpiredResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotifyTrialExpiredResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *NotifyRefuseDataUploadRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotifyRefuseDataUploadRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ExternalID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintUsers(dAtA, i, uint64(len(m.ExternalID)))
		i += copy(dAtA[i:], m.ExternalID)
	}
	return i, nil
}

func (m *NotifyRefuseDataUploadResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotifyRefuseDataUploadResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *Team) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Team) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintUsers(dAtA, i, uint64(len(m.ID)))
		i += copy(dAtA[i:], m.ID)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintUsers(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.ExternalID) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintUsers(dAtA, i, uint64(len(m.ExternalID)))
		i += copy(dAtA[i:], m.ExternalID)
	}
	if len(m.ZuoraAccountNumber) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintUsers(dAtA, i, uint64(len(m.ZuoraAccountNumber)))
		i += copy(dAtA[i:], m.ZuoraAccountNumber)
	}
	if m.ZuoraAccountCreatedAt != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintUsers(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(*m.ZuoraAccountCreatedAt)))
		n27, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.ZuoraAccountCreatedAt, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n27
	}
	dAtA[i] = 0x32
	i++
	i = encodeVarintUsers(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.TrialExpiresAt)))
	n28, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.TrialExpiresAt, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n28
	if m.TrialPendingExpiryNotifiedAt != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintUsers(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(*m.TrialPendingExpiryNotifiedAt)))
		n29, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.TrialPendingExpiryNotifiedAt, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n29
	}
	if m.TrialExpiredNotifiedAt != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintUsers(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(*m.TrialExpiredNotifiedAt)))
		n30, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.TrialExpiredNotifiedAt, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n30
	}
	dAtA[i] = 0x4a
	i++
	i = encodeVarintUsers(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt)))
	n31, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.CreatedAt, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n31
	return i, nil
}

func (m *Empty) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Empty) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *Summary) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Summary) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Entries) > 0 {
		for _, msg := range m.Entries {
			dAtA[i] = 0xa
			i++
			i = encodeVarintUsers(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *SummaryEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SummaryEntry) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TeamExternalID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintUsers(dAtA, i, uint64(len(m.TeamExternalID)))
		i += copy(dAtA[i:], m.TeamExternalID)
	}
	if len(m.TeamName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintUsers(dAtA, i, uint64(len(m.TeamName)))
		i += copy(dAtA[i:], m.TeamName)
	}
	if len(m.OrgID) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintUsers(dAtA, i, uint64(len(m.OrgID)))
		i += copy(dAtA[i:], m.OrgID)
	}
	if len(m.OrgExternalID) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintUsers(dAtA, i, uint64(len(m.OrgExternalID)))
		i += copy(dAtA[i:], m.OrgExternalID)
	}
	if len(m.OrgName) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintUsers(dAtA, i, uint64(len(m.OrgName)))
		i += copy(dAtA[i:], m.OrgName)
	}
	if len(m.Emails) > 0 {
		for _, s := range m.Emails {
			dAtA[i] = 0x32
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	dAtA[i] = 0x3a
	i++
	i = encodeVarintUsers(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.OrgCreatedAt)))
	n32, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.OrgCreatedAt, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n32
	if m.FirstSeenConnectedAt != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintUsers(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(*m.FirstSeenConnectedAt)))
		n33, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.FirstSeenConnectedAt, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n33
	}
	if len(m.Platform) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintUsers(dAtA, i, uint64(len(m.Platform)))
		i += copy(dAtA[i:], m.Platform)
	}
	if len(m.Environment) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintUsers(dAtA, i, uint64(len(m.Environment)))
		i += copy(dAtA[i:], m.Environment)
	}
	dAtA[i] = 0x5a
	i++
	i = encodeVarintUsers(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.TrialExpiresAt)))
	n34, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.TrialExpiresAt, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n34
	if m.TrialPendingExpiryNotifiedAt != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintUsers(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(*m.TrialPendingExpiryNotifiedAt)))
		n35, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.TrialPendingExpiryNotifiedAt, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n35
	}
	if m.TrialExpiredNotifiedAt != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintUsers(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(*m.TrialExpiredNotifiedAt)))
		n36, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.TrialExpiredNotifiedAt, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n36
	}
	if m.BillingEnabled {
		dAtA[i] = 0x70
		i++
		if m.BillingEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.RefuseDataAccess {
		dAtA[i] = 0x78
		i++
		if m.RefuseDataAccess {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.RefuseDataUpload {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		if m.RefuseDataUpload {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.ZuoraAccountNumber) > 0 {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintUsers(dAtA, i, uint64(len(m.ZuoraAccountNumber)))
		i += copy(dAtA[i:], m.ZuoraAccountNumber)
	}
	if m.ZuoraAccountCreatedAt != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintUsers(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(*m.ZuoraAccountCreatedAt)))
		n37, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.ZuoraAccountCreatedAt, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n37
	}
	if len(m.GCPAccountExternalID) > 0 {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintUsers(dAtA, i, uint64(len(m.GCPAccountExternalID)))
		i += copy(dAtA[i:], m.GCPAccountExternalID)
	}
	dAtA[i] = 0xa2
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintUsers(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.GCPAccountCreatedAt)))
	n38, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.GCPAccountCreatedAt, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n38
	if len(m.GCPAccountSubscriptionLevel) > 0 {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintUsers(dAtA, i, uint64(len(m.GCPAccountSubscriptionLevel)))
		i += copy(dAtA[i:], m.GCPAccountSubscriptionLevel)
	}
	if len(m.GCPAccountSubscriptionStatus) > 0 {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintUsers(dAtA, i, uint64(len(m.GCPAccountSubscriptionStatus)))
		i += copy(dAtA[i:], m.GCPAccountSubscriptionStatus)
	}
	return i, nil
}

func (m *Webhook) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Webhook) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintUsers(dAtA, i, uint64(len(m.ID)))
		i += copy(dAtA[i:], m.ID)
	}
	if len(m.OrganizationID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintUsers(dAtA, i, uint64(len(m.OrganizationID)))
		i += copy(dAtA[i:], m.OrganizationID)
	}
	if len(m.IntegrationType) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintUsers(dAtA, i, uint64(len(m.IntegrationType)))
		i += copy(dAtA[i:], m.IntegrationType)
	}
	if len(m.SecretID) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintUsers(dAtA, i, uint64(len(m.SecretID)))
		i += copy(dAtA[i:], m.SecretID)
	}
	if len(m.SecretSigningKey) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintUsers(dAtA, i, uint64(len(m.SecretSigningKey)))
		i += copy(dAtA[i:], m.SecretSigningKey)
	}
	dAtA[i] = 0x32
	i++
	i = encodeVarintUsers(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt)))
	n39, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.CreatedAt, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n39
	if m.DeletedAt != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintUsers(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(*m.DeletedAt)))
		n40, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.DeletedAt, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n40
	}
	return i, nil
}

func (m *LookupOrganizationWebhookUsingSecretIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LookupOrganizationWebhookUsingSecretIDRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.OrgExternalID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintUsers(dAtA, i, uint64(len(m.OrgExternalID)))
		i += copy(dAtA[i:], m.OrgExternalID)
	}
	if len(m.SecretID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintUsers(dAtA, i, uint64(len(m.SecretID)))
		i += copy(dAtA[i:], m.SecretID)
	}
	return i, nil
}

func (m *LookupOrganizationWebhookUsingSecretIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LookupOrganizationWebhookUsingSecretIDResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Webhook != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintUsers(dAtA, i, uint64(m.Webhook.Size()))
		n41, err := m.Webhook.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n41
	}
	return i, nil
}

func encodeVarintUsers(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedLookupOrgRequest(r randyUsers, easy bool) *LookupOrgRequest {
	this := &LookupOrgRequest{}
	this.Cookie = string(randStringUsers(r))
	this.OrgExternalID = string(randStringUsers(r))
	this.AuthorizeFor = AuthorizedAction([]int32{0, 1, 2}[r.Intn(3)])
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedLookupOrgResponse(r randyUsers, easy bool) *LookupOrgResponse {
	this := &LookupOrgResponse{}
	this.OrganizationID = string(randStringUsers(r))
	this.UserID = string(randStringUsers(r))
	v1 := r.Intn(10)
	this.FeatureFlags = make([]string, v1)
	for i := 0; i < v1; i++ {
		this.FeatureFlags[i] = string(randStringUsers(r))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedLookupUsingTokenRequest(r randyUsers, easy bool) *LookupUsingTokenRequest {
	this := &LookupUsingTokenRequest{}
	this.Token = string(randStringUsers(r))
	this.AuthorizeFor = AuthorizedAction([]int32{0, 1, 2}[r.Intn(3)])
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedLookupUsingTokenResponse(r randyUsers, easy bool) *LookupUsingTokenResponse {
	this := &LookupUsingTokenResponse{}
	this.OrganizationID = string(randStringUsers(r))
	v2 := r.Intn(10)
	this.FeatureFlags = make([]string, v2)
	for i := 0; i < v2; i++ {
		this.FeatureFlags[i] = string(randStringUsers(r))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedLookupAdminRequest(r randyUsers, easy bool) *LookupAdminRequest {
	this := &LookupAdminRequest{}
	this.Cookie = string(randStringUsers(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedLookupAdminResponse(r randyUsers, easy bool) *LookupAdminResponse {
	this := &LookupAdminResponse{}
	this.AdminID = string(randStringUsers(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedLookupUserRequest(r randyUsers, easy bool) *LookupUserRequest {
	this := &LookupUserRequest{}
	this.Cookie = string(randStringUsers(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedLookupUserResponse(r randyUsers, easy bool) *LookupUserResponse {
	this := &LookupUserResponse{}
	this.UserID = string(randStringUsers(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetOrganizationsRequest(r randyUsers, easy bool) *GetOrganizationsRequest {
	this := &GetOrganizationsRequest{}
	this.Query = string(randStringUsers(r))
	this.PageNumber = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.PageNumber *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetOrganizationsResponse(r randyUsers, easy bool) *GetOrganizationsResponse {
	this := &GetOrganizationsResponse{}
	if r.Intn(10) != 0 {
		v3 := r.Intn(5)
		this.Organizations = make([]Organization, v3)
		for i := 0; i < v3; i++ {
			v4 := NewPopulatedOrganization(r, easy)
			this.Organizations[i] = *v4
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetBillableOrganizationsRequest(r randyUsers, easy bool) *GetBillableOrganizationsRequest {
	this := &GetBillableOrganizationsRequest{}
	v5 := github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	this.Now = *v5
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetBillableOrganizationsResponse(r randyUsers, easy bool) *GetBillableOrganizationsResponse {
	this := &GetBillableOrganizationsResponse{}
	if r.Intn(10) != 0 {
		v6 := r.Intn(5)
		this.Organizations = make([]Organization, v6)
		for i := 0; i < v6; i++ {
			v7 := NewPopulatedOrganization(r, easy)
			this.Organizations[i] = *v7
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetTrialOrganizationsRequest(r randyUsers, easy bool) *GetTrialOrganizationsRequest {
	this := &GetTrialOrganizationsRequest{}
	v8 := github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	this.Now = *v8
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetTrialOrganizationsResponse(r randyUsers, easy bool) *GetTrialOrganizationsResponse {
	this := &GetTrialOrganizationsResponse{}
	if r.Intn(10) != 0 {
		v9 := r.Intn(5)
		this.Organizations = make([]Organization, v9)
		for i := 0; i < v9; i++ {
			v10 := NewPopulatedOrganization(r, easy)
			this.Organizations[i] = *v10
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetDelinquentOrganizationsRequest(r randyUsers, easy bool) *GetDelinquentOrganizationsRequest {
	this := &GetDelinquentOrganizationsRequest{}
	v11 := github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	this.Now = *v11
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetDelinquentOrganizationsResponse(r randyUsers, easy bool) *GetDelinquentOrganizationsResponse {
	this := &GetDelinquentOrganizationsResponse{}
	if r.Intn(10) != 0 {
		v12 := r.Intn(5)
		this.Organizations = make([]Organization, v12)
		for i := 0; i < v12; i++ {
			v13 := NewPopulatedOrganization(r, easy)
			this.Organizations[i] = *v13
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetOrganizationRequest(r randyUsers, easy bool) *GetOrganizationRequest {
	this := &GetOrganizationRequest{}
	oneofNumber_ID := []int32{1, 2, 3}[r.Intn(3)]
	switch oneofNumber_ID {
	case 1:
		this.ID = NewPopulatedGetOrganizationRequest_ExternalID(r, easy)
	case 2:
		this.ID = NewPopulatedGetOrganizationRequest_GCPExternalAccountID(r, easy)
	case 3:
		this.ID = NewPopulatedGetOrganizationRequest_InternalID(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetOrganizationRequest_ExternalID(r randyUsers, easy bool) *GetOrganizationRequest_ExternalID {
	this := &GetOrganizationRequest_ExternalID{}
	this.ExternalID = string(randStringUsers(r))
	return this
}
func NewPopulatedGetOrganizationRequest_GCPExternalAccountID(r randyUsers, easy bool) *GetOrganizationRequest_GCPExternalAccountID {
	this := &GetOrganizationRequest_GCPExternalAccountID{}
	this.GCPExternalAccountID = string(randStringUsers(r))
	return this
}
func NewPopulatedGetOrganizationRequest_InternalID(r randyUsers, easy bool) *GetOrganizationRequest_InternalID {
	this := &GetOrganizationRequest_InternalID{}
	this.InternalID = string(randStringUsers(r))
	return this
}
func NewPopulatedGetOrganizationResponse(r randyUsers, easy bool) *GetOrganizationResponse {
	this := &GetOrganizationResponse{}
	v14 := NewPopulatedOrganization(r, easy)
	this.Organization = *v14
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedOrganization(r randyUsers, easy bool) *Organization {
	this := &Organization{}
	this.ID = string(randStringUsers(r))
	this.ExternalID = string(randStringUsers(r))
	this.Name = string(randStringUsers(r))
	this.ProbeToken = string(randStringUsers(r))
	v15 := github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	this.CreatedAt = *v15
	v16 := r.Intn(10)
	this.FeatureFlags = make([]string, v16)
	for i := 0; i < v16; i++ {
		this.FeatureFlags[i] = string(randStringUsers(r))
	}
	this.RefuseDataAccess = bool(bool(r.Intn(2) == 0))
	this.RefuseDataUpload = bool(bool(r.Intn(2) == 0))
	if r.Intn(10) != 0 {
		this.FirstSeenConnectedAt = github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	}
	this.Platform = string(randStringUsers(r))
	this.Environment = string(randStringUsers(r))
	v17 := github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	this.TrialExpiresAt = *v17
	this.ZuoraAccountNumber = string(randStringUsers(r))
	if r.Intn(10) != 0 {
		this.ZuoraAccountCreatedAt = github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	}
	if r.Intn(10) != 0 {
		this.TrialPendingExpiryNotifiedAt = github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	}
	if r.Intn(10) != 0 {
		this.TrialExpiredNotifiedAt = github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	}
	if r.Intn(10) != 0 {
		this.GCP = NewPopulatedGoogleCloudPlatform(r, easy)
	}
	this.TeamID = string(randStringUsers(r))
	this.TeamExternalID = string(randStringUsers(r))
	v18 := github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	this.DeletedAt = *v18
	this.Cleanup = bool(bool(r.Intn(2) == 0))
	if r.Intn(10) != 0 {
		this.FirstSeenFluxConnectedAt = github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	}
	if r.Intn(10) != 0 {
		this.FirstSeenNetConnectedAt = github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	}
	if r.Intn(10) != 0 {
		this.FirstSeenPromConnectedAt = github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	}
	if r.Intn(10) != 0 {
		this.FirstSeenScopeConnectedAt = github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	}
	this.RefuseDataReason = string(randStringUsers(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGoogleCloudPlatform(r randyUsers, easy bool) *GoogleCloudPlatform {
	this := &GoogleCloudPlatform{}
	this.ID = string(randStringUsers(r))
	this.ExternalAccountID = string(randStringUsers(r))
	this.Activated = bool(bool(r.Intn(2) == 0))
	v19 := github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	this.CreatedAt = *v19
	this.ConsumerID = string(randStringUsers(r))
	this.SubscriptionName = string(randStringUsers(r))
	this.SubscriptionLevel = string(randStringUsers(r))
	this.SubscriptionStatus = string(randStringUsers(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetGCPRequest(r randyUsers, easy bool) *GetGCPRequest {
	this := &GetGCPRequest{}
	this.ExternalAccountID = string(randStringUsers(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetGCPResponse(r randyUsers, easy bool) *GetGCPResponse {
	this := &GetGCPResponse{}
	v20 := NewPopulatedGoogleCloudPlatform(r, easy)
	this.GCP = *v20
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedUpdateGCPRequest(r randyUsers, easy bool) *UpdateGCPRequest {
	this := &UpdateGCPRequest{}
	if r.Intn(10) != 0 {
		this.GCP = NewPopulatedGoogleCloudPlatform(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedUpdateGCPResponse(r randyUsers, easy bool) *UpdateGCPResponse {
	this := &UpdateGCPResponse{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSetOrganizationZuoraAccountRequest(r randyUsers, easy bool) *SetOrganizationZuoraAccountRequest {
	this := &SetOrganizationZuoraAccountRequest{}
	this.ExternalID = string(randStringUsers(r))
	this.Number = string(randStringUsers(r))
	if r.Intn(10) != 0 {
		this.CreatedAt = github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSetOrganizationZuoraAccountResponse(r randyUsers, easy bool) *SetOrganizationZuoraAccountResponse {
	this := &SetOrganizationZuoraAccountResponse{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSetOrganizationFlagRequest(r randyUsers, easy bool) *SetOrganizationFlagRequest {
	this := &SetOrganizationFlagRequest{}
	this.ExternalID = string(randStringUsers(r))
	this.Flag = string(randStringUsers(r))
	this.Value = bool(bool(r.Intn(2) == 0))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSetOrganizationFlagResponse(r randyUsers, easy bool) *SetOrganizationFlagResponse {
	this := &SetOrganizationFlagResponse{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetUserRequest(r randyUsers, easy bool) *GetUserRequest {
	this := &GetUserRequest{}
	this.UserID = string(randStringUsers(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetUserResponse(r randyUsers, easy bool) *GetUserResponse {
	this := &GetUserResponse{}
	v21 := NewPopulatedUser(r, easy)
	this.User = *v21
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedUser(r randyUsers, easy bool) *User {
	this := &User{}
	this.ID = string(randStringUsers(r))
	this.Email = string(randStringUsers(r))
	this.Token = string(randStringUsers(r))
	v22 := github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	this.TokenCreatedAt = *v22
	v23 := github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	this.FirstLoginAt = *v23
	v24 := github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	this.CreatedAt = *v24
	this.Admin = bool(bool(r.Intn(2) == 0))
	v25 := github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	this.LastLoginAt = *v25
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedNotifyTrialPendingExpiryRequest(r randyUsers, easy bool) *NotifyTrialPendingExpiryRequest {
	this := &NotifyTrialPendingExpiryRequest{}
	this.ExternalID = string(randStringUsers(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedNotifyTrialPendingExpiryResponse(r randyUsers, easy bool) *NotifyTrialPendingExpiryResponse {
	this := &NotifyTrialPendingExpiryResponse{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedNotifyTrialExpiredRequest(r randyUsers, easy bool) *NotifyTrialExpiredRequest {
	this := &NotifyTrialExpiredRequest{}
	this.ExternalID = string(randStringUsers(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedNotifyTrialExpiredResponse(r randyUsers, easy bool) *NotifyTrialExpiredResponse {
	this := &NotifyTrialExpiredResponse{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedNotifyRefuseDataUploadRequest(r randyUsers, easy bool) *NotifyRefuseDataUploadRequest {
	this := &NotifyRefuseDataUploadRequest{}
	this.ExternalID = string(randStringUsers(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedNotifyRefuseDataUploadResponse(r randyUsers, easy bool) *NotifyRefuseDataUploadResponse {
	this := &NotifyRefuseDataUploadResponse{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedTeam(r randyUsers, easy bool) *Team {
	this := &Team{}
	this.ID = string(randStringUsers(r))
	this.Name = string(randStringUsers(r))
	this.ExternalID = string(randStringUsers(r))
	this.ZuoraAccountNumber = string(randStringUsers(r))
	if r.Intn(10) != 0 {
		this.ZuoraAccountCreatedAt = github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	}
	v26 := github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	this.TrialExpiresAt = *v26
	if r.Intn(10) != 0 {
		this.TrialPendingExpiryNotifiedAt = github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	}
	if r.Intn(10) != 0 {
		this.TrialExpiredNotifiedAt = github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	}
	v27 := github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	this.CreatedAt = *v27
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedEmpty(r randyUsers, easy bool) *Empty {
	this := &Empty{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSummary(r randyUsers, easy bool) *Summary {
	this := &Summary{}
	if r.Intn(10) != 0 {
		v28 := r.Intn(5)
		this.Entries = make([]*SummaryEntry, v28)
		for i := 0; i < v28; i++ {
			this.Entries[i] = NewPopulatedSummaryEntry(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSummaryEntry(r randyUsers, easy bool) *SummaryEntry {
	this := &SummaryEntry{}
	this.TeamExternalID = string(randStringUsers(r))
	this.TeamName = string(randStringUsers(r))
	this.OrgID = string(randStringUsers(r))
	this.OrgExternalID = string(randStringUsers(r))
	this.OrgName = string(randStringUsers(r))
	v29 := r.Intn(10)
	this.Emails = make([]string, v29)
	for i := 0; i < v29; i++ {
		this.Emails[i] = string(randStringUsers(r))
	}
	v30 := github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	this.OrgCreatedAt = *v30
	if r.Intn(10) != 0 {
		this.FirstSeenConnectedAt = github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	}
	this.Platform = string(randStringUsers(r))
	this.Environment = string(randStringUsers(r))
	v31 := github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	this.TrialExpiresAt = *v31
	if r.Intn(10) != 0 {
		this.TrialPendingExpiryNotifiedAt = github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	}
	if r.Intn(10) != 0 {
		this.TrialExpiredNotifiedAt = github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	}
	this.BillingEnabled = bool(bool(r.Intn(2) == 0))
	this.RefuseDataAccess = bool(bool(r.Intn(2) == 0))
	this.RefuseDataUpload = bool(bool(r.Intn(2) == 0))
	this.ZuoraAccountNumber = string(randStringUsers(r))
	if r.Intn(10) != 0 {
		this.ZuoraAccountCreatedAt = github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	}
	this.GCPAccountExternalID = string(randStringUsers(r))
	v32 := github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	this.GCPAccountCreatedAt = *v32
	this.GCPAccountSubscriptionLevel = string(randStringUsers(r))
	this.GCPAccountSubscriptionStatus = string(randStringUsers(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedWebhook(r randyUsers, easy bool) *Webhook {
	this := &Webhook{}
	this.ID = string(randStringUsers(r))
	this.OrganizationID = string(randStringUsers(r))
	this.IntegrationType = string(randStringUsers(r))
	this.SecretID = string(randStringUsers(r))
	this.SecretSigningKey = string(randStringUsers(r))
	v33 := github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	this.CreatedAt = *v33
	if r.Intn(10) != 0 {
		this.DeletedAt = github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedLookupOrganizationWebhookUsingSecretIDRequest(r randyUsers, easy bool) *LookupOrganizationWebhookUsingSecretIDRequest {
	this := &LookupOrganizationWebhookUsingSecretIDRequest{}
	this.OrgExternalID = string(randStringUsers(r))
	this.SecretID = string(randStringUsers(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedLookupOrganizationWebhookUsingSecretIDResponse(r randyUsers, easy bool) *LookupOrganizationWebhookUsingSecretIDResponse {
	this := &LookupOrganizationWebhookUsingSecretIDResponse{}
	if r.Intn(10) != 0 {
		this.Webhook = NewPopulatedWebhook(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyUsers interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneUsers(r randyUsers) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringUsers(r randyUsers) string {
	v34 := r.Intn(100)
	tmps := make([]rune, v34)
	for i := 0; i < v34; i++ {
		tmps[i] = randUTF8RuneUsers(r)
	}
	return string(tmps)
}
func randUnrecognizedUsers(r randyUsers, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldUsers(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldUsers(dAtA []byte, r randyUsers, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateUsers(dAtA, uint64(key))
		v35 := r.Int63()
		if r.Intn(2) == 0 {
			v35 *= -1
		}
		dAtA = encodeVarintPopulateUsers(dAtA, uint64(v35))
	case 1:
		dAtA = encodeVarintPopulateUsers(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateUsers(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateUsers(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateUsers(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateUsers(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *LookupOrgRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Cookie)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	l = len(m.OrgExternalID)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	if m.AuthorizeFor != 0 {
		n += 1 + sovUsers(uint64(m.AuthorizeFor))
	}
	return n
}

func (m *LookupOrgResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.OrganizationID)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	l = len(m.UserID)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	if len(m.FeatureFlags) > 0 {
		for _, s := range m.FeatureFlags {
			l = len(s)
			n += 1 + l + sovUsers(uint64(l))
		}
	}
	return n
}

func (m *LookupUsingTokenRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	if m.AuthorizeFor != 0 {
		n += 1 + sovUsers(uint64(m.AuthorizeFor))
	}
	return n
}

func (m *LookupUsingTokenResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.OrganizationID)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	if len(m.FeatureFlags) > 0 {
		for _, s := range m.FeatureFlags {
			l = len(s)
			n += 1 + l + sovUsers(uint64(l))
		}
	}
	return n
}

func (m *LookupAdminRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Cookie)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	return n
}

func (m *LookupAdminResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.AdminID)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	return n
}

func (m *LookupUserRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Cookie)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	return n
}

func (m *LookupUserResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.UserID)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	return n
}

func (m *GetOrganizationsRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Query)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	if m.PageNumber != 0 {
		n += 1 + sovUsers(uint64(m.PageNumber))
	}
	return n
}

func (m *GetOrganizationsResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Organizations) > 0 {
		for _, e := range m.Organizations {
			l = e.Size()
			n += 1 + l + sovUsers(uint64(l))
		}
	}
	return n
}

func (m *GetBillableOrganizationsRequest) Size() (n int) {
	var l int
	_ = l
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Now)
	n += 1 + l + sovUsers(uint64(l))
	return n
}

func (m *GetBillableOrganizationsResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Organizations) > 0 {
		for _, e := range m.Organizations {
			l = e.Size()
			n += 1 + l + sovUsers(uint64(l))
		}
	}
	return n
}

func (m *GetTrialOrganizationsRequest) Size() (n int) {
	var l int
	_ = l
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Now)
	n += 1 + l + sovUsers(uint64(l))
	return n
}

func (m *GetTrialOrganizationsResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Organizations) > 0 {
		for _, e := range m.Organizations {
			l = e.Size()
			n += 1 + l + sovUsers(uint64(l))
		}
	}
	return n
}

func (m *GetDelinquentOrganizationsRequest) Size() (n int) {
	var l int
	_ = l
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Now)
	n += 1 + l + sovUsers(uint64(l))
	return n
}

func (m *GetDelinquentOrganizationsResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Organizations) > 0 {
		for _, e := range m.Organizations {
			l = e.Size()
			n += 1 + l + sovUsers(uint64(l))
		}
	}
	return n
}

func (m *GetOrganizationRequest) Size() (n int) {
	var l int
	_ = l
	if m.ID != nil {
		n += m.ID.Size()
	}
	return n
}

func (m *GetOrganizationRequest_ExternalID) Size() (n int) {
	var l int
	_ = l
	l = len(m.ExternalID)
	n += 1 + l + sovUsers(uint64(l))
	return n
}
func (m *GetOrganizationRequest_GCPExternalAccountID) Size() (n int) {
	var l int
	_ = l
	l = len(m.GCPExternalAccountID)
	n += 1 + l + sovUsers(uint64(l))
	return n
}
func (m *GetOrganizationRequest_InternalID) Size() (n int) {
	var l int
	_ = l
	l = len(m.InternalID)
	n += 1 + l + sovUsers(uint64(l))
	return n
}
func (m *GetOrganizationResponse) Size() (n int) {
	var l int
	_ = l
	l = m.Organization.Size()
	n += 1 + l + sovUsers(uint64(l))
	return n
}

func (m *Organization) Size() (n int) {
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	l = len(m.ExternalID)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	l = len(m.ProbeToken)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt)
	n += 1 + l + sovUsers(uint64(l))
	if len(m.FeatureFlags) > 0 {
		for _, s := range m.FeatureFlags {
			l = len(s)
			n += 1 + l + sovUsers(uint64(l))
		}
	}
	if m.RefuseDataAccess {
		n += 2
	}
	if m.RefuseDataUpload {
		n += 2
	}
	if m.FirstSeenConnectedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.FirstSeenConnectedAt)
		n += 1 + l + sovUsers(uint64(l))
	}
	l = len(m.Platform)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	l = len(m.Environment)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.TrialExpiresAt)
	n += 1 + l + sovUsers(uint64(l))
	l = len(m.ZuoraAccountNumber)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	if m.ZuoraAccountCreatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.ZuoraAccountCreatedAt)
		n += 1 + l + sovUsers(uint64(l))
	}
	if m.TrialPendingExpiryNotifiedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.TrialPendingExpiryNotifiedAt)
		n += 1 + l + sovUsers(uint64(l))
	}
	if m.TrialExpiredNotifiedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.TrialExpiredNotifiedAt)
		n += 2 + l + sovUsers(uint64(l))
	}
	if m.GCP != nil {
		l = m.GCP.Size()
		n += 2 + l + sovUsers(uint64(l))
	}
	l = len(m.TeamID)
	if l > 0 {
		n += 2 + l + sovUsers(uint64(l))
	}
	l = len(m.TeamExternalID)
	if l > 0 {
		n += 2 + l + sovUsers(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.DeletedAt)
	n += 2 + l + sovUsers(uint64(l))
	if m.Cleanup {
		n += 3
	}
	if m.FirstSeenFluxConnectedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.FirstSeenFluxConnectedAt)
		n += 2 + l + sovUsers(uint64(l))
	}
	if m.FirstSeenNetConnectedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.FirstSeenNetConnectedAt)
		n += 2 + l + sovUsers(uint64(l))
	}
	if m.FirstSeenPromConnectedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.FirstSeenPromConnectedAt)
		n += 2 + l + sovUsers(uint64(l))
	}
	if m.FirstSeenScopeConnectedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.FirstSeenScopeConnectedAt)
		n += 2 + l + sovUsers(uint64(l))
	}
	l = len(m.RefuseDataReason)
	if l > 0 {
		n += 2 + l + sovUsers(uint64(l))
	}
	return n
}

func (m *GoogleCloudPlatform) Size() (n int) {
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	l = len(m.ExternalAccountID)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	if m.Activated {
		n += 2
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt)
	n += 1 + l + sovUsers(uint64(l))
	l = len(m.ConsumerID)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	l = len(m.SubscriptionName)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	l = len(m.SubscriptionLevel)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	l = len(m.SubscriptionStatus)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	return n
}

func (m *GetGCPRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.ExternalAccountID)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	return n
}

func (m *GetGCPResponse) Size() (n int) {
	var l int
	_ = l
	l = m.GCP.Size()
	n += 1 + l + sovUsers(uint64(l))
	return n
}

func (m *UpdateGCPRequest) Size() (n int) {
	var l int
	_ = l
	if m.GCP != nil {
		l = m.GCP.Size()
		n += 1 + l + sovUsers(uint64(l))
	}
	return n
}

func (m *UpdateGCPResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *SetOrganizationZuoraAccountRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.ExternalID)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	l = len(m.Number)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	if m.CreatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt)
		n += 1 + l + sovUsers(uint64(l))
	}
	return n
}

func (m *SetOrganizationZuoraAccountResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *SetOrganizationFlagRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.ExternalID)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	l = len(m.Flag)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	if m.Value {
		n += 2
	}
	return n
}

func (m *SetOrganizationFlagResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GetUserRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.UserID)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	return n
}

func (m *GetUserResponse) Size() (n int) {
	var l int
	_ = l
	l = m.User.Size()
	n += 1 + l + sovUsers(uint64(l))
	return n
}

func (m *User) Size() (n int) {
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.TokenCreatedAt)
	n += 1 + l + sovUsers(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.FirstLoginAt)
	n += 1 + l + sovUsers(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt)
	n += 1 + l + sovUsers(uint64(l))
	if m.Admin {
		n += 2
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.LastLoginAt)
	n += 1 + l + sovUsers(uint64(l))
	return n
}

func (m *NotifyTrialPendingExpiryRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.ExternalID)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	return n
}

func (m *NotifyTrialPendingExpiryResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *NotifyTrialExpiredRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.ExternalID)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	return n
}

func (m *NotifyTrialExpiredResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *NotifyRefuseDataUploadRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.ExternalID)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	return n
}

func (m *NotifyRefuseDataUploadResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *Team) Size() (n int) {
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	l = len(m.ExternalID)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	l = len(m.ZuoraAccountNumber)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	if m.ZuoraAccountCreatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.ZuoraAccountCreatedAt)
		n += 1 + l + sovUsers(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.TrialExpiresAt)
	n += 1 + l + sovUsers(uint64(l))
	if m.TrialPendingExpiryNotifiedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.TrialPendingExpiryNotifiedAt)
		n += 1 + l + sovUsers(uint64(l))
	}
	if m.TrialExpiredNotifiedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.TrialExpiredNotifiedAt)
		n += 1 + l + sovUsers(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt)
	n += 1 + l + sovUsers(uint64(l))
	return n
}

func (m *Empty) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *Summary) Size() (n int) {
	var l int
	_ = l
	if len(m.Entries) > 0 {
		for _, e := range m.Entries {
			l = e.Size()
			n += 1 + l + sovUsers(uint64(l))
		}
	}
	return n
}

func (m *SummaryEntry) Size() (n int) {
	var l int
	_ = l
	l = len(m.TeamExternalID)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	l = len(m.TeamName)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	l = len(m.OrgID)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	l = len(m.OrgExternalID)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	l = len(m.OrgName)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	if len(m.Emails) > 0 {
		for _, s := range m.Emails {
			l = len(s)
			n += 1 + l + sovUsers(uint64(l))
		}
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.OrgCreatedAt)
	n += 1 + l + sovUsers(uint64(l))
	if m.FirstSeenConnectedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.FirstSeenConnectedAt)
		n += 1 + l + sovUsers(uint64(l))
	}
	l = len(m.Platform)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	l = len(m.Environment)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.TrialExpiresAt)
	n += 1 + l + sovUsers(uint64(l))
	if m.TrialPendingExpiryNotifiedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.TrialPendingExpiryNotifiedAt)
		n += 1 + l + sovUsers(uint64(l))
	}
	if m.TrialExpiredNotifiedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.TrialExpiredNotifiedAt)
		n += 1 + l + sovUsers(uint64(l))
	}
	if m.BillingEnabled {
		n += 2
	}
	if m.RefuseDataAccess {
		n += 2
	}
	if m.RefuseDataUpload {
		n += 3
	}
	l = len(m.ZuoraAccountNumber)
	if l > 0 {
		n += 2 + l + sovUsers(uint64(l))
	}
	if m.ZuoraAccountCreatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.ZuoraAccountCreatedAt)
		n += 2 + l + sovUsers(uint64(l))
	}
	l = len(m.GCPAccountExternalID)
	if l > 0 {
		n += 2 + l + sovUsers(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.GCPAccountCreatedAt)
	n += 2 + l + sovUsers(uint64(l))
	l = len(m.GCPAccountSubscriptionLevel)
	if l > 0 {
		n += 2 + l + sovUsers(uint64(l))
	}
	l = len(m.GCPAccountSubscriptionStatus)
	if l > 0 {
		n += 2 + l + sovUsers(uint64(l))
	}
	return n
}

func (m *Webhook) Size() (n int) {
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	l = len(m.OrganizationID)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	l = len(m.IntegrationType)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	l = len(m.SecretID)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	l = len(m.SecretSigningKey)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt)
	n += 1 + l + sovUsers(uint64(l))
	if m.DeletedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.DeletedAt)
		n += 1 + l + sovUsers(uint64(l))
	}
	return n
}

func (m *LookupOrganizationWebhookUsingSecretIDRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.OrgExternalID)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	l = len(m.SecretID)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	return n
}

func (m *LookupOrganizationWebhookUsingSecretIDResponse) Size() (n int) {
	var l int
	_ = l
	if m.Webhook != nil {
		l = m.Webhook.Size()
		n += 1 + l + sovUsers(uint64(l))
	}
	return n
}

func sovUsers(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozUsers(x uint64) (n int) {
	return sovUsers(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *LookupOrgRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LookupOrgRequest{`,
		`Cookie:` + fmt.Sprintf("%v", this.Cookie) + `,`,
		`OrgExternalID:` + fmt.Sprintf("%v", this.OrgExternalID) + `,`,
		`AuthorizeFor:` + fmt.Sprintf("%v", this.AuthorizeFor) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LookupOrgResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LookupOrgResponse{`,
		`OrganizationID:` + fmt.Sprintf("%v", this.OrganizationID) + `,`,
		`UserID:` + fmt.Sprintf("%v", this.UserID) + `,`,
		`FeatureFlags:` + fmt.Sprintf("%v", this.FeatureFlags) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LookupUsingTokenRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LookupUsingTokenRequest{`,
		`Token:` + fmt.Sprintf("%v", this.Token) + `,`,
		`AuthorizeFor:` + fmt.Sprintf("%v", this.AuthorizeFor) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LookupUsingTokenResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LookupUsingTokenResponse{`,
		`OrganizationID:` + fmt.Sprintf("%v", this.OrganizationID) + `,`,
		`FeatureFlags:` + fmt.Sprintf("%v", this.FeatureFlags) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LookupAdminRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LookupAdminRequest{`,
		`Cookie:` + fmt.Sprintf("%v", this.Cookie) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LookupAdminResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LookupAdminResponse{`,
		`AdminID:` + fmt.Sprintf("%v", this.AdminID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LookupUserRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LookupUserRequest{`,
		`Cookie:` + fmt.Sprintf("%v", this.Cookie) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LookupUserResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LookupUserResponse{`,
		`UserID:` + fmt.Sprintf("%v", this.UserID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetOrganizationsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetOrganizationsRequest{`,
		`Query:` + fmt.Sprintf("%v", this.Query) + `,`,
		`PageNumber:` + fmt.Sprintf("%v", this.PageNumber) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetOrganizationsResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetOrganizationsResponse{`,
		`Organizations:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Organizations), "Organization", "Organization", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetBillableOrganizationsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetBillableOrganizationsRequest{`,
		`Now:` + strings.Replace(strings.Replace(this.Now.String(), "Timestamp", "google_protobuf1.Timestamp", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetBillableOrganizationsResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetBillableOrganizationsResponse{`,
		`Organizations:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Organizations), "Organization", "Organization", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetTrialOrganizationsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetTrialOrganizationsRequest{`,
		`Now:` + strings.Replace(strings.Replace(this.Now.String(), "Timestamp", "google_protobuf1.Timestamp", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetTrialOrganizationsResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetTrialOrganizationsResponse{`,
		`Organizations:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Organizations), "Organization", "Organization", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetDelinquentOrganizationsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetDelinquentOrganizationsRequest{`,
		`Now:` + strings.Replace(strings.Replace(this.Now.String(), "Timestamp", "google_protobuf1.Timestamp", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetDelinquentOrganizationsResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetDelinquentOrganizationsResponse{`,
		`Organizations:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Organizations), "Organization", "Organization", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetOrganizationRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetOrganizationRequest{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetOrganizationRequest_ExternalID) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetOrganizationRequest_ExternalID{`,
		`ExternalID:` + fmt.Sprintf("%v", this.ExternalID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetOrganizationRequest_GCPExternalAccountID) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetOrganizationRequest_GCPExternalAccountID{`,
		`GCPExternalAccountID:` + fmt.Sprintf("%v", this.GCPExternalAccountID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetOrganizationRequest_InternalID) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetOrganizationRequest_InternalID{`,
		`InternalID:` + fmt.Sprintf("%v", this.InternalID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetOrganizationResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetOrganizationResponse{`,
		`Organization:` + strings.Replace(strings.Replace(this.Organization.String(), "Organization", "Organization", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Organization) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Organization{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`ExternalID:` + fmt.Sprintf("%v", this.ExternalID) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ProbeToken:` + fmt.Sprintf("%v", this.ProbeToken) + `,`,
		`CreatedAt:` + strings.Replace(strings.Replace(this.CreatedAt.String(), "Timestamp", "google_protobuf1.Timestamp", 1), `&`, ``, 1) + `,`,
		`FeatureFlags:` + fmt.Sprintf("%v", this.FeatureFlags) + `,`,
		`RefuseDataAccess:` + fmt.Sprintf("%v", this.RefuseDataAccess) + `,`,
		`RefuseDataUpload:` + fmt.Sprintf("%v", this.RefuseDataUpload) + `,`,
		`FirstSeenConnectedAt:` + strings.Replace(fmt.Sprintf("%v", this.FirstSeenConnectedAt), "Timestamp", "google_protobuf1.Timestamp", 1) + `,`,
		`Platform:` + fmt.Sprintf("%v", this.Platform) + `,`,
		`Environment:` + fmt.Sprintf("%v", this.Environment) + `,`,
		`TrialExpiresAt:` + strings.Replace(strings.Replace(this.TrialExpiresAt.String(), "Timestamp", "google_protobuf1.Timestamp", 1), `&`, ``, 1) + `,`,
		`ZuoraAccountNumber:` + fmt.Sprintf("%v", this.ZuoraAccountNumber) + `,`,
		`ZuoraAccountCreatedAt:` + strings.Replace(fmt.Sprintf("%v", this.ZuoraAccountCreatedAt), "Timestamp", "google_protobuf1.Timestamp", 1) + `,`,
		`TrialPendingExpiryNotifiedAt:` + strings.Replace(fmt.Sprintf("%v", this.TrialPendingExpiryNotifiedAt), "Timestamp", "google_protobuf1.Timestamp", 1) + `,`,
		`TrialExpiredNotifiedAt:` + strings.Replace(fmt.Sprintf("%v", this.TrialExpiredNotifiedAt), "Timestamp", "google_protobuf1.Timestamp", 1) + `,`,
		`GCP:` + strings.Replace(fmt.Sprintf("%v", this.GCP), "GoogleCloudPlatform", "GoogleCloudPlatform", 1) + `,`,
		`TeamID:` + fmt.Sprintf("%v", this.TeamID) + `,`,
		`TeamExternalID:` + fmt.Sprintf("%v", this.TeamExternalID) + `,`,
		`DeletedAt:` + strings.Replace(strings.Replace(this.DeletedAt.String(), "Timestamp", "google_protobuf1.Timestamp", 1), `&`, ``, 1) + `,`,
		`Cleanup:` + fmt.Sprintf("%v", this.Cleanup) + `,`,
		`FirstSeenFluxConnectedAt:` + strings.Replace(fmt.Sprintf("%v", this.FirstSeenFluxConnectedAt), "Timestamp", "google_protobuf1.Timestamp", 1) + `,`,
		`FirstSeenNetConnectedAt:` + strings.Replace(fmt.Sprintf("%v", this.FirstSeenNetConnectedAt), "Timestamp", "google_protobuf1.Timestamp", 1) + `,`,
		`FirstSeenPromConnectedAt:` + strings.Replace(fmt.Sprintf("%v", this.FirstSeenPromConnectedAt), "Timestamp", "google_protobuf1.Timestamp", 1) + `,`,
		`FirstSeenScopeConnectedAt:` + strings.Replace(fmt.Sprintf("%v", this.FirstSeenScopeConnectedAt), "Timestamp", "google_protobuf1.Timestamp", 1) + `,`,
		`RefuseDataReason:` + fmt.Sprintf("%v", this.RefuseDataReason) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GoogleCloudPlatform) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GoogleCloudPlatform{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`ExternalAccountID:` + fmt.Sprintf("%v", this.ExternalAccountID) + `,`,
		`Activated:` + fmt.Sprintf("%v", this.Activated) + `,`,
		`CreatedAt:` + strings.Replace(strings.Replace(this.CreatedAt.String(), "Timestamp", "google_protobuf1.Timestamp", 1), `&`, ``, 1) + `,`,
		`ConsumerID:` + fmt.Sprintf("%v", this.ConsumerID) + `,`,
		`SubscriptionName:` + fmt.Sprintf("%v", this.SubscriptionName) + `,`,
		`SubscriptionLevel:` + fmt.Sprintf("%v", this.SubscriptionLevel) + `,`,
		`SubscriptionStatus:` + fmt.Sprintf("%v", this.SubscriptionStatus) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetGCPRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetGCPRequest{`,
		`ExternalAccountID:` + fmt.Sprintf("%v", this.ExternalAccountID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetGCPResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetGCPResponse{`,
		`GCP:` + strings.Replace(strings.Replace(this.GCP.String(), "GoogleCloudPlatform", "GoogleCloudPlatform", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateGCPRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateGCPRequest{`,
		`GCP:` + strings.Replace(fmt.Sprintf("%v", this.GCP), "GoogleCloudPlatform", "GoogleCloudPlatform", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateGCPResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateGCPResponse{`,
		`}`,
	}, "")
	return s
}
func (this *SetOrganizationZuoraAccountRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SetOrganizationZuoraAccountRequest{`,
		`ExternalID:` + fmt.Sprintf("%v", this.ExternalID) + `,`,
		`Number:` + fmt.Sprintf("%v", this.Number) + `,`,
		`CreatedAt:` + strings.Replace(fmt.Sprintf("%v", this.CreatedAt), "Timestamp", "google_protobuf1.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SetOrganizationZuoraAccountResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SetOrganizationZuoraAccountResponse{`,
		`}`,
	}, "")
	return s
}
func (this *SetOrganizationFlagRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SetOrganizationFlagRequest{`,
		`ExternalID:` + fmt.Sprintf("%v", this.ExternalID) + `,`,
		`Flag:` + fmt.Sprintf("%v", this.Flag) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SetOrganizationFlagResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SetOrganizationFlagResponse{`,
		`}`,
	}, "")
	return s
}
func (this *GetUserRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetUserRequest{`,
		`UserID:` + fmt.Sprintf("%v", this.UserID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetUserResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetUserResponse{`,
		`User:` + strings.Replace(strings.Replace(this.User.String(), "User", "User", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *User) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&User{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`Email:` + fmt.Sprintf("%v", this.Email) + `,`,
		`Token:` + fmt.Sprintf("%v", this.Token) + `,`,
		`TokenCreatedAt:` + strings.Replace(strings.Replace(this.TokenCreatedAt.String(), "Timestamp", "google_protobuf1.Timestamp", 1), `&`, ``, 1) + `,`,
		`FirstLoginAt:` + strings.Replace(strings.Replace(this.FirstLoginAt.String(), "Timestamp", "google_protobuf1.Timestamp", 1), `&`, ``, 1) + `,`,
		`CreatedAt:` + strings.Replace(strings.Replace(this.CreatedAt.String(), "Timestamp", "google_protobuf1.Timestamp", 1), `&`, ``, 1) + `,`,
		`Admin:` + fmt.Sprintf("%v", this.Admin) + `,`,
		`LastLoginAt:` + strings.Replace(strings.Replace(this.LastLoginAt.String(), "Timestamp", "google_protobuf1.Timestamp", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NotifyTrialPendingExpiryRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NotifyTrialPendingExpiryRequest{`,
		`ExternalID:` + fmt.Sprintf("%v", this.ExternalID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NotifyTrialPendingExpiryResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NotifyTrialPendingExpiryResponse{`,
		`}`,
	}, "")
	return s
}
func (this *NotifyTrialExpiredRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NotifyTrialExpiredRequest{`,
		`ExternalID:` + fmt.Sprintf("%v", this.ExternalID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NotifyTrialExpiredResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NotifyTrialExpiredResponse{`,
		`}`,
	}, "")
	return s
}
func (this *NotifyRefuseDataUploadRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NotifyRefuseDataUploadRequest{`,
		`ExternalID:` + fmt.Sprintf("%v", this.ExternalID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NotifyRefuseDataUploadResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NotifyRefuseDataUploadResponse{`,
		`}`,
	}, "")
	return s
}
func (this *Team) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Team{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ExternalID:` + fmt.Sprintf("%v", this.ExternalID) + `,`,
		`ZuoraAccountNumber:` + fmt.Sprintf("%v", this.ZuoraAccountNumber) + `,`,
		`ZuoraAccountCreatedAt:` + strings.Replace(fmt.Sprintf("%v", this.ZuoraAccountCreatedAt), "Timestamp", "google_protobuf1.Timestamp", 1) + `,`,
		`TrialExpiresAt:` + strings.Replace(strings.Replace(this.TrialExpiresAt.String(), "Timestamp", "google_protobuf1.Timestamp", 1), `&`, ``, 1) + `,`,
		`TrialPendingExpiryNotifiedAt:` + strings.Replace(fmt.Sprintf("%v", this.TrialPendingExpiryNotifiedAt), "Timestamp", "google_protobuf1.Timestamp", 1) + `,`,
		`TrialExpiredNotifiedAt:` + strings.Replace(fmt.Sprintf("%v", this.TrialExpiredNotifiedAt), "Timestamp", "google_protobuf1.Timestamp", 1) + `,`,
		`CreatedAt:` + strings.Replace(strings.Replace(this.CreatedAt.String(), "Timestamp", "google_protobuf1.Timestamp", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Empty) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Empty{`,
		`}`,
	}, "")
	return s
}
func (this *Summary) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Summary{`,
		`Entries:` + strings.Replace(fmt.Sprintf("%v", this.Entries), "SummaryEntry", "SummaryEntry", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SummaryEntry) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SummaryEntry{`,
		`TeamExternalID:` + fmt.Sprintf("%v", this.TeamExternalID) + `,`,
		`TeamName:` + fmt.Sprintf("%v", this.TeamName) + `,`,
		`OrgID:` + fmt.Sprintf("%v", this.OrgID) + `,`,
		`OrgExternalID:` + fmt.Sprintf("%v", this.OrgExternalID) + `,`,
		`OrgName:` + fmt.Sprintf("%v", this.OrgName) + `,`,
		`Emails:` + fmt.Sprintf("%v", this.Emails) + `,`,
		`OrgCreatedAt:` + strings.Replace(strings.Replace(this.OrgCreatedAt.String(), "Timestamp", "google_protobuf1.Timestamp", 1), `&`, ``, 1) + `,`,
		`FirstSeenConnectedAt:` + strings.Replace(fmt.Sprintf("%v", this.FirstSeenConnectedAt), "Timestamp", "google_protobuf1.Timestamp", 1) + `,`,
		`Platform:` + fmt.Sprintf("%v", this.Platform) + `,`,
		`Environment:` + fmt.Sprintf("%v", this.Environment) + `,`,
		`TrialExpiresAt:` + strings.Replace(strings.Replace(this.TrialExpiresAt.String(), "Timestamp", "google_protobuf1.Timestamp", 1), `&`, ``, 1) + `,`,
		`TrialPendingExpiryNotifiedAt:` + strings.Replace(fmt.Sprintf("%v", this.TrialPendingExpiryNotifiedAt), "Timestamp", "google_protobuf1.Timestamp", 1) + `,`,
		`TrialExpiredNotifiedAt:` + strings.Replace(fmt.Sprintf("%v", this.TrialExpiredNotifiedAt), "Timestamp", "google_protobuf1.Timestamp", 1) + `,`,
		`BillingEnabled:` + fmt.Sprintf("%v", this.BillingEnabled) + `,`,
		`RefuseDataAccess:` + fmt.Sprintf("%v", this.RefuseDataAccess) + `,`,
		`RefuseDataUpload:` + fmt.Sprintf("%v", this.RefuseDataUpload) + `,`,
		`ZuoraAccountNumber:` + fmt.Sprintf("%v", this.ZuoraAccountNumber) + `,`,
		`ZuoraAccountCreatedAt:` + strings.Replace(fmt.Sprintf("%v", this.ZuoraAccountCreatedAt), "Timestamp", "google_protobuf1.Timestamp", 1) + `,`,
		`GCPAccountExternalID:` + fmt.Sprintf("%v", this.GCPAccountExternalID) + `,`,
		`GCPAccountCreatedAt:` + strings.Replace(strings.Replace(this.GCPAccountCreatedAt.String(), "Timestamp", "google_protobuf1.Timestamp", 1), `&`, ``, 1) + `,`,
		`GCPAccountSubscriptionLevel:` + fmt.Sprintf("%v", this.GCPAccountSubscriptionLevel) + `,`,
		`GCPAccountSubscriptionStatus:` + fmt.Sprintf("%v", this.GCPAccountSubscriptionStatus) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Webhook) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Webhook{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`OrganizationID:` + fmt.Sprintf("%v", this.OrganizationID) + `,`,
		`IntegrationType:` + fmt.Sprintf("%v", this.IntegrationType) + `,`,
		`SecretID:` + fmt.Sprintf("%v", this.SecretID) + `,`,
		`SecretSigningKey:` + fmt.Sprintf("%v", this.SecretSigningKey) + `,`,
		`CreatedAt:` + strings.Replace(strings.Replace(this.CreatedAt.String(), "Timestamp", "google_protobuf1.Timestamp", 1), `&`, ``, 1) + `,`,
		`DeletedAt:` + strings.Replace(fmt.Sprintf("%v", this.DeletedAt), "Timestamp", "google_protobuf1.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LookupOrganizationWebhookUsingSecretIDRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LookupOrganizationWebhookUsingSecretIDRequest{`,
		`OrgExternalID:` + fmt.Sprintf("%v", this.OrgExternalID) + `,`,
		`SecretID:` + fmt.Sprintf("%v", this.SecretID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LookupOrganizationWebhookUsingSecretIDResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LookupOrganizationWebhookUsingSecretIDResponse{`,
		`Webhook:` + strings.Replace(fmt.Sprintf("%v", this.Webhook), "Webhook", "Webhook", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringUsers(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *LookupOrgRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LookupOrgRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LookupOrgRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cookie", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cookie = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgExternalID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrgExternalID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorizeFor", wireType)
			}
			m.AuthorizeFor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuthorizeFor |= (AuthorizedAction(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LookupOrgResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LookupOrgResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LookupOrgResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrganizationID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeatureFlags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeatureFlags = append(m.FeatureFlags, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LookupUsingTokenRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LookupUsingTokenRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LookupUsingTokenRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorizeFor", wireType)
			}
			m.AuthorizeFor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuthorizeFor |= (AuthorizedAction(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LookupUsingTokenResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LookupUsingTokenResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LookupUsingTokenResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrganizationID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeatureFlags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeatureFlags = append(m.FeatureFlags, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LookupAdminRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LookupAdminRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LookupAdminRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cookie", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cookie = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LookupAdminResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LookupAdminResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LookupAdminResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdminID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LookupUserRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LookupUserRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LookupUserRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cookie", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cookie = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LookupUserResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LookupUserResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LookupUserResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetOrganizationsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetOrganizationsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetOrganizationsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Query = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageNumber", wireType)
			}
			m.PageNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageNumber |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetOrganizationsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetOrganizationsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetOrganizationsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Organizations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Organizations = append(m.Organizations, Organization{})
			if err := m.Organizations[len(m.Organizations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetBillableOrganizationsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBillableOrganizationsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBillableOrganizationsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Now", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Now, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetBillableOrganizationsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBillableOrganizationsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBillableOrganizationsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Organizations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Organizations = append(m.Organizations, Organization{})
			if err := m.Organizations[len(m.Organizations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTrialOrganizationsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTrialOrganizationsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTrialOrganizationsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Now", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Now, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTrialOrganizationsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTrialOrganizationsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTrialOrganizationsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Organizations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Organizations = append(m.Organizations, Organization{})
			if err := m.Organizations[len(m.Organizations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDelinquentOrganizationsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDelinquentOrganizationsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDelinquentOrganizationsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Now", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Now, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDelinquentOrganizationsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDelinquentOrganizationsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDelinquentOrganizationsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Organizations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Organizations = append(m.Organizations, Organization{})
			if err := m.Organizations[len(m.Organizations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetOrganizationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetOrganizationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetOrganizationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = &GetOrganizationRequest_ExternalID{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GCPExternalAccountID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = &GetOrganizationRequest_GCPExternalAccountID{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InternalID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = &GetOrganizationRequest_InternalID{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetOrganizationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetOrganizationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetOrganizationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Organization", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Organization.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Organization) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Organization: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Organization: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProbeToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProbeToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeatureFlags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeatureFlags = append(m.FeatureFlags, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefuseDataAccess", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RefuseDataAccess = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefuseDataUpload", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RefuseDataUpload = bool(v != 0)
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstSeenConnectedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FirstSeenConnectedAt == nil {
				m.FirstSeenConnectedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.FirstSeenConnectedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Platform = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Environment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Environment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrialExpiresAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.TrialExpiresAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZuoraAccountNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ZuoraAccountNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZuoraAccountCreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ZuoraAccountCreatedAt == nil {
				m.ZuoraAccountCreatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.ZuoraAccountCreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrialPendingExpiryNotifiedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TrialPendingExpiryNotifiedAt == nil {
				m.TrialPendingExpiryNotifiedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.TrialPendingExpiryNotifiedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrialExpiredNotifiedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TrialExpiredNotifiedAt == nil {
				m.TrialExpiredNotifiedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.TrialExpiredNotifiedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GCP", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GCP == nil {
				m.GCP = &GoogleCloudPlatform{}
			}
			if err := m.GCP.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TeamID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamExternalID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TeamExternalID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.DeletedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cleanup", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Cleanup = bool(v != 0)
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstSeenFluxConnectedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FirstSeenFluxConnectedAt == nil {
				m.FirstSeenFluxConnectedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.FirstSeenFluxConnectedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstSeenNetConnectedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FirstSeenNetConnectedAt == nil {
				m.FirstSeenNetConnectedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.FirstSeenNetConnectedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstSeenPromConnectedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FirstSeenPromConnectedAt == nil {
				m.FirstSeenPromConnectedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.FirstSeenPromConnectedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstSeenScopeConnectedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FirstSeenScopeConnectedAt == nil {
				m.FirstSeenScopeConnectedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.FirstSeenScopeConnectedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefuseDataReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RefuseDataReason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GoogleCloudPlatform) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GoogleCloudPlatform: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GoogleCloudPlatform: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalAccountID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalAccountID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Activated", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Activated = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsumerID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConsumerID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubscriptionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubscriptionName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubscriptionLevel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubscriptionLevel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubscriptionStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubscriptionStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetGCPRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetGCPRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetGCPRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalAccountID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalAccountID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetGCPResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetGCPResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetGCPResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GCP", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GCP.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateGCPRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateGCPRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateGCPRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GCP", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GCP == nil {
				m.GCP = &GoogleCloudPlatform{}
			}
			if err := m.GCP.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateGCPResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateGCPResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateGCPResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetOrganizationZuoraAccountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetOrganizationZuoraAccountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetOrganizationZuoraAccountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Number", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Number = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetOrganizationZuoraAccountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetOrganizationZuoraAccountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetOrganizationZuoraAccountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetOrganizationFlagRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetOrganizationFlagRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetOrganizationFlagRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Flag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Value = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetOrganizationFlagResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetOrganizationFlagResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetOrganizationFlagResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.User.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: User: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: User: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenCreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.TokenCreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstLoginAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.FirstLoginAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admin", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Admin = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastLoginAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.LastLoginAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NotifyTrialPendingExpiryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NotifyTrialPendingExpiryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NotifyTrialPendingExpiryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NotifyTrialPendingExpiryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NotifyTrialPendingExpiryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NotifyTrialPendingExpiryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NotifyTrialExpiredRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NotifyTrialExpiredRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NotifyTrialExpiredRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NotifyTrialExpiredResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NotifyTrialExpiredResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NotifyTrialExpiredResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NotifyRefuseDataUploadRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NotifyRefuseDataUploadRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NotifyRefuseDataUploadRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NotifyRefuseDataUploadResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NotifyRefuseDataUploadResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NotifyRefuseDataUploadResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Team) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Team: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Team: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZuoraAccountNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ZuoraAccountNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZuoraAccountCreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ZuoraAccountCreatedAt == nil {
				m.ZuoraAccountCreatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.ZuoraAccountCreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrialExpiresAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.TrialExpiresAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrialPendingExpiryNotifiedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TrialPendingExpiryNotifiedAt == nil {
				m.TrialPendingExpiryNotifiedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.TrialPendingExpiryNotifiedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrialExpiredNotifiedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TrialExpiredNotifiedAt == nil {
				m.TrialExpiredNotifiedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.TrialExpiredNotifiedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Empty) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Empty: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Empty: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Summary) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Summary: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Summary: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entries = append(m.Entries, &SummaryEntry{})
			if err := m.Entries[len(m.Entries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SummaryEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SummaryEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SummaryEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamExternalID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TeamExternalID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TeamName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrgID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgExternalID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrgExternalID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrgName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Emails", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Emails = append(m.Emails, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgCreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.OrgCreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstSeenConnectedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FirstSeenConnectedAt == nil {
				m.FirstSeenConnectedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.FirstSeenConnectedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Platform = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Environment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Environment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrialExpiresAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.TrialExpiresAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrialPendingExpiryNotifiedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TrialPendingExpiryNotifiedAt == nil {
				m.TrialPendingExpiryNotifiedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.TrialPendingExpiryNotifiedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrialExpiredNotifiedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TrialExpiredNotifiedAt == nil {
				m.TrialExpiredNotifiedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.TrialExpiredNotifiedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BillingEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BillingEnabled = bool(v != 0)
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefuseDataAccess", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RefuseDataAccess = bool(v != 0)
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefuseDataUpload", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RefuseDataUpload = bool(v != 0)
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZuoraAccountNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ZuoraAccountNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZuoraAccountCreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ZuoraAccountCreatedAt == nil {
				m.ZuoraAccountCreatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.ZuoraAccountCreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GCPAccountExternalID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GCPAccountExternalID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GCPAccountCreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.GCPAccountCreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GCPAccountSubscriptionLevel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GCPAccountSubscriptionLevel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GCPAccountSubscriptionStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GCPAccountSubscriptionStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Webhook) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Webhook: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Webhook: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrganizationID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntegrationType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IntegrationType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecretID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecretID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecretSigningKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecretSigningKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DeletedAt == nil {
				m.DeletedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.DeletedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LookupOrganizationWebhookUsingSecretIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LookupOrganizationWebhookUsingSecretIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LookupOrganizationWebhookUsingSecretIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgExternalID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrgExternalID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecretID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecretID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LookupOrganizationWebhookUsingSecretIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LookupOrganizationWebhookUsingSecretIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LookupOrganizationWebhookUsingSecretIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Webhook", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Webhook == nil {
				m.Webhook = &Webhook{}
			}
			if err := m.Webhook.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipUsers(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthUsers
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowUsers
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipUsers(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthUsers = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowUsers   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("users.proto", fileDescriptorUsers) }

var fileDescriptorUsers = []byte{
	// 2452 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x39, 0xcb, 0x73, 0xdb, 0xc6,
	0xf9, 0x84, 0x44, 0x8a, 0xe4, 0xa7, 0x87, 0xa9, 0xd5, 0xc3, 0x10, 0x2c, 0x93, 0x32, 0x12, 0xfb,
	0xa7, 0x38, 0x92, 0xfc, 0x1b, 0x35, 0x6d, 0xd3, 0x66, 0xdc, 0x98, 0x0f, 0x89, 0x56, 0xa3, 0x4a,
	0x32, 0x28, 0xb9, 0xa9, 0xdd, 0x89, 0x03, 0x91, 0x2b, 0x1a, 0x63, 0x12, 0xa0, 0xf1, 0x70, 0xad,
	0x9c, 0xf2, 0x27, 0x64, 0xa6, 0x87, 0xf6, 0xd0, 0x43, 0x8f, 0x3d, 0x75, 0xfa, 0x5f, 0x34, 0xc7,
	0x1c, 0x7b, 0x52, 0x6a, 0xf5, 0xd2, 0x6a, 0x7a, 0xc8, 0xb1, 0xc7, 0x0e, 0x16, 0x0b, 0x60, 0xf1,
	0xa2, 0x08, 0x47, 0xd3, 0x1b, 0xf6, 0x7b, 0xef, 0xe2, 0xdb, 0x6f, 0xbf, 0x07, 0x4c, 0x5a, 0x06,
	0xd6, 0x8d, 0x8d, 0x81, 0xae, 0x99, 0x1a, 0xca, 0x91, 0x85, 0xb0, 0xde, 0x55, 0xcc, 0xe7, 0xd6,
	0xf1, 0x46, 0x5b, 0xeb, 0xdf, 0xeb, 0x6a, 0x5d, 0xed, 0x1e, 0xc1, 0x1e, 0x5b, 0x27, 0x64, 0x45,
	0x16, 0xe4, 0xcb, 0xe1, 0x12, 0x2a, 0x5d, 0x4d, 0xeb, 0xf6, 0xb0, 0x4f, 0x65, 0x2a, 0x7d, 0x6c,
	0x98, 0x72, 0x7f, 0xe0, 0x10, 0x88, 0xbf, 0xe5, 0xa0, 0xb4, 0xab, 0x69, 0x2f, 0xac, 0xc1, 0xbe,
	0xde, 0x95, 0xf0, 0x4b, 0x0b, 0x1b, 0x26, 0x5a, 0x84, 0x89, 0xba, 0xa6, 0xbd, 0x50, 0x30, 0xcf,
	0xad, 0x70, 0xab, 0x45, 0x89, 0xae, 0xd0, 0xbb, 0x30, 0xbd, 0xaf, 0x77, 0xb7, 0x5e, 0x9b, 0x58,
	0x57, 0xe5, 0xde, 0x4e, 0x83, 0x1f, 0x23, 0xe8, 0x20, 0x10, 0x7d, 0x04, 0x53, 0x55, 0xcb, 0x7c,
	0xae, 0xe9, 0xca, 0x17, 0x78, 0x5b, 0xd3, 0xf9, 0xec, 0x0a, 0xb7, 0x3a, 0xb3, 0x79, 0x7d, 0xc3,
	0xd9, 0x8d, 0x87, 0xea, 0x54, 0xdb, 0xa6, 0xa2, 0xa9, 0x52, 0x80, 0xf8, 0xe7, 0xd9, 0xc2, 0x78,
	0x29, 0x2b, 0xfe, 0x95, 0x83, 0x59, 0xc6, 0x2a, 0x63, 0xa0, 0xa9, 0x06, 0x46, 0x0d, 0x98, 0xd9,
	0xd7, 0xbb, 0xb2, 0xaa, 0x7c, 0x21, 0xdb, 0x9c, 0x3b, 0x0d, 0xc7, 0xbc, 0xda, 0xf2, 0xc5, 0x59,
	0x85, 0xd7, 0x02, 0x98, 0x35, 0xad, 0xaf, 0x98, 0xb8, 0x3f, 0x30, 0x4f, 0xa5, 0x10, 0x0f, 0x5a,
	0x83, 0x89, 0x23, 0x03, 0xeb, 0xae, 0xf5, 0xb5, 0xf9, 0x8b, 0xb3, 0x4a, 0xc9, 0x22, 0x10, 0x86,
	0x8b, 0xd2, 0xa0, 0x9f, 0xc1, 0xd4, 0x36, 0x96, 0x4d, 0x4b, 0xc7, 0xdb, 0x3d, 0xb9, 0x6b, 0xf0,
	0xe3, 0x2b, 0xe3, 0xab, 0xc5, 0x9a, 0x70, 0x71, 0x56, 0x59, 0x3c, 0x61, 0xe0, 0x0c, 0x67, 0x80,
	0x5e, 0xec, 0xc1, 0x75, 0x67, 0x23, 0x47, 0x86, 0xa2, 0x76, 0x0f, 0xb5, 0x17, 0x58, 0x75, 0x4f,
	0x79, 0x1e, 0x72, 0x64, 0x4d, 0x0f, 0xd9, 0x59, 0x44, 0x4e, 0x6f, 0x2c, 0xc5, 0xe9, 0x89, 0x7f,
	0xe4, 0x80, 0x8f, 0xaa, 0xbb, 0xd2, 0xe3, 0x0b, 0x1f, 0xc8, 0x58, 0xca, 0x03, 0x59, 0x03, 0xe4,
	0x58, 0x58, 0xed, 0xf4, 0x15, 0xf5, 0x12, 0x8f, 0x13, 0xb7, 0x61, 0x2e, 0x40, 0x4d, 0xb7, 0x72,
	0x0f, 0xf2, 0x04, 0xe0, 0xed, 0x61, 0xe1, 0xe2, 0xac, 0x32, 0x2b, 0x3b, 0x20, 0x46, 0xb5, 0x4b,
	0x25, 0xbe, 0xef, 0xfa, 0x93, 0xfd, 0x5b, 0x2f, 0x53, 0x5a, 0x73, 0x4d, 0x74, 0x88, 0xa9, 0x4e,
	0xdf, 0x6f, 0xb8, 0xcb, 0xfd, 0x46, 0xdc, 0x87, 0xeb, 0x4d, 0x6c, 0xb2, 0x67, 0x67, 0x30, 0xff,
	0xfd, 0x91, 0x85, 0xf5, 0x53, 0xf7, 0xbf, 0x93, 0x05, 0x2a, 0x03, 0x1c, 0xc8, 0x5d, 0xbc, 0x67,
	0xf5, 0x8f, 0xb1, 0xf3, 0xd7, 0x73, 0x12, 0x03, 0x11, 0x9f, 0x02, 0x1f, 0x15, 0x48, 0x4d, 0xfb,
	0x98, 0xdc, 0x4b, 0x1f, 0xc1, 0x73, 0x2b, 0xe3, 0xab, 0x93, 0x9b, 0x73, 0xd4, 0x69, 0x58, 0x5c,
	0x2d, 0xfb, 0xf5, 0x59, 0x25, 0x23, 0x05, 0xe9, 0xc5, 0x5f, 0x41, 0xa5, 0x89, 0xcd, 0x9a, 0xd2,
	0xeb, 0xc9, 0xc7, 0x3d, 0x1c, 0x6b, 0xf5, 0x8f, 0x60, 0x7c, 0x4f, 0xfb, 0x0d, 0xb1, 0x79, 0x72,
	0x53, 0xd8, 0x70, 0xe2, 0xca, 0x86, 0x1b, 0x57, 0x36, 0x0e, 0xdd, 0xb8, 0x52, 0x2b, 0xd8, 0x0a,
	0xbe, 0xfa, 0xb6, 0xc2, 0x49, 0x36, 0x83, 0xd8, 0x86, 0x95, 0x64, 0xd1, 0x57, 0x65, 0xff, 0x63,
	0x58, 0x6e, 0x62, 0xf3, 0x50, 0x57, 0xe4, 0xde, 0x95, 0x1a, 0xff, 0x39, 0xdc, 0x4c, 0x90, 0x7b,
	0x55, 0x96, 0x3f, 0x85, 0x5b, 0x4d, 0x6c, 0x36, 0x70, 0x4f, 0x51, 0x5f, 0x5a, 0x58, 0x35, 0xaf,
	0xd4, 0x7c, 0x0c, 0xe2, 0x30, 0xe1, 0x57, 0xb5, 0x87, 0xdf, 0x73, 0xb0, 0x18, 0xf2, 0x4d, 0xd7,
	0xf2, 0x15, 0x00, 0xe6, 0xb9, 0x20, 0x0e, 0xff, 0x30, 0x23, 0x31, 0x30, 0xf4, 0x01, 0xcc, 0x37,
	0xeb, 0x07, 0x2e, 0xa0, 0xda, 0x6e, 0x6b, 0x96, 0x6a, 0xba, 0xc1, 0xf9, 0x61, 0x46, 0x8a, 0xc5,
	0xda, 0x72, 0x77, 0x54, 0x4f, 0xee, 0xb8, 0x2b, 0xd7, 0x87, 0xd5, 0xb2, 0x30, 0xb6, 0xd3, 0x10,
	0x3f, 0x8d, 0x5c, 0x43, 0x6f, 0xdb, 0xf7, 0x61, 0x8a, 0x85, 0xd3, 0xd3, 0x1d, 0xb2, 0xeb, 0x00,
	0xb9, 0xf8, 0xef, 0xc9, 0x20, 0x3f, 0x9a, 0xb1, 0x15, 0xd2, 0x3b, 0x3d, 0xb6, 0xd3, 0xb0, 0x2f,
	0x74, 0xe4, 0xa5, 0x64, 0x37, 0x8e, 0x20, 0xbb, 0x27, 0xf7, 0xb1, 0x63, 0xbc, 0x44, 0xbe, 0x49,
	0x10, 0xd0, 0xb5, 0x63, 0xec, 0xbc, 0x0b, 0x59, 0x87, 0xc7, 0x87, 0xa0, 0x1a, 0x14, 0xeb, 0x3a,
	0x96, 0x4d, 0xdc, 0xa9, 0x9a, 0x7c, 0x2e, 0x85, 0x3b, 0xf8, 0x6c, 0x48, 0x0c, 0x05, 0xf0, 0x09,
	0x3b, 0x80, 0x07, 0x83, 0x34, 0xba, 0x0b, 0x25, 0x09, 0x9f, 0x58, 0x06, 0x6e, 0xc8, 0xa6, 0x5c,
	0x6d, 0xb7, 0xb1, 0x61, 0xf0, 0xf9, 0x15, 0x6e, 0xb5, 0x20, 0x45, 0xe0, 0x41, 0xda, 0xa3, 0x41,
	0x4f, 0x93, 0x3b, 0x7c, 0x21, 0x4c, 0xeb, 0xc0, 0xd1, 0xa7, 0x30, 0xbf, 0xad, 0xe8, 0x86, 0xd9,
	0xc2, 0x58, 0xad, 0x6b, 0xaa, 0x8a, 0xdb, 0xce, 0x56, 0x8a, 0x23, 0x6d, 0x85, 0x23, 0x5b, 0x89,
	0x95, 0x80, 0x04, 0x28, 0x1c, 0xf4, 0x64, 0xf3, 0x44, 0xd3, 0xfb, 0x3c, 0x90, 0x73, 0xf3, 0xd6,
	0x68, 0x05, 0x26, 0xb7, 0xd4, 0x57, 0x8a, 0xae, 0xa9, 0x7d, 0xac, 0x9a, 0xfc, 0x24, 0x41, 0xb3,
	0x20, 0xb4, 0x0b, 0x33, 0xe4, 0x92, 0x6f, 0xbd, 0x1e, 0x28, 0x3a, 0x36, 0xaa, 0x26, 0x3f, 0x95,
	0xe2, 0x70, 0x43, 0xbc, 0x68, 0x03, 0xd0, 0x13, 0x4b, 0xd3, 0x65, 0xea, 0xae, 0x34, 0xa4, 0x4f,
	0x13, 0xb5, 0x31, 0x18, 0xf4, 0x04, 0x16, 0x58, 0xa8, 0xff, 0x87, 0x67, 0x52, 0x1c, 0x4b, 0xbc,
	0x08, 0xf4, 0x1c, 0x96, 0x89, 0x75, 0x07, 0x58, 0xed, 0x28, 0x6a, 0x97, 0x18, 0x79, 0xba, 0xa7,
	0x99, 0xca, 0x89, 0x42, 0x54, 0x5c, 0x4b, 0xa1, 0x62, 0xa8, 0x24, 0xf4, 0x6b, 0x58, 0x64, 0xce,
	0xa1, 0xc3, 0xe8, 0x28, 0xa5, 0xd0, 0x91, 0x20, 0x03, 0xad, 0xc1, 0x78, 0xb3, 0x7e, 0xc0, 0xcf,
	0x52, 0x51, 0xce, 0x25, 0x6d, 0x12, 0x81, 0xf5, 0x9e, 0x66, 0x75, 0xdc, 0x9f, 0x2d, 0xd9, 0x64,
	0xf6, 0xcb, 0x7e, 0x88, 0xe5, 0xfe, 0x4e, 0x83, 0x47, 0xce, 0xcb, 0xee, 0xac, 0xd0, 0x1d, 0x98,
	0xb1, 0xbf, 0x98, 0x7b, 0x39, 0x47, 0xf0, 0x21, 0xa8, 0x7d, 0xcf, 0x1a, 0xb8, 0x87, 0x9d, 0xbf,
	0x30, 0x9f, 0xe6, 0x9e, 0x79, 0x6c, 0x88, 0x87, 0x7c, 0xbd, 0x87, 0x65, 0xd5, 0x1a, 0xf0, 0x0b,
	0xe4, 0x3a, 0xb8, 0x4b, 0xf4, 0x39, 0xf0, 0x9e, 0x0f, 0x6f, 0xf7, 0xac, 0xd7, 0xec, 0x4d, 0x58,
	0x4c, 0x71, 0x56, 0x89, 0x52, 0xd0, 0x67, 0x70, 0xdd, 0xc3, 0xed, 0x61, 0x93, 0x55, 0x70, 0x3d,
	0x85, 0x82, 0x24, 0x21, 0x81, 0x1d, 0x1c, 0xe8, 0x5a, 0x9f, 0x55, 0xc0, 0xbf, 0xd5, 0x0e, 0x42,
	0x52, 0xd0, 0x31, 0x2c, 0x79, 0xb8, 0x56, 0x5b, 0x1b, 0x60, 0x56, 0xc5, 0x52, 0x0a, 0x15, 0xc9,
	0x62, 0x82, 0x91, 0x4b, 0xc2, 0xb2, 0xa1, 0xa9, 0xbc, 0x40, 0xfc, 0x21, 0x02, 0x17, 0xbf, 0x1d,
	0x83, 0xb9, 0x18, 0x77, 0x8b, 0x44, 0xfd, 0x35, 0x98, 0x4d, 0x78, 0xcb, 0xa4, 0x28, 0x02, 0x2d,
	0x43, 0xd1, 0xce, 0xe3, 0x5f, 0xd9, 0x97, 0x95, 0x3c, 0x04, 0x05, 0xc9, 0x07, 0x04, 0xa3, 0x7d,
	0xf6, 0xed, 0xa2, 0x7d, 0x19, 0xa0, 0xae, 0xa9, 0x86, 0xd5, 0x27, 0x99, 0x6b, 0xce, 0x79, 0x51,
	0x7c, 0x88, 0x7d, 0x06, 0x2d, 0xeb, 0xd8, 0x68, 0xeb, 0xca, 0xc0, 0x7e, 0xc5, 0xc8, 0x8b, 0x34,
	0xe1, 0x9c, 0x41, 0x18, 0x6e, 0xef, 0x8d, 0x85, 0xed, 0xe2, 0x57, 0xb8, 0x47, 0x9e, 0x85, 0xa2,
	0x14, 0x45, 0xd8, 0x51, 0x90, 0x05, 0xb6, 0x4c, 0xd9, 0xb4, 0x0c, 0xf2, 0x32, 0x14, 0xa5, 0x18,
	0x8c, 0x78, 0x1f, 0xa6, 0x9b, 0xd8, 0x6c, 0xd6, 0x0f, 0xdc, 0xdc, 0x21, 0xf6, 0x28, 0xb9, 0x84,
	0xa3, 0x14, 0x1b, 0x30, 0xe3, 0xb2, 0xd3, 0x07, 0x7e, 0xd3, 0x09, 0x19, 0xdc, 0x65, 0x21, 0x83,
	0x3e, 0xef, 0x36, 0xb1, 0xf8, 0x00, 0x4a, 0x47, 0x83, 0x8e, 0x6c, 0xe2, 0x80, 0x1d, 0xa3, 0xc9,
	0x71, 0x24, 0xcc, 0xc1, 0x2c, 0x23, 0xc1, 0x31, 0xc5, 0xae, 0xcb, 0xc4, 0x56, 0x30, 0x0f, 0x61,
	0xc3, 0xb5, 0xab, 0xa9, 0x1c, 0xcd, 0x96, 0x02, 0x29, 0xc3, 0x22, 0x4c, 0x30, 0xf5, 0x41, 0x51,
	0xa2, 0xab, 0xa0, 0xa3, 0x8c, 0xa7, 0xb8, 0x1c, 0x3e, 0x9b, 0x78, 0x1b, 0xde, 0x19, 0x6a, 0x21,
	0xdd, 0xc9, 0x09, 0x08, 0x21, 0x32, 0x3b, 0x63, 0x18, 0x75, 0x03, 0x08, 0xb2, 0x36, 0x39, 0x35,
	0x9f, 0x7c, 0xdb, 0xe5, 0xd0, 0x63, 0xb9, 0x67, 0x61, 0xea, 0xff, 0xce, 0x42, 0xbc, 0x09, 0x37,
	0x62, 0xf5, 0x50, 0x33, 0x56, 0xc9, 0xdf, 0x0e, 0x15, 0x73, 0x6c, 0x79, 0xe6, 0x15, 0x62, 0x1f,
	0xc2, 0x35, 0x8f, 0x92, 0x3a, 0xc6, 0x6d, 0xc8, 0xda, 0x6b, 0xfa, 0x47, 0x27, 0xe9, 0x1f, 0xb5,
	0x41, 0xd4, 0x15, 0x08, 0x5a, 0xfc, 0xcb, 0xb8, 0x43, 0x87, 0x16, 0xfc, 0x3b, 0x5e, 0xcb, 0x5d,
	0x9c, 0x55, 0xb8, 0x75, 0x72, 0xd5, 0x2b, 0x90, 0xdb, 0xea, 0xcb, 0x4a, 0x8f, 0xf6, 0x11, 0x8a,
	0x17, 0x67, 0x95, 0x1c, 0xb6, 0x01, 0x92, 0x03, 0x47, 0x37, 0xdc, 0x02, 0x7f, 0x9c, 0x65, 0xa5,
	0x75, 0xfe, 0x23, 0x98, 0x21, 0x1f, 0x69, 0x6e, 0xf8, 0xb4, 0x6d, 0x1d, 0x91, 0x42, 0xf3, 0x8e,
	0x80, 0x00, 0xf4, 0x0b, 0x98, 0x22, 0xc1, 0x6e, 0x57, 0xeb, 0x2a, 0xea, 0x48, 0x09, 0x62, 0x48,
	0x60, 0x80, 0x1d, 0x35, 0x59, 0xaf, 0x9a, 0x48, 0x2b, 0x8b, 0x89, 0x41, 0x37, 0x20, 0x47, 0xea,
	0x70, 0x27, 0x85, 0xf4, 0xce, 0x81, 0xc0, 0xd0, 0x27, 0x30, 0xb9, 0x2b, 0xfb, 0x36, 0x17, 0xd2,
	0xea, 0x61, 0xb9, 0xc5, 0x2a, 0x54, 0x48, 0xce, 0x70, 0x1a, 0xcd, 0x54, 0x46, 0x74, 0x51, 0x51,
	0x84, 0x95, 0x64, 0x11, 0xd4, 0xfb, 0x3e, 0x82, 0x25, 0x86, 0x86, 0x26, 0x2b, 0xa3, 0x2a, 0x58,
	0x06, 0x21, 0x8e, 0x99, 0x8a, 0xfe, 0x18, 0x6e, 0x3a, 0xd8, 0x70, 0xee, 0x3c, 0xaa, 0xf8, 0x15,
	0x28, 0x27, 0x09, 0xa0, 0x2a, 0xfe, 0x95, 0x85, 0xac, 0x9d, 0xef, 0x24, 0xf9, 0xf5, 0x12, 0x2d,
	0x4c, 0xc6, 0x58, 0x84, 0x53, 0x9f, 0xdc, 0x0e, 0x28, 0x0f, 0xb8, 0x35, 0x7b, 0xcd, 0x7f, 0x12,
	0x9b, 0x00, 0x67, 0x9d, 0x6b, 0x62, 0x07, 0x1f, 0x87, 0x25, 0x2e, 0x17, 0x7e, 0x96, 0x94, 0x0b,
	0x8f, 0xe6, 0xcc, 0x9c, 0xef, 0x18, 0x09, 0x09, 0xf1, 0xa3, 0x48, 0xaa, 0x3f, 0x91, 0xfe, 0xde,
	0x05, 0xf3, 0xfd, 0xfe, 0x25, 0x39, 0x76, 0x3e, 0xad, 0xe9, 0xc3, 0x13, 0x6d, 0x39, 0x31, 0xd1,
	0x2e, 0xa4, 0x55, 0x94, 0x94, 0x6d, 0x07, 0xae, 0x7e, 0xf1, 0xed, 0xaf, 0xbe, 0x98, 0xb7, 0x63,
	0xe4, 0xc0, 0x3c, 0x15, 0x3f, 0x84, 0x7c, 0xcb, 0xea, 0xf7, 0x65, 0xfd, 0x14, 0xad, 0x43, 0x7e,
	0x4b, 0x35, 0x75, 0x05, 0x87, 0x3b, 0x0d, 0x94, 0xc0, 0x46, 0x9e, 0x4a, 0x2e, 0x8d, 0xf8, 0x25,
	0xc0, 0x14, 0x8b, 0x41, 0xeb, 0x91, 0x24, 0x3e, 0xe0, 0xc2, 0xe1, 0x5c, 0xfe, 0x16, 0x14, 0x6c,
	0x48, 0xd4, 0xa5, 0x3d, 0xb0, 0x1d, 0xa0, 0xf6, 0xf5, 0x6e, 0xd8, 0xa3, 0x1d, 0x18, 0x7a, 0x3f,
	0xdc, 0xf4, 0xce, 0xb2, 0x44, 0xa1, 0xde, 0x77, 0x05, 0xf2, 0xfb, 0x7a, 0x97, 0xe8, 0xca, 0xb1,
	0x64, 0x2e, 0xd4, 0x7e, 0xa6, 0xc8, 0xe3, 0xe0, 0xd6, 0xdd, 0x74, 0x85, 0x1e, 0x92, 0x6e, 0x82,
	0x7f, 0xe8, 0xf9, 0x14, 0xe9, 0x5e, 0x80, 0x33, 0xb1, 0xc6, 0x2e, 0x5c, 0x69, 0x8d, 0x5d, 0x1c,
	0x5e, 0x63, 0xc3, 0x28, 0x35, 0xf6, 0xe4, 0xf7, 0xa8, 0xb1, 0x2f, 0xab, 0x6b, 0xa7, 0xfe, 0x07,
	0x75, 0xed, 0xf4, 0x15, 0xd4, 0xb5, 0xeb, 0x30, 0x53, 0x53, 0x7a, 0x3d, 0x5b, 0xb1, 0x2a, 0x1f,
	0xf7, 0x70, 0x87, 0x14, 0xfd, 0xde, 0x23, 0x19, 0x42, 0xc6, 0x36, 0x66, 0xae, 0xa5, 0x68, 0xcc,
	0x94, 0x12, 0x1a, 0x33, 0xf1, 0x2d, 0x8b, 0xd9, 0xf4, 0x2d, 0x0b, 0xf4, 0xfd, 0x5b, 0x16, 0x9b,
	0xa4, 0x23, 0x48, 0xc1, 0x91, 0x52, 0x3d, 0x16, 0x87, 0x1e, 0xc3, 0x9c, 0x0f, 0xf7, 0xad, 0x49,
	0x53, 0xba, 0xc7, 0x09, 0x40, 0x0f, 0xe0, 0x86, 0x0f, 0x8e, 0x16, 0x3f, 0x0b, 0xc4, 0xa4, 0x61,
	0x24, 0xa8, 0x06, 0xcb, 0xf1, 0x68, 0x5a, 0x10, 0x2d, 0x12, 0x11, 0x43, 0x69, 0xc4, 0x3f, 0x8c,
	0x43, 0xfe, 0x97, 0xf8, 0xf8, 0xb9, 0xa6, 0xbd, 0x48, 0x7a, 0xb4, 0xd7, 0x23, 0xc3, 0x9d, 0x40,
	0xac, 0x0b, 0x4f, 0x71, 0xee, 0xc3, 0xb5, 0x1d, 0xd5, 0xc4, 0x5d, 0x9d, 0x00, 0x0e, 0x4f, 0x07,
	0xb4, 0x0f, 0x59, 0x9b, 0xbb, 0x38, 0xab, 0x5c, 0x53, 0x82, 0x28, 0x29, 0x4c, 0x8b, 0x56, 0xa1,
	0xd0, 0xc2, 0x6d, 0x1d, 0x9b, 0x5e, 0x38, 0x9c, 0xba, 0x38, 0xab, 0x14, 0x0c, 0x0a, 0x93, 0x3c,
	0x2c, 0x7a, 0x00, 0x25, 0xe7, 0xbb, 0xa5, 0x74, 0x55, 0x45, 0xed, 0x7e, 0x82, 0x4f, 0x69, 0x64,
	0x24, 0xf3, 0x13, 0x23, 0x84, 0x93, 0x22, 0xd4, 0x68, 0x3f, 0x5d, 0x1a, 0xba, 0x40, 0xdf, 0xa2,
	0x62, 0xdb, 0x65, 0x0a, 0xa7, 0xa3, 0xfb, 0x6c, 0x73, 0x27, 0x3f, 0x92, 0x40, 0xfb, 0xc9, 0x2c,
	0x76, 0x5c, 0xa6, 0x50, 0xa7, 0x47, 0x7c, 0x09, 0xeb, 0xde, 0xb0, 0xd2, 0x3b, 0x64, 0xfa, 0xbf,
	0xc8, 0x1c, 0xce, 0x3d, 0x0d, 0x37, 0x87, 0x8b, 0xcc, 0x51, 0xb9, 0xb8, 0x39, 0xaa, 0xc0, 0x1c,
	0xb2, 0x53, 0x30, 0x79, 0x6b, 0xf1, 0x09, 0x6c, 0x8c, 0xaa, 0x92, 0x16, 0x3d, 0xab, 0x9e, 0x0b,
	0xd1, 0xba, 0x67, 0x86, 0xbe, 0xba, 0x14, 0x2a, 0xb9, 0xe8, 0xbb, 0x8f, 0xa0, 0x14, 0x1e, 0x33,
	0xa2, 0x22, 0xe4, 0xf6, 0x0f, 0x1f, 0x6e, 0x49, 0xa5, 0x0c, 0xe2, 0x61, 0x7e, 0x67, 0xaf, 0x75,
	0x58, 0xdd, 0xab, 0x6f, 0x3d, 0x6b, 0x54, 0x0f, 0xab, 0xcf, 0xaa, 0xf5, 0xfa, 0x56, 0xab, 0x55,
	0xe2, 0xa2, 0x98, 0xa3, 0x83, 0xdd, 0xfd, 0x6a, 0xa3, 0x34, 0xb6, 0xf9, 0xe7, 0x69, 0xc8, 0xd9,
	0xa5, 0x94, 0x81, 0x1e, 0x40, 0xd1, 0x33, 0x1c, 0xb9, 0x53, 0xcd, 0xf0, 0x00, 0x5a, 0xe0, 0xa3,
	0x08, 0x9a, 0xbc, 0x66, 0xd0, 0x91, 0x3b, 0xb0, 0xf6, 0x47, 0x9c, 0xa8, 0x1c, 0xa0, 0x8f, 0x8c,
	0x5a, 0x85, 0x4a, 0x22, 0xde, 0x13, 0xbb, 0x0d, 0x93, 0xcc, 0xa4, 0x11, 0x2d, 0x05, 0x38, 0xd8,
	0x59, 0xa5, 0x20, 0xc4, 0xa1, 0x3c, 0x39, 0x75, 0x00, 0x7f, 0x78, 0x88, 0xf8, 0x90, 0x62, 0xaf,
	0x5e, 0x15, 0x96, 0x62, 0x30, 0xec, 0x1e, 0xc3, 0xc3, 0x3e, 0x6f, 0x8f, 0x09, 0x63, 0x45, 0x6f,
	0x8f, 0x49, 0x53, 0x42, 0x31, 0x83, 0xfa, 0x64, 0x86, 0x18, 0x3b, 0x8b, 0x43, 0x77, 0x7c, 0xf6,
	0x61, 0x73, 0x40, 0xe1, 0xff, 0x2e, 0xa5, 0xf3, 0xd4, 0x75, 0x60, 0x21, 0x76, 0x7a, 0x86, 0xde,
	0xf1, 0x65, 0x24, 0xce, 0xec, 0x84, 0x77, 0x87, 0x13, 0x79, 0x5a, 0x0c, 0x10, 0x92, 0x87, 0x5c,
	0x68, 0xd5, 0x97, 0x32, 0x7c, 0xc8, 0x26, 0xbc, 0x37, 0x02, 0xa5, 0xa7, 0x54, 0x22, 0x5d, 0x85,
	0xc0, 0xfc, 0xe7, 0x66, 0xfc, 0xf9, 0xbb, 0xe2, 0xcb, 0x49, 0x68, 0x4f, 0xe6, 0x67, 0x30, 0x17,
	0xd3, 0xf2, 0x40, 0xb7, 0xdc, 0xec, 0x38, 0xb1, 0xed, 0x22, 0x88, 0xc3, 0x48, 0x3c, 0xf9, 0xaf,
	0x22, 0x2d, 0x15, 0xf6, 0xfd, 0x45, 0xef, 0xc5, 0x0b, 0x89, 0xe9, 0x53, 0x09, 0x77, 0x47, 0x21,
	0xf5, 0xf4, 0xfe, 0x18, 0x26, 0x9c, 0xce, 0x1c, 0x9a, 0xf7, 0xcf, 0xc0, 0xef, 0xaf, 0x09, 0x0b,
	0x21, 0xa8, 0xc7, 0xf8, 0x00, 0x8a, 0x5e, 0x2b, 0xcd, 0x8b, 0x15, 0xe1, 0xf6, 0x9c, 0x17, 0x2b,
	0xa2, 0x5d, 0xb7, 0x0c, 0xfa, 0x29, 0xe4, 0x69, 0xf3, 0x07, 0x31, 0x5a, 0xd8, 0x6b, 0xb8, 0x18,
	0x06, 0xb3, 0x97, 0x25, 0xa9, 0x11, 0xe0, 0x5d, 0x96, 0x4b, 0x9a, 0x0d, 0xde, 0x65, 0xb9, 0xb4,
	0xa3, 0x90, 0x41, 0x4f, 0x01, 0x45, 0xdb, 0x02, 0x68, 0x25, 0x2a, 0x20, 0xd8, 0x6e, 0x10, 0x6e,
	0x0d, 0xa1, 0xf0, 0x84, 0x77, 0x61, 0x31, 0xbe, 0x29, 0x80, 0xde, 0x0d, 0xb0, 0x27, 0x34, 0x1d,
	0x84, 0xdb, 0x97, 0x50, 0x79, 0x8a, 0xd6, 0x00, 0x9a, 0xd8, 0x74, 0x2b, 0xbd, 0x29, 0xca, 0x46,
	0x4a, 0x40, 0x61, 0x26, 0x58, 0xe6, 0x89, 0x19, 0xf4, 0x3b, 0x0e, 0xee, 0x8c, 0xf6, 0x8c, 0xa1,
	0x0f, 0xc2, 0x2f, 0xc2, 0x28, 0x0f, 0xad, 0xf0, 0xc3, 0x94, 0x5c, 0xee, 0x3e, 0x6a, 0xff, 0xff,
	0xcd, 0x9b, 0x72, 0xe6, 0x6f, 0x6f, 0xca, 0x99, 0xef, 0xde, 0x94, 0xb9, 0xff, 0xbc, 0x29, 0x73,
	0x5f, 0x9e, 0x97, 0xb9, 0x3f, 0x9d, 0x97, 0xb9, 0xaf, 0xcf, 0xcb, 0xdc, 0x37, 0xe7, 0x65, 0xee,
	0xef, 0xe7, 0x65, 0xee, 0x9f, 0xe7, 0xe5, 0xcc, 0x77, 0xe7, 0x65, 0xee, 0xab, 0x7f, 0x94, 0x33,
	0xc7, 0x13, 0x24, 0x75, 0xf8, 0xc1, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x21, 0x7c, 0xb4, 0xe0,
	0xb5, 0x25, 0x00, 0x00,
}
