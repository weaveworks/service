syntax = "proto3";

package users;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "google/protobuf/timestamp.proto";

option (gogoproto.populate_all) = true;

service Users {
    // LookupOrg authenticates & authorizes a cookie for access to an org by extenal ID.
    rpc LookupOrg(LookupOrgRequest) returns (LookupOrgResponse) {};

    // LookupUsingToken authenticates & authorizes a token for access to an org.
    rpc LookupUsingToken(LookupUsingTokenRequest) returns (LookupUsingTokenResponse) {};

    // LookupAdmin authenticates & authorizes a cookie for admin access.
    rpc LookupAdmin(LookupAdminRequest) returns (LookupAdminResponse) {};

    // LookupUser authenticates a cookie.
    rpc LookupUser(LookupUserRequest) returns (LookupUserResponse) {};

    // GetOrganizations returns a list of all organizations by default. See
    // GetOrganizationsRequest for more details.
    rpc GetOrganizations(GetOrganizationsRequest) returns (GetOrganizationsResponse) {};
    // GetBillableOrganizations returns all of the organizations that are past
    // their trial period and have billing enabled. Currently knows nothing
    // about payment status, so will include organizations that are well past
    // their trial period but haven't provided credit card details.
    rpc GetBillableOrganizations(GetBillableOrganizationsRequest) returns (GetBillableOrganizationsResponse) {};
    // GetTrialOrganizations returns all organizations that are currently in their
    // trial period.
    rpc GetTrialOrganizations(GetTrialOrganizationsRequest) returns (GetTrialOrganizationsResponse) {};
    // GetDelinquentOrganizations returns all organizations that are beyond their
    // trial period and haven't yet supplied any payment method. We determine this
    // by means of having a Zuora account.
    rpc GetDelinquentOrganizations(GetDelinquentOrganizationsRequest) returns (GetDelinquentOrganizationsResponse) {};
    rpc GetOrganization(GetOrganizationRequest) returns (GetOrganizationResponse) {};
    rpc SetOrganizationFlag(SetOrganizationFlagRequest) returns (SetOrganizationFlagResponse) {};
    // SetOrganizationZuoraAccount updates zuora account information. It should only
    // be called when changed which denotes that an account has been created. If you
    // omit `ZuoraAccountCreatedAt` it will be automatically updated to now.
    rpc SetOrganizationZuoraAccount(SetOrganizationZuoraAccountRequest) returns (SetOrganizationZuoraAccountResponse) {};

    // GetGCP returns the Google Cloud Platform entry.
    rpc GetGCP(GetGCPRequest) returns (GetGCPResponse) {};
    // UpdateGCP updates the Google Cloud Platform entry.
    rpc UpdateGCP(UpdateGCPRequest) returns (UpdateGCPResponse) {};

    // GetUser returns details for a user
    rpc GetUser(GetUserRequest) returns (GetUserResponse) {};

    // GetOrganizationsReadyForWeeklyReport lists all the organizations that need weekly report updates sent out.
    rpc GetOrganizationsReadyForWeeklyReport(GetOrganizationsReadyForWeeklyReportRequest) returns (GetOrganizationsReadyForWeeklyReportResponse) {};

    // SendOutWeeklyReport sends weekly report emails to all the users of the organization.
    rpc SendOutWeeklyReport(SendOutWeeklyReportRequest) returns (SendOutWeeklyReportResponse) {};

    // NotifyTrialPendingExpiry sends a "Trial expiring soon" notification
    // to this user and records the date sent.
    rpc NotifyTrialPendingExpiry(NotifyTrialPendingExpiryRequest) returns (NotifyTrialPendingExpiryResponse) {};

    // NotifyTrialExpired sends a "Trial expired" notification to this user
    // and records the date sent.
    rpc NotifyTrialExpired(NotifyTrialExpiredRequest) returns (NotifyTrialExpiredResponse) {};

    // NotifyRefuseDataUpload sends a "data upload blocked" notification to the members
    // of this organization.
    rpc NotifyRefuseDataUpload(NotifyRefuseDataUploadRequest) returns (NotifyRefuseDataUploadResponse) {};

	// GetSummary exports a summary of the DB.
	// WARNING: this is a relatively expensive query, and basically exports the entire DB.
    rpc GetSummary(Empty) returns (Summary) {};

    // LookupOrganizationWebhookUsingSecretID returns a Webhook given the external org ID and the webhook secret ID
    rpc LookupOrganizationWebhookUsingSecretID(LookupOrganizationWebhookUsingSecretIDRequest) returns (LookupOrganizationWebhookUsingSecretIDResponse) {};

    // SetOrganizationWebhookFirstSeenAt sets the FirstSeenAt field on the webhook to the current time
    rpc SetOrganizationWebhookFirstSeenAt(SetOrganizationWebhookFirstSeenAtRequest) returns (SetOrganizationWebhookFirstSeenAtResponse) {};

    // InformOrganizationBillingConfigured informs external integrations that a user has begun a paid subscription for an organization
    rpc InformOrganizationBillingConfigured(InformOrganizationBillingConfiguredRequest) returns (Empty) {};
}

enum AuthorizedAction {
    OTHER = 0;
    // Allows reading data
    INSTANCE_DATA_ACCESS = 1;
    // Allows writing data
    INSTANCE_DATA_UPLOAD = 2;
}

message LookupOrgRequest {
    reserved 3;

    string Cookie = 1;
    string OrgExternalID = 2;

    AuthorizedAction AuthorizeFor = 4;
}

message LookupOrgResponse {
    string OrganizationID = 1 [(gogoproto.jsontag) = "organizationID,omitempty"];
    string UserID = 2 [(gogoproto.jsontag) = "userID,omitempty"];
    repeated string FeatureFlags = 3 [(gogoproto.jsontag) = "featureFlags,omitempty"];
}

message LookupUsingTokenRequest {
    string Token = 1;
    AuthorizedAction AuthorizeFor = 2;
}

message LookupUsingTokenResponse {
    string OrganizationID = 1 [(gogoproto.jsontag) = "organizationID,omitempty"];
    repeated string FeatureFlags = 2 [(gogoproto.jsontag) = "featureFlags,omitempty"];
}

message LookupAdminRequest {
    string Cookie = 1;
}

message LookupAdminResponse {
    string AdminID = 1 [(gogoproto.jsontag) = "adminID,omitempty"];
}

message LookupUserRequest {
    string Cookie = 1;
}

message LookupUserResponse {
    string UserID = 1 [(gogoproto.jsontag) = "userID,omitempty"];
}

// GetOrganizationsRequest requests a list of organizations.
message GetOrganizationsRequest {
    // Query restricts the organizations returned. If specified, will find
    // only organizations that have Query as a substring of the organization
    // name.
    string Query = 1;
    // If 0 or less, return everything. Otherwise, return a single page of
    // implementation-dependent results (currently 30).
    int32 PageNumber = 2;
}

message GetOrganizationsResponse {
    repeated Organization Organizations = 1 [(gogoproto.nullable) = false];
}

// An organization is billable if its trial period has expired.
message GetBillableOrganizationsRequest {
    // The current time for the purposes of determining whether the trial
    // period has expired.
    google.protobuf.Timestamp Now = 1 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
}

message GetBillableOrganizationsResponse {
    repeated Organization Organizations = 1 [(gogoproto.nullable) = false];
}

message GetTrialOrganizationsRequest {
    // The current time for the purposes of determining whether the trial
    // period has expired.
    google.protobuf.Timestamp Now = 1 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
}

message GetTrialOrganizationsResponse {
    repeated Organization Organizations = 1 [(gogoproto.nullable) = false];
}

// An organization is delinquent if its trial period is expired and no
// associated payment account exists.
message GetDelinquentOrganizationsRequest {
    // The current time for the purposes of determining whether the trial
    // period has expired.
    google.protobuf.Timestamp Now = 1 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
}

message GetDelinquentOrganizationsResponse {
    repeated Organization Organizations = 1 [(gogoproto.nullable) = false];
}

message GetOrganizationRequest {
    oneof ID {
        string ExternalID = 1;
        string GCPExternalAccountID = 2;
        string InternalID = 3;
    }
}

message GetOrganizationResponse {
    Organization Organization = 1 [(gogoproto.nullable) = false];
}

message Organization {
    string ID = 1;
    string ExternalID = 2;
    string Name = 3;
    string ProbeToken = 4;
    google.protobuf.Timestamp CreatedAt = 5 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
    repeated string FeatureFlags = 6;
    bool RefuseDataAccess = 7;
    bool RefuseDataUpload = 8;
    google.protobuf.Timestamp FirstSeenConnectedAt = 9 [(gogoproto.stdtime) = true, (gogoproto.nullable) = true];
    string Platform = 10;
    string Environment = 11;
    // When the organization's trial period expires.
    google.protobuf.Timestamp TrialExpiresAt = 12 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
    string ZuoraAccountNumber = 13;
    google.protobuf.Timestamp ZuoraAccountCreatedAt = 14 [(gogoproto.stdtime) = true, (gogoproto.nullable) = true];
    // When we sent a «trial expiring soon» notification at
    google.protobuf.Timestamp TrialPendingExpiryNotifiedAt = 15 [(gogoproto.stdtime) = true, (gogoproto.nullable) = true];
    // When we sent a «trial expired» notification at
    google.protobuf.Timestamp TrialExpiredNotifiedAt = 16 [(gogoproto.stdtime) = true, (gogoproto.nullable) = true];
    // For organizations that are coming from GCP
    GoogleCloudPlatform GCP = 17;
    string TeamID = 18;
    string TeamExternalID = 19;
    google.protobuf.Timestamp DeletedAt = 20 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
    bool Cleanup = 21;
    google.protobuf.Timestamp FirstSeenFluxConnectedAt = 22 [(gogoproto.stdtime) = true, (gogoproto.nullable) = true];
    google.protobuf.Timestamp FirstSeenNetConnectedAt = 23 [(gogoproto.stdtime) = true, (gogoproto.nullable) = true];
    google.protobuf.Timestamp FirstSeenPromConnectedAt = 24 [(gogoproto.stdtime) = true, (gogoproto.nullable) = true];
    google.protobuf.Timestamp FirstSeenScopeConnectedAt = 25 [(gogoproto.stdtime) = true, (gogoproto.nullable) = true];
    // Replacing the default data refusal reason
    string RefuseDataReason = 26;
    // Keeping track of when weekly report email was last sent for the instance
    google.protobuf.Timestamp LastSentWeeklyReportAt = 27 [(gogoproto.stdtime) = true, (gogoproto.nullable) = true];
    // Used by the admin interface
    string PlatformVersion = 28;
    string DeletedBy = 29;
}

message GoogleCloudPlatform {
    string ID = 1;
    // External account ID from Google
    string ExternalAccountID = 2;
    // Whether the GCP account has been activated or not. Note that this does not describe the state of the subscription.
    bool Activated = 3;
    google.protobuf.Timestamp CreatedAt = 4 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
    // Consumer ID to report usage against
    string ConsumerID = 5;
    // Name of the running subscription, in the format "partnerSubscriptions/*"
    string SubscriptionName = 6;
    // Level of the subscription, can be "standard" or "enterprise"
    string SubscriptionLevel = 7;
    // Status of the subscrption, can be one of "PENDING", "ACTIVE', or "COMPLETE"
    string SubscriptionStatus = 8;
}

message GetGCPRequest {
    string ExternalAccountID = 1;
}

message GetGCPResponse {
    GoogleCloudPlatform GCP = 1 [(gogoproto.nullable) = false];
}

message UpdateGCPRequest {
    GoogleCloudPlatform GCP  = 1;
}
message UpdateGCPResponse {
}

message SetOrganizationZuoraAccountRequest {
    string ExternalID = 1;
    string Number = 2;
    google.protobuf.Timestamp CreatedAt = 3 [(gogoproto.stdtime) = true, (gogoproto.nullable) = true];
}

message SetOrganizationZuoraAccountResponse {
}

message SetOrganizationFlagRequest {
  string ExternalID = 1;
  string Flag = 2;
  bool Value = 3;
}

message SetOrganizationFlagResponse {
}

message GetUserRequest {
    string UserID = 1;
}

message GetUserResponse {
    User User = 1 [(gogoproto.nullable) = false];
}

message GetOrganizationsReadyForWeeklyReportRequest {
    google.protobuf.Timestamp Now = 1 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
}

message GetOrganizationsReadyForWeeklyReportResponse {
    repeated Organization Organizations = 1 [(gogoproto.nullable) = false];
}

message SendOutWeeklyReportRequest {
    google.protobuf.Timestamp Now = 1 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
    string ExternalID = 2;
}

message SendOutWeeklyReportResponse {
}

message User {
    string ID = 1 [(gogoproto.jsontag) = "-"];
    string Email = 2 [(gogoproto.jsontag) = "email"];
    string Token = 3 [(gogoproto.jsontag) = "-"];
    google.protobuf.Timestamp TokenCreatedAt = 4 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = "-"];
    google.protobuf.Timestamp FirstLoginAt = 5 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = "-"];
    google.protobuf.Timestamp CreatedAt = 6 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = "-"];
    bool Admin = 7 [(gogoproto.jsontag) = "-"];
    google.protobuf.Timestamp LastLoginAt = 8 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = "-"];
    string Company = 9 [(gogoproto.jsontag) = "company"];
    string Name = 10 [(gogoproto.jsontag) = "name"];
    string FirstName = 11 [(gogoproto.jsontag) = "firstName"];
    string LastName = 12 [(gogoproto.jsontag) = "lastName"];
}

message NotifyTrialPendingExpiryRequest {
    string ExternalID = 1;
}

message NotifyTrialPendingExpiryResponse {
}

message NotifyTrialExpiredRequest {
    string ExternalID = 1;
}

message NotifyTrialExpiredResponse {
}

message NotifyRefuseDataUploadRequest {
    string ExternalID = 1;
}

message NotifyRefuseDataUploadResponse {
}

message Team {
    string ID = 1 [(gogoproto.jsontag) = "-"];
    string Name = 2 [(gogoproto.jsontag) = "-"];
    string ExternalID = 3 [(gogoproto.jsontag) = "-"];
    string ZuoraAccountNumber = 4 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "-"];
    google.protobuf.Timestamp ZuoraAccountCreatedAt = 5 [(gogoproto.stdtime) = true, (gogoproto.nullable) = true, (gogoproto.jsontag) = "-"];
    google.protobuf.Timestamp TrialExpiresAt = 6 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = "-"];
    google.protobuf.Timestamp TrialPendingExpiryNotifiedAt = 7 [(gogoproto.stdtime) = true, (gogoproto.nullable) = true, (gogoproto.jsontag) = "-"];
    google.protobuf.Timestamp TrialExpiredNotifiedAt = 8 [(gogoproto.stdtime) = true, (gogoproto.nullable) = true, (gogoproto.jsontag) = "-"];
    google.protobuf.Timestamp CreatedAt = 9 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = "-"];
}

// Empty message, i.e. equivalent to "void"/"Unit"/etc.
message Empty {
}

message Summary {
    repeated SummaryEntry Entries = 1;
}

message SummaryEntry {
    string TeamExternalID = 1 [(gogoproto.jsontag) = "-"];
    string TeamName = 2 [(gogoproto.jsontag) = "-"];
    string OrgID = 3 [(gogoproto.jsontag) = "-"];
    string OrgExternalID = 4 [(gogoproto.jsontag) = "-"];
    string OrgName = 5 [(gogoproto.jsontag) = "-"];
    repeated string Emails = 6;
    google.protobuf.Timestamp OrgCreatedAt = 7 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
    google.protobuf.Timestamp FirstSeenConnectedAt = 8 [(gogoproto.stdtime) = true, (gogoproto.nullable) = true];
    string Platform = 9;
    string Environment = 10;
    // When the organization's trial period expires.
    google.protobuf.Timestamp TrialExpiresAt = 11 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
    // When we sent a «trial expiring soon» notification at
    google.protobuf.Timestamp TrialPendingExpiryNotifiedAt = 12 [(gogoproto.stdtime) = true, (gogoproto.nullable) = true];
    // When we sent a «trial expired» notification at
    google.protobuf.Timestamp TrialExpiredNotifiedAt = 13 [(gogoproto.stdtime) = true, (gogoproto.nullable) = true];
    bool BillingEnabled = 14 [(gogoproto.jsontag) = "-"];
    bool RefuseDataAccess = 15;
    bool RefuseDataUpload = 16;
    string ZuoraAccountNumber = 17;
    google.protobuf.Timestamp ZuoraAccountCreatedAt = 18 [(gogoproto.stdtime) = true, (gogoproto.nullable) = true];
    string GCPAccountExternalID = 19;
    google.protobuf.Timestamp GCPAccountCreatedAt = 20 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
    // Level of the subscription, can be "standard" or "enterprise"
    string GCPAccountSubscriptionLevel = 21;
    // Status of the subscrption, can be one of "PENDING", "ACTIVE', or "COMPLETE"
    string GCPAccountSubscriptionStatus = 22;
}

message Webhook {
    string ID = 1 [(gogoproto.jsontag) = "-"];
    string OrganizationID = 2 [(gogoproto.jsontag) = "-"];
    string IntegrationType = 3 [(gogoproto.jsontag) = "integrationType"];
    string SecretID = 4 [(gogoproto.jsontag) = "secretID"];
    string SecretSigningKey = 5 [(gogoproto.jsontag) = "secretSigningKey"];
    google.protobuf.Timestamp CreatedAt = 6  [(gogoproto.stdtime) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = "createdAt"];
    google.protobuf.Timestamp DeletedAt = 7  [(gogoproto.stdtime) = true, (gogoproto.nullable) = true, (gogoproto.jsontag) = "deletedAt"];
    google.protobuf.Timestamp FirstSeenAt = 8  [(gogoproto.stdtime) = true, (gogoproto.nullable) = true, (gogoproto.jsontag) = "firstSeenAt"];
}

message LookupOrganizationWebhookUsingSecretIDRequest {
    string SecretID = 1;
}

message LookupOrganizationWebhookUsingSecretIDResponse {
    Webhook Webhook = 1;
}

message SetOrganizationWebhookFirstSeenAtRequest {
    string SecretID = 1;
}

message SetOrganizationWebhookFirstSeenAtResponse {
    google.protobuf.Timestamp FirstSeenAt = 1  [(gogoproto.stdtime) = true, (gogoproto.nullable) = true];
}

message InformOrganizationBillingConfiguredRequest {
    string ExternalID = 1;
}

message Permission {
    string ID = 1;
    string Name = 2;
    string Description = 3;
}

message Role {
    string ID = 1;
    string Name = 2;
}
