#!/usr/bin/env python

import yaml, sys, os, os.path, string, optparse

SERVICE_ALLOWED_ANNOTATIONS={"prometheus.io.scrape", "prometheus.io.port"}

def lint_service(filename, service):
  # services are allowed some top level annotations
  if "annotations" in service["metadata"]:
    annotations = set(service["metadata"]["annotations"].keys())
    disallowed_annotations = annotations.difference(SERVICE_ALLOWED_ANNOTATIONS)
    assert len(disallowed_annotations) == 0, \
      "%s disallowed annotations found: %s" % (filename, disallowed_annotations)

def lint_replication_controller(filename, rc):
  # if they exist, the selector labels should equal the template labels
  labels = rc["spec"]["template"]["metadata"]["labels"]
  if "selector" in rc["spec"]:
    assert rc["spec"]["selector"] == labels, \
      "%s selector does not match labels" % filename

  # rest of the checks concern version label consistency, which
  # we don't use in default
  if options.noversions:
    expected = string.rsplit(os.path.basename(filename), "-", 1)[0]
    assert rc["metadata"]["name"] == expected, \
      "expected name '%s, got '%s'" % (expected, rc["metadata"]["name"])
    return

  # template should specify name and version labels
  assert "name" in labels, \
    "%s should define name label for template" % filename
  assert "version" in labels, \
    "%s should define version label for template" % filename

  # the name of the rc should be name-version
  name = labels["name"]
  version = labels["version"]
  expected = "%s-%s" % (name, version)
  assert rc["metadata"]["name"] == expected, \
    "%s name doesn't match labels (expected: %s)" % (filename, expected)

  # the name label object should match filename
  expected = string.rsplit(os.path.basename(filename), "-", 1)[0]
  assert name == expected, \
    "%s should container an object called %s, not %s" % (filename, expected, name)

  # iff there is one container, the image tag should be the versions
  if len(rc["spec"]["template"]["spec"]["containers"]) == 1:
    container = rc["spec"]["template"]["spec"]["containers"][0]
    image_version = container["image"].split(":", 1)[1]
    assert image_version == version, \
      "%s version label doesn't match image version" % filename

def lint_file(path):
  _, extension = os.path.splitext(path)
  if extension != ".yaml":
    return

  print path
  with open(path, 'r') as stream:
    obj = yaml.load(stream)

  # no top level labels, please
  assert "labels" not in obj["metadata"], \
    "%s should not contain top level labels" % path

  if obj["kind"] == "ReplicationController":
    lint_replication_controller(path, obj)
  elif obj["kind"] == "Service":
    lint_service(path, obj)

def lint_dir(path):
  for filename in os.listdir(path):
    f = os.path.join(path, filename)
    if os.path.isdir(f):
      lint_dir(f)
    else:
      lint_file(f)

if __name__ == "__main__":
  parser =  optparse.OptionParser("usage: %prog [options] <dir/file>...")
  parser.add_option("--noversions", action="store_true",
    default=False, help="don't expect version labels")
  (options, args) = parser.parse_args()
  if len(args) == 0:
    parser.print_help()
    sys.exit(1)

  for path in args:
    if os.path.isdir(path):
      lint_dir(path)
    else:
      lint_file(path)

