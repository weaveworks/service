#!/usr/bin/env python

import yaml, sys, os, os.path, string, optparse


SERVICE_ALLOWED_ANNOTATIONS={"prometheus.io.scrape", "prometheus.io.port"}
SERVICE_SELECTOR_EXCEPTIONS={'scope'}


def lint_service(filename, service):
  # services are allowed some top level annotations
  if "annotations" in service["metadata"]:
    annotations = set(service["metadata"]["annotations"].keys())
    disallowed_annotations = annotations.difference(SERVICE_ALLOWED_ANNOTATIONS)
    if disallowed_annotations:
      yield "%s disallowed annotations found: %s" % (filename, disallowed_annotations)

  basename = string.rsplit(os.path.basename(filename), "-", 1)[0]
  if basename not in SERVICE_SELECTOR_EXCEPTIONS:
    expected_selector = {"name": basename}
    assert service["spec"]["selector"] == expected_selector, \
      "%s: Selector name must match filename (found %s)"  % (filename, expected_selector)


def lint_replication_controller(filename, rc):
  # if they exist, the selector labels should equal the template labels
  labels = rc["spec"]["template"]["metadata"]["labels"]
  if "selector" in rc["spec"]:
    if rc["spec"]["selector"] != labels:
      yield "%s selector does not match labels" % filename

  # template should specify name label
  name = labels.get("name", None)
  if name:
    # the name label object should match filename
    expected = string.rsplit(os.path.basename(filename), "-", 1)[0]
    if name != expected:
      yield "%s should container an object called %s, not %s" % (filename, expected, name)
  else:
    yield "%s should define name label for template" % filename

  # rest of the checks concern version label consistency, which
  # we don't use in default
  if not options.versions:
    expected = string.rsplit(os.path.basename(filename), "-", 1)[0]
    if rc["metadata"]["name"] != expected:
      yield "expected name '%s, got '%s'" % (expected, rc["metadata"]["name"])

  else:
    version = labels.get("version", None)
    if version:
      if name:
        expected = "%s-%s" % (name, version)
        if rc["metadata"]["name"] != expected:
          yield "%s name doesn't match labels (expected: %s)" % (filename, expected)

      # iff there is one container, the image tag should be the versions
      if len(rc["spec"]["template"]["spec"]["containers"]) == 1 and version:
        container = rc["spec"]["template"]["spec"]["containers"][0]
        image_version = container["image"].split(":", 1)[1]
        if image_version != version:
          yield "%s version label doesn't match image version" % filename
      # otherwise, there should at least be versions
      else:
        for container in rc["spec"]["template"]["spec"]["containers"]:
          if  ":" not in container["image"]:
            yield "%s should specify a version!" % filename
    else:
      yield "%s should define version label for template" % filename


def lint_file(path):
  _, extension = os.path.splitext(path)
  if extension != ".yaml":
    return

  if options.verbose:
    print path
  with open(path, 'r') as stream:
    obj = yaml.load(stream)

  # no top level labels, please
  if "labels" in obj["metadata"]:
    yield "%s should not contain top level labels" % path

  if options.namespaces and obj["kind"] != "Namespace":
    namespace = obj["metadata"]["namespace"] if "namespace" in obj["metadata"] else "default"
    dirname, _ = os.path.split(path)
    _, dirname = os.path.split(dirname)
    if namespace != dirname:
      yield "%s should be in namespace %s" % (path, dirname)

  if obj["kind"] == "ReplicationController":
    linter = lint_replication_controller(path, obj)
  elif obj["kind"] == "Service":
    linter = lint_service(path, obj)
  else:
    linter = iter([])

  for warning in linter:
    yield warning


def lint_dir(path):
  for filename in os.listdir(path):
    f = os.path.join(path, filename)
    if os.path.isdir(f):
      linter = lint_dir(f)
    else:
      linter = lint_file(f)

  for warning in linter:
    yield warning


def lint_paths(paths):
  for path in paths:
    if os.path.isdir(path):
      linter = lint_dir(path)
    else:
      linter = lint_file(path)
    for warning in linter:
      yield warning


if __name__ == "__main__":
  parser =  optparse.OptionParser("""usage: %prog [options] <dir/file>...

Analyse yaml files in <dir> for errors in naming and consistent version
labelling.""")
  parser.add_option("--noversions",
    dest="versions", default=True, action="store_false",
    help="don't expect version labels")
  parser.add_option("--nonamespaces", action="store_false",
    dest="namespaces", default=True,
    help="don't enforce namespace subdirectories.")
  parser.add_option("--verbose",
    dest="verbose", default=False, action="store_true",
    help="Verbose output (print filenames as they are checked)")
  (options, args) = parser.parse_args()
  if len(args) == 0:
    parser.print_help()
    sys.exit(1)

  num_warnings = 0
  for warning in lint_paths(args):
    sys.stderr.write(warning)
    sys.stderr.write('\n')
    num_warnings += 1

  sys.exit(2 if num_warnings else 0)
