#!/usr/bin/env python3
'''
Dollarise the actual usage and the usage uploaded to GCP
based on reports generated by gcp_parse_loggly.py and billing_aggregates_vs_gcp_upload.py,
e.g. ../billing_aggregates_vs_gcp_uploads.json
'''

import json
from os.path import dirname, join
from pprint import pprint


'''
console.cloud.google.com/marketplace/details/weaveworks/weave-cloud?project=booming-list-207013&folder&organizationId
> Standard
> $30.00 per node/mo
hence `1.0/(24*60*60)` per `node-second`
> Enterprise
> $150.00 per node/mo
hence `5.0/(24*60*60)` per `node-second`
'''
STANDARD_DATE = 1.0 / (24 * 60 * 60)
ENTERPRISE_RATE = 5.0 / (24 * 60 * 60)


'''
SELECT o.id, g.consumer_id, g.subscription_level
FROM organizations AS o, gcp_accounts AS g
WHERE o.gcp_account_id = g.id AND g.subscription_level = 'enterprise';
'''
enterprise_instances = set([
    'project_number:283386986354',
    'project_number:288188261724',
    'project_number:972052290446',
    'project_number:85435838181',
])


def main():
    with open(join(dirname(__file__), '..', 'billing_aggregates_vs_gcp_uploads.json'), 'r') as f:
        report = json.load(f)

    standard = {}
    enterprise = {}
    min_date = '9'
    max_date = '0'

    for consumer_id, dates in report.items():
        if consumer_id in enterprise_instances:
            summary = enterprise
        else:
            summary = standard

        for date, usages in dates.items():
            if date > max_date:
                max_date = date
            if date < min_date:
                min_date = date
            for usage_type, usage_amount in usages.items():
                if usage_type not in summary:
                    summary[usage_type] = 0
                summary[usage_type] += usage_amount

    print('Date range: [%s, %s]' % (min_date, max_date))

    print('Usage discrepancy (standard ; node-seconds):')
    pprint(standard)
    for usage_type in standard.keys():
        standard[usage_type] *= STANDARD_DATE
    print('Usage discrepancy (standard ; $):')
    pprint(standard)

    print('Usage discrepancy (enterprise ; node-seconds):')
    pprint(enterprise)
    for usage_type in enterprise.keys():
        enterprise[usage_type] *= ENTERPRISE_RATE
    print('Usage discrepancy (enterprise ; $):')
    pprint(enterprise)


if __name__ == '__main__':
    main()
