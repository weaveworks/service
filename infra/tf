#!/usr/bin/env bash

#
# This file is an adaptation of https://get.k8s.io.
#

set -o errexit
set -o nounset
set -o pipefail

if [ $# -ne 2 ]
then
	echo "usage: $(basename $0) <name> up/down"
	exit 1
fi

NAME=$1
WHAT=$2

echo "Sourcing ${NAME}.var"
source ${NAME}.var

function create_tfvars_file {
	cat >${NAME}.tfvars <<EOF
# This file was automatically generated by the tf script.
# The authoritative source for this data is ${NAME}.var.
# Probably do not edit this file.

aws_access_key = "${AWS_ACCESS_KEY}"
aws_secret_key = "${AWS_SECRET_KEY}"
aws_region = "${AWS_REGION}"

rds_subnet_a_availability_zone = "${RDS_SUBNET_A_AZ}"
rds_subnet_b_availability_zone = "${RDS_SUBNET_B_AZ}"
rds_subnet_c_availability_zone = "${RDS_SUBNET_C_AZ}"
app_mapper_db_password = "${RDS_APP_MAPPER_DB_PASSWORD}"
users_db_password = "${RDS_USERS_DB_PASSWORD}"

route53_zone_name = "${R53_ZONE_NAME}"
route53_frontend_elb_endpoint = "${R53_RECORD_NAME}"
route53_frontend_elb_zone_id = "${R53_FRONTEND_ELB_ENDPOINT}"
route53_record_name = "${R53_FRONTEND_ELB_ZONE_ID}"
EOF
}

function remove_tf_files {
	rm -f ${NAME}.rds.tf ${NAME}.r53.tf
}

function interactive_confirmation {
	while true
	do
		read -p "$1 " yn
		case $yn in
			yes) break;;
			no) exit;;
			*) echo "Please type 'yes' or 'no'";;
		esac
	done
}

function terraform_apply {
	local tempfile=$(mktemp)
	trap "rm -rf ${tempfile}" EXIT
	terraform plan -state=${NAME}.tfstate -var-file=${NAME}.tfvars -out=${tempfile}
	interactive_confirmation "Do you wish to proceed with the plan?"
	terraform apply -state=${NAME}.tfstate ${tempfile}
}

case $WHAT in
up)
	create_tfvars_file
	terraform_apply
	;;

down)
	create_tfvars_file
	remove_tf_files
	terraform_apply
	;;

*)
	echo "Unknown command"
	exit 1
	;;
esac
