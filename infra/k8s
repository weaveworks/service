#!/usr/bin/env bash

set -o errexit
set -o nounset
set -o pipefail

function usage {
	echo "usage: $(basename $0) up/down <name>" 1>&2
	exit 1
}

if [ $# -ne 2 ]
then
	usage
fi

WHAT=$1
NAME=$2
CLWD="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )/${NAME}"

if [ ! -d ${CLWD} ]
then
	echo "${CLWD} is not a directory"
	exit 1
fi

echo "Sourcing ${CLWD}/var"
source ${CLWD}/var

function export_variables {
	export KUBERNETES_PROVIDER="aws"
	export KUBE_AWS_ZONE="${K8S_AZ}"
	export AWS_S3_REGION="${AWS_REGION}"
	export AWS_S3_BUCKET="weaveworks-scope-kubernetes-$(cat /dev/urandom|xxd -ps|head -c7)"
	export AWS_IMAGE="${K8S_AMI}"
	export MASTER_SIZE="${K8S_MASTER_SIZE}"
	export MINION_SIZE="${K8S_MINION_SIZE}"
	export NUM_MINIONS="${K8S_NUM_MINIONS}"
	export KUBE_AWS_INSTANCE_PREFIX="${K8S_INSTANCE_PREFIX}"
	export KUBE_ENABLE_DAEMONSETS="true"
}

function ensure_release {
	local version="v1.1.1" # https://storage.googleapis.com/kubernetes-release/release/stable.txt
	if [ -d kubernetes ]
	then
		echo "Kubernetes directory already exists (good)"
		return
	fi
	if [ ! -f kubernetes.tar.gz ]
	then
		echo "Downloading Kubernetes ${version}"
		URL="https://storage.googleapis.com/kubernetes-release/release/${version}/kubernetes.tar.gz"
		wget -q --show-progress ${URL}
	fi
	echo "Unpacking Kubernetes ${version}"
	tar zxf kubernetes.tar.gz
	echo "Patching Kubernetes scripts"
	wget -q -O kubernetes/cluster/aws/config-default.sh https://raw.githubusercontent.com/peterbourgon/kubernetes/master/cluster/aws/config-default.sh
	wget -q -O kubernetes/cluster/aws/util.sh https://raw.githubusercontent.com/peterbourgon/kubernetes/master/cluster/aws/util.sh
}

function move_kubeconfig {
	if [ -f ${HOME}/.kube/config ]
	then
		TIMESTAMP=$(date +%Y%m%d%H%M%S)
		echo "Detected ${HOME}/.kube/config"
		echo "Moving it to ${HOME}/.kube/config.backup.${TIMESTAMP}"
		mv ${HOME}/.kube/config ${HOME}/.kube/config.backup.${TIMESTAMP}
	fi
}

function kube_up {
	(
		cd kubernetes
		./cluster/kube-up.sh
		echo "Kubernetes installation successful."
	)
}

function write_kubeconfig {
	echo "Writing ${CLWD}/kubeconfig"
	cp ${HOME}/.kube/config ${CLWD}/kubeconfig
}

function write_credentials {
	echo "Writing ${CLWD}/kube_aws_rsa"
	cp ${HOME}/.ssh/kube_aws_rsa ${CLWD}/kube_aws_rsa
	echo "Writing ${CLWD}/kube_aws_rsa.pub"
	cp ${HOME}/.ssh/kube_aws_rsa.pub ${CLWD}/kube_aws_rsa.pub
}

function kube_down {
	(
		cd kubernetes
		./cluster/kube-down.sh
		echo "Kubernetes deinstallation successful."
	)
}

function remove_kubeconfig {
	echo "Removing ${CLWD}/kubeconfig"
	rm -f ${CLWD}/kubeconfig
}

function remove_credentials {
	echo "Removing ${NAME}/kube_aws_rsa"
	rm -f ${NAME}/kube_aws_rsa
	echo "Removing ${NAME}/kube_aws_rsa.pub"
	rm -f ${NAME}/kube_aws_rsa.pub
}

function clean_s3_buckets {
	for b in $(aws s3 ls / | grep weaveworks-scope-kubernetes- | awk '{print $3}')
	do
		echo $b
		aws s3 rm --recursive s3://$b/ >/dev/null 2>&1 || true
		aws s3 rb s3://$b >/dev/null 2>&1 || true
	done
}

function interactive_confirmation {
	while true
	do
		read -p "$1 " yn
		case $yn in
			yes) break;;
			no) exit;;
			*) echo "Please type 'yes' or 'no'";;
		esac
	done
}

case $WHAT in
up)
	ensure_release
	export_variables
	interactive_confirmation "Are you sure you want to stand up ${NAME}?"
	move_kubeconfig
	kube_up
	clean_s3_buckets
	write_kubeconfig
	write_credentials
	;;

down)
	ensure_release
	export_variables
	interactive_confirmation "Are you sure you want to tear down ${NAME}?"
	kube_down
	remove_kubeconfig
	remove_credentials
	;;

debug-clean-s3-buckets)
	clean_s3_buckets
	;;

*)
	echo "Unknown command" 1>&2
	usage
	;;
esac
