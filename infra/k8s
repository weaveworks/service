#!/usr/bin/env bash

#
# This file is an adaptation of https://get.k8s.io.
#

set -o errexit
set -o nounset
set -o pipefail

if [ $# -ne 2 ]
then
	echo "usage: $(basename $0) <name> up/down"
	exit 1
fi

NAME=$1
WHAT=$2
VERSION="v1.0.6" # https://storage.googleapis.com/kubernetes-release/release/stable.txt

echo "Sourcing ${NAME}.k8s"
source ${NAME}.k8s

export KUBERNETES_PROVIDER="aws"
export AWS_S3_BUCKET="weaveworks-scope-kubernetes-$(date | shasum | cut -c 1-7)"

function ensure_release {
	if [ -d kubernetes ]
	then
		return
	fi
	if [ ! -f kubernetes.tar.gz ]
	then
		echo "Downloading Kubernetes ${VERSION}"
		URL="https://storage.googleapis.com/kubernetes-release/release/${VERSION}/kubernetes.tar.gz"
		wget -q --show-progress ${URL}
	fi
	echo "Unpacking Kubernetes ${VERSION}"
	tar zxf kubernetes.tar.gz
	# `aws s3 mb` often needs some time to settle.
	sed -i'.bak' 's/^\([ ]*aws s3 mb.*\)$/\1 ; sleep 5/g' kubernetes/cluster/aws/util.sh
}

function move_kubeconfig {
	if [ -f ${HOME}/.kube/config ]
	then
		TIMESTAMP=$(date +%Y%m%d%H%M%S)
		echo "Detected ${HOME}/.kube/config"
		echo "Moving it to ${HOME}/.kube/config.backup.${TIMESTAMP}"
		mv ${HOME}/.kube/config ${HOME}/.kube/config.backup.${TIMESTAMP}
	fi
}

function kube_up {
	(
		echo "Will bootstrap in 5 seconds..."
		sleep 5
		cd kubernetes
		./cluster/kube-up.sh
		echo "Kubernetes installation successful."
	)
}

function write_kubeconfig {
	echo "Writing ${NAME}.kubeconfig"
	cp ${HOME}/.kube/config ${NAME}.kubeconfig
}

function write_awsfile {
	source kubernetes/cluster/kube-env.sh
	source kubernetes/cluster/${KUBERNETES_PROVIDER}/util.sh
	echo "Writing ${NAME}.aws"
	local TEMPFILE=$(mktemp)
	local VPC_ID=$(get_vpc_id)
	local MASTER_SECURITY_GROUP_ID=$(get_security_group_id "${MASTER_SG_NAME}")
	local MINION_SECURITY_GROUP_ID=$(get_security_group_id "${MINION_SG_NAME}")
	local DB_SUBNET_ID=$($AWS_CMD describe-subnets --filters Name=tag:KubernetesCluster,Values=${CLUSTER_ID} | get_subnet_id ${VPC_ID} ${KUBE_AWS_ZONE})
	cat <<EOF >${TEMPFILE}
#!/usr/bin/env bash

# This file is automatically generated by the k8s script.
# Do not edit this file by hand.

export AWS_REGION=${AWS_S3_REGION}
export VPC_ID=${VPC_ID}
export MASTER_SECURITY_GROUP_ID=${MASTER_SECURITY_GROUP_ID}
export MINION_SECURITY_GROUP_ID=${MINION_SECURITY_GROUP_ID}
export DB_SUBNET_ID=${DB_SUBNET_ID}

EOF
	mv ${TEMPFILE} ${NAME}.aws
}

function interactive_confirmation {
	while true
	do
		read -p "Are you sure you want to bring $NAME down? " yn
		case $yn in
			yes) break;;
			no) exit;;
			*) echo "Please type 'yes' or 'no'";;
		esac
	done
}

function kube_down {
	# This manages everything for us.
	kubernetes/cluster/kube-down.sh
}

function remove_kubeconfig {
	echo "Removing ${NAME}.kubeconfig"
	rm -f ${NAME}.kubeconfig
}

function remove_awsfile {
	echo "Removing ${NAME}.aws"
	rm -f ${NAME}.aws
}

ensure_release

case $WHAT in
up)
	move_kubeconfig
	kube_up
	write_kubeconfig
	write_awsfile
	;;

down)
	interactive_confirmation
	kube_down
	remove_kubeconfig
	remove_awsfile
	;;

debug-write-aws)
	write_awsfile
	;;

*)
	echo "Unknown command"
	exit 1
	;;
esac
