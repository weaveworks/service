#!/usr/bin/env bash

set -o errexit
set -o nounset
set -o pipefail

if [ $# -ne 2 ]
then
	echo "usage: $(basename $0) up/down <name>"
	exit 1
fi

WHAT=$1
NAME=$2

function create_tf_file {
	cp rds.template ${NAME}/rds.tf
}

function delete_tf_file {
	rm -f ${NAME}/rds.tf
}

function interactive_confirmation {
	while true
	do
		read -p "$1 " yn
		case $yn in
			yes) break;;
			no) exit;;
			*) echo "Please type 'yes' or 'no'";;
		esac
	done
}

function terraform_apply {
	(
		cd ${NAME}
		local tempfile=$(mktemp)
		trap "rm -rf ${tempfile}" EXIT
		# This is insufficient: the dep walk misses a lot of stuff.
		#terraform plan -state=tfstate -var-file=tfvars -out=${tempfile} -target=aws_db_instance.users_db -target=aws_db_instance.app_mapper_db
		terraform plan -state=tfstate -var-file=tfvars -out=${tempfile} -target=aws_vpc.rds_vpc -target=aws_security_group.rds_sg -target=aws_internet_gateway.rds_igw -target=aws_route_table.rds_rtb -target=aws_subnet.rds_subnet_a -target=aws_route_table_association.rds_rtbassoc_a -target=aws_subnet.rds_subnet_b -target=aws_route_table_association.rds_rtbassoc_b -target=aws_subnet.rds_subnet_c -target=aws_route_table_association.rds_rtbassoc_c -target=aws_db_subnet_group.rds_subnet_group -target=aws_db_instance.users_db -target=aws_db_instance.app_mapper_db
		interactive_confirmation "Do you wish to proceed with the plan?"
		terraform apply -state=tfstate ${tempfile}
	)
}

case $WHAT in
up)
	create_tf_file
	terraform_apply
	;;
down)
	delete_tf_file
	terraform_apply
	;;
*)
	echo "Unknown command"
	exit 1
	;;
esac
