#!/usr/bin/env bash

set -o errexit
set -o nounset
set -o pipefail

if [ $# -ne 2 ]
then
	echo "usage: $(basename $0) <name> up/down"
	exit 1
fi

NAME=$1
WHAT=$2

echo "Sourcing ${NAME}.aws"
source ${NAME}.aws

echo "Sourcing ${NAME}.sec"
source ${NAME}.sec

function create_tfvars {
	cat <<EOF >${NAME}-rds.tfvars
# This file is automatically generated by the rds script.
# Do not edit this file by hand.

region = "${AWS_REGION}"
users_db_password = "${USERS_DB_PASSWORD}"
app_mapper_db_password = "${APP_MAPPER_DB_PASSWORD}"
rds_security_group_id = "${RDS_SECURITY_GROUP_ID}"
EOF
}

function remove_tfvars {
	echo "Removing ${NAME}-rds.tfvars"
	rm -f ${NAME}-rds.tfvars || true
}

function create_tf {
	cp rds.tf.template ${NAME}-rds.tf
}

function remove_tf {
	echo "Removing ${NAME}-rds.tf"
	rm -f ${NAME}-rds.tf || true
}

function interactive_confirmation {
	local prompt=$1
	while true
	do
		read -p "${prompt} " yn
		case $yn in
			yes) break;;
			no) exit;;
			*) echo "Please type 'yes' or 'no'";;
		esac
	done
}

function terraform_apply {
	local tempfile=$(mktemp)
	trap "rm -rf ${tempfile}" EXIT
	terraform plan -state=${NAME}-rds.tfstate -var-file=${NAME}-rds.tfvars -out=${tempfile}
	interactive_confirmation "Do you wish to proceed with the plan?"
	terraform apply -state=${NAME}-rds.tfstate ${tempfile}
}

function remove_tfstate {
	echo "Removing ${NAME}-rds.tfstate"
	rm -f ${NAME}-rds.tfstate || true
}

function load_schema {
	local dbname=$1
	local password=$2
	local filename=$3
	local hostname=$( cat ${NAME}-rds.tfstate | jq -r .modules[0].resources.\"aws_db_instance.${dbname}\".primary.attributes.address )
	if [[ "${hostname}" == "" || "${hostname}" == "null" ]]
	then
		echo "Either ${NAME}-rds.tfstate or '${dbname}' is invalid."
		exit 1
	fi
	local suffix=$(date | shasum | cut -c1-5)
	local podname="rdsload-${suffix}"
	echo "Loading ${filename} to ${hostname}..."
	trap "kubectl stop pod --grace-period=1 ${podname}" EXIT
	cat ${filename} | kubectl run ${podname} --image=postgres --stdin --restart=Never --env="PGPASSWORD=${password}" --command -- psql -U postgres -h ${hostname}
}

function load_schemas {
	load_schema users_db ${USERS_DB_PASSWORD} ../users/db/schema.sql
	load_schema app_mapper_db ${APP_MAPPER_DB_PASSWORD} ../app-mapper/db/schema.sql
}

case ${WHAT} in
up)
	create_tfvars
	create_tf
	terraform_apply
	load_schemas
	;;

down)
	remove_tf
	terraform_apply
	remove_tfvars
	remove_tfstate
	;;

debug-load-schemas)
	load_schemas
	;;

*)
	echo "Unknown command"
	exit 1
	;;
esac
