#!/usr/bin/env bash

set -o errexit
set -o nounset
set -o pipefail

function usage {
	exec 1>&2
	echo "usage:"
	echo "  $(basename $0) bootstrap <name>"
	echo "  $(basename $0) hostname <name> <database>"
	echo "  $(basename $0) password <name> <database>"
	echo "  $(basename $0) shell <name> <database>"
	exit 1
}

if [ $# -lt 2 ]; then
	 usage
fi

WHAT=$1
NAME=$2

CLWD="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )/${NAME}"

if [ ! -d ${CLWD} ]; then
	echo "${CLWD} is not a directory"
	exit 1
fi

function verify_db_name {
	local databases="users app_mapper"
	for DB in $databases; do
		if [ "$DB" = "$1" ]; then
			return 0
		fi
	done
	echo "Unkown database $1: valid databases: $databases" 1>&2
	exit 1
}

function hostname {
	local database=$1
	local hostname=$( cat ${CLWD}/tfstate | jq -r .modules[0].resources.\"aws_db_instance.${database}_database\".primary.attributes.address )
	echo ${hostname}
}

function password {
	local database=$1
	local password=$( cat ${CLWD}/tfstate | jq -r .modules[0].resources.\"aws_db_instance.${database}_database\".primary.attributes.password )
	echo ${password}
}

function shell {
	local hostname=$1
	local password=$2
	local db=$3
	local podname="dbshell-${USER}-$(cat /dev/urandom|xxd -ps|head -c5)"
	trap "kubectl --kubeconfig=${CLWD}/kubeconfig stop pod --grace-period=1 ${podname}" EXIT
	kubectl --kubeconfig=${CLWD}/kubeconfig run ${podname} --image=postgres --stdin --tty --restart=Never --env="LINES=$(tput lines)" --env="COLUMNS=$(tput cols)" --command -- psql "postgres://postgres:$password@$hostname/$db"
}

case $WHAT in
hostname)
	if [ $# != 3 ]; then usage; fi
	verify_db_name $3
	hostname $3
	;;

password)
	if [ $# != 3 ]; then usage; fi
	verify_db_name $3
	password $3
	;;

bootstrap)
	if [ $# != 2 ]; then usage; fi
	load $(hostname users_database) $(password users_database) < ${CLWD}/../../users/db/schema.sql
	load $(hostname app_mapper_database) $(password app_mapper_database) < ${CLWD}/../../app-mapper/db/schema.sql
	;;

shell)
	if [ $# != 3 ]; then usage; fi
	verify_db_name $3
	shell $(hostname $3) $(password $3) $3
	;;

*)
	echo Unknown command 1>&2
	usage
	;;
esac

