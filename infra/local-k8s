#!/usr/bin/env bash

set -o errexit
set -o nounset
set -o pipefail

function usage {
        echo "usage: $(basename $0) up / down" 1>&2
        exit 1
}

if [ $# -lt 1 ]
then
        usage
fi


WHAT=$1

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
LOCAL_K8S_DIR="${SCRIPT_DIR}/../k8s/local"
export APISERVER_LOCAL_PORT="8001"

version=${LOCAL_K8S_VERSION:-"v1.2"}

check_docker_for_mac() {
        local -r docker_for_mac_version="${HOME}/Library/Containers/com.docker.docker/Data/database/com.docker.driver.amd64-linux/version"
        [ "$(uname)" = "Darwin" ] \
          && [ -f "${docker_for_mac_version}" ]
}

check_docker_local() {
        [ -S /var/run/docker.sock ] \
          && docker --host="unix:///var/run/docker.sock" info > /dev/null
        ## TODO: figure out if sudo is needed
}

function stop_container {
        docker stop $1 > /dev/null 2>&1 || true
        docker rm -v $1 > /dev/null 2>&1 || true
}

kubeconfig="${SCRIPT_DIR}/local/kubeconfig"

function call_kubectl {
        kubectl --kubeconfig=${kubeconfig} "$@"
}

function write_kubeconfig {
        docker run --rm \
          --env=APISERVER_LOCAL_PORT \
          --volumes-from=kube-toolbox-pki \
          "weaveworks/kubernetes-anywhere:toolbox-${version}" \
            print-local-config > "${kubeconfig}"
}

function remove_kubeconfig {
        rm -f "${kubeconfig}"
}

function tear_down {
        for c in $(docker ps -q -f 'name=kube_*')
        do
                stop_container $c
        done
        docker run --rm \
          --volume="/:/rootfs" \
          --volume="/var/run/docker.sock:/docker.sock" \
            "weaveworks/kubernetes-anywhere:toolbox-${version}" \
              reset-single-node > /dev/null 2>&1
        remove_kubeconfig
        for c in $(docker ps -q -f 'name=k8s_*')
        do
                stop_container $c
        done
}

function launch_weave {
        weave expose -h "${1}.weave.local" > /dev/null
        weave status > /dev/null || weave luanch
}

function stand_up {
        for c in weave kubectl
        do
              if ! command -v "${c}" > /dev/null 2>&1
              then
                      echo "${c} not found" >&2
                      exit 1
              fi
        done

        ## Currently Weave Net doesn't persist DNS records
        if check_docker_local && check_docker_for_mac
        then
              launch_weave "docker"
        elif check_docker_local
        then
              launch_weave "$(hostname)"
              eval "$(weave env)"
        else
              echo "Only local Docker or Docker for Mac is currently supported"
              exit 1
        fi

        docker run --rm \
          --volume="/:/rootfs" \
          --volume="/var/run/weave/weave.sock:/docker.sock" \
            "weaveworks/kubernetes-anywhere:toolbox-${version}" \
              setup-single-node

        docker run --rm \
          --env=APISERVER_LOCAL_PORT \
          --volume="/var/run/weave/weave.sock:/docker.sock" \
            "weaveworks/kubernetes-anywhere:toolbox-${version}" \
              compose -p kube up -d

        write_kubeconfig

        while ! call_kubectl get svc kubernetes >/dev/null 2>&1
        do
                echo -n "."
                sleep 1
        done
        echo

        echo "Creating cluster addons..."
        docker run --rm \
          --net=weave --dns="$(weave docker-bridge-ip)" \
          --volumes-from="kube-toolbox-pki" \
            "weaveworks/kubernetes-anywhere:toolbox-${version}" \
              kubectl create -f addons.yaml

        echo "Creating Scope addon..."
        call_kubectl create -f ${LOCAL_K8S_DIR}/scope

        echo ""
        echo "Kubernetes is running locally."
        echo ""
        echo " kubectl --kubeconfig=$(python -c "import os.path; print os.path.relpath('${kubeconfig}', '$(pwd)')") get pods"
        echo ""
        echo "You may now deploy the application components."
        echo ""
}

case $WHAT in
up)
        tear_down || true
        stand_up
        ;;

down)
        tear_down
        ;;

*)
        echo "Unknown command" 1>&2
        usage
        ;;
esac
