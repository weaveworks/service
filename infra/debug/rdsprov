#!/usr/bin/env fish

# This script creates a new VPC and places a publicly accessible
# multi-AZ RDS instance there.

set VPC_CIDR "172.51.0.0/16"
set VPC_ID (aws ec2 create-vpc --cidr-block $VPC_CIDR | jq -r '.Vpc.VpcId')
aws ec2 modify-vpc-attribute --vpc-id $VPC_ID --enable-dns-hostnames # required for publicly accessible RDS instances
echo Created $VPC_ID

set SG_ID (aws ec2 create-security-group --group-name test-rds-sg --description "SG for RDS" --vpc-id $VPC_ID | jq -r '.GroupId')
aws ec2 authorize-security-group-ingress --group-id $SG_ID --protocol tcp --port 5432 --cidr '0.0.0.0/0'
echo Created $SG_ID

# Route table for the security group, with a route to the internet.
set RTB_ID (aws ec2 create-route-table --vpc-id $VPC_ID | jq -r '.RouteTable.RouteTableId')
echo Created $RTB_ID

set IGW_ID (aws ec2 create-internet-gateway | jq -r '.InternetGateway.InternetGatewayId')
aws ec2 attach-internet-gateway --internet-gateway-id $IGW_ID --vpc-id $VPC_ID
echo Created $IGW_ID

aws ec2 create-route --route-table-id $RTB_ID --destination-cidr-block '0.0.0.0/0' --gateway-id $IGW_ID
echo Created internet route in $RTB_ID

# Multi-AZ RDS requires access to at least 2 subnets in different availability zones.
set REGION eu-west-1
set AZ_A "$REGION"a
set AZ_B "$REGION"b
set AZ_C "$REGION"c

set SUBNET_A_CIDR "172.51.1.0/24"
set SUBNET_A_ID (aws ec2 create-subnet --vpc-id $VPC_ID --cidr $SUBNET_A_CIDR --availability-zone $AZ_A | jq -r '.Subnet.SubnetId')
aws ec2 associate-route-table --subnet-id $SUBNET_A_ID --route-table-id $RTB_ID
echo Created $SUBNET_A_ID in $AZ_A

set SUBNET_B_CIDR "172.51.2.0/24"
set SUBNET_B_ID (aws ec2 create-subnet --vpc-id $VPC_ID --cidr $SUBNET_B_CIDR --availability-zone $AZ_B | jq -r '.Subnet.SubnetId')
aws ec2 associate-route-table --subnet-id $SUBNET_B_ID --route-table-id $RTB_ID
echo Created $SUBNET_B_ID in $AZ_B

set SUBNET_C_CIDR "172.51.3.0/24"
set SUBNET_C_ID (aws ec2 create-subnet --vpc-id $VPC_ID --cidr $SUBNET_C_CIDR --availability-zone $AZ_C | jq -r '.Subnet.SubnetId')
aws ec2 associate-route-table --subnet-id $SUBNET_C_ID --route-table-id $RTB_ID
echo Created $SUBNET_C_ID in $AZ_C

# DB subnet group with the subnets from above.
set DB_SUBNET_GROUP_NAME test-db-subnet-group-(date|shasum|cut -c1-5)
aws rds create-db-subnet-group --db-subnet-group-name $DB_SUBNET_GROUP_NAME --db-subnet-group-description "Test DB subnet group" --subnet-ids $SUBNET_A_ID $SUBNET_B_ID $SUBNET_C_ID
echo Created $DB_SUBNET_GROUP_NAME

set DB_INSTANCE_ID test-db-instance-id-(date|shasum|cut -c1-5)
set DB_USERNAME postgres
set DB_PASSWORD (date|shasum|cut -c1-12)
aws rds create-db-instance \
	--engine postgres \
	--db-instance-class db.t1.micro \
	--db-name testdb \
	--db-instance-identifier $DB_INSTANCE_ID \
	--master-username $DB_USERNAME \
	--master-user-password $DB_PASSWORD \
	--vpc-security-group-ids $SG_ID \
	--db-subnet-group-name $DB_SUBNET_GROUP_NAME \
	--multi-az \
	--publicly-accessible \
	--allocated-storage 5
echo Created $DB_INSTANCE_ID

echo Waiting...
while test (aws rds describe-db-instances --db-instance-identifier $DB_INSTANCE_ID | jq -r '.DBInstances[0].Endpoint.Address') = null
	aws rds describe-db-instances --db-instance-identifier $DB_INSTANCE_ID | jq -r '.DBInstances[0].DBInstanceStatus'
	sleep 10
end

set DB_HOSTNAME (aws rds describe-db-instances --db-instance-identifier $DB_INSTANCE_ID | jq -r '.DBInstances[0].Endpoint.Address')
set DB_PORT (aws rds describe-db-instances --db-instance-identifier $DB_INSTANCE_ID | jq -r '.DBInstances[0].Endpoint.Port')

echo
echo You can try to connect to the DB now.
echo
echo " nc -zv $DB_HOSTNAME $DB_PORT"
echo " psql --hostname=$DB_HOSTNAME --port=$DB_PORT --username=$DB_USERNAME --password # $DB_PASSWORD"
echo
echo Press enter to tear down the test context.
echo
read CONTINUE

aws rds delete-db-instance --db-instance-identifier $DB_INSTANCE_ID --skip-final-snapshot
echo Deleted DB instance

echo Waiting...
while true
	set STATUS (set BODY (aws rds describe-db-instances --db-instance-identifier $DB_INSTANCE_ID ; or echo '{}') ; echo $BODY | jq -r '.DBInstances[0].DBInstanceStatus')
	echo $STATUS
	switch $STATUS
		case deleting
			sleep 10
			continue
		case '*'
			break
	end
end

aws rds delete-db-subnet-group --db-subnet-group-name $DB_SUBNET_GROUP_NAME
echo Deleted DB subnet group

aws ec2 delete-route --route-table-id $RTB_ID --destination-cidr-block '0.0.0.0/0'
echo Deleted internet route

aws ec2 detach-internet-gateway --internet-gateway-id $IGW_ID --vpc-id $VPC_ID
aws ec2 delete-internet-gateway --internet-gateway-id $IGW_ID
echo Deleted IGW_ID $IGW_ID

aws ec2 delete-route-table --route-table-id $RTB_ID
echo Deleted RTB_ID $RTB_ID

aws ec2 delete-subnet --subnet-id $SUBNET_C_ID
echo Deleted SUBNET_C_ID $SUBNET_C_ID

aws ec2 delete-subnet --subnet-id $SUBNET_B_ID
echo Deleted SUBNET_B_ID $SUBNET_B_ID

aws ec2 delete-subnet --subnet-id $SUBNET_A_ID
echo Deleted SUBNET_A_ID $SUBNET_A_ID

aws ec2 revoke-security-group-ingress --group-id $SG_ID --protocol tcp --port 5432 --cidr '0.0.0.0/0'
aws ec2 delete-security-group --group-id $SG_ID
echo Deleted SG_ID $SG_ID

aws ec2 delete-vpc --vpc-id $VPC_ID
echo Deleted VPC_ID $VPC_ID
