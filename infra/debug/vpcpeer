#!/usr/bin/env fish

# This script goes through all the steps necessary to create two VPCs, spawn
# an instance in each, and set up a VPC peering connection so they can talk to
# each other on their private IPs.

# VPC A
set VPC_A_CIDR "172.51.0.0/16"
aws ec2 create-vpc --cidr-block $VPC_A_CIDR
set VPC_A_ID (aws ec2 describe-vpcs --filters "Name=cidr,Values=$VPC_A_CIDR" | jq -r '.Vpcs[0].VpcId')

# Security group alpha
aws ec2 create-security-group --group-name alpha --description "VPC A SG alpha" --vpc-id $VPC_A_ID
set SG_A_ID (aws ec2 describe-security-groups --filters "Name=group-name,Values=alpha" | jq -r '.SecurityGroups[0].GroupId')

# Subnet in alpha
set SUBNET_A_CIDR "172.51.1.0/24"
aws ec2 create-subnet --vpc-id $VPC_A_ID --cidr $SUBNET_A_CIDR
set SUBNET_A_ID (aws ec2 describe-subnets --filters "Name=cidrBlock,Values=$SUBNET_A_CIDR" | jq -r '.Subnets[0].SubnetId')

# Internet gateway A
set IGW_A_ID (aws ec2 create-internet-gateway | jq -r '.InternetGateway.InternetGatewayId')
aws ec2 attach-internet-gateway --internet-gateway-id $IGW_A_ID --vpc-id $VPC_A_ID

# Route table
set RTB_A_ID (aws ec2 create-route-table --vpc-id $VPC_A_ID | jq -r '.RouteTable.RouteTableId')
aws ec2 create-route --route-table-id $RTB_A_ID --destination-cidr-block 0.0.0.0/0 --gateway-id $IGW_A_ID
set RTBASSOC_A_ID (aws ec2 associate-route-table --subnet-id $SUBNET_A_ID --route-table-id $RTB_A_ID | jq -r '.AssociationId')

# Allow inbound SSH + 1234 to alpha
aws ec2 authorize-security-group-ingress --group-id $SG_A_ID --protocol tcp --port 22 --cidr 0.0.0.0/0
aws ec2 authorize-security-group-ingress --group-id $SG_A_ID --protocol tcp --port 1234 --cidr 0.0.0.0/0
aws ec2 authorize-security-group-ingress --group-id $SG_A_ID --protocol icmp --port -1 --cidr 0.0.0.0/0

# VPC B
set VPC_B_CIDR "172.52.0.0/16"
aws ec2 create-vpc --cidr-block $VPC_B_CIDR
set VPC_B_ID (aws ec2 describe-vpcs --filters "Name=cidr,Values=$VPC_B_CIDR" | jq -r '.Vpcs[0].VpcId')

# Security group beta
aws ec2 create-security-group --group-name beta --description "VPC B SG beta" --vpc-id $VPC_B_ID
set SG_B_ID (aws ec2 describe-security-groups --filters "Name=group-name,Values=beta" | jq -r '.SecurityGroups[0].GroupId')

# Subnet in beta
set SUBNET_B_CIDR "172.52.1.0/24"
aws ec2 create-subnet --vpc-id $VPC_B_ID --cidr $SUBNET_B_CIDR
set SUBNET_B_ID (aws ec2 describe-subnets --filters "Name=cidrBlock,Values=$SUBNET_B_CIDR" | jq -r '.Subnets[0].SubnetId')

# Internet gateway B
set IGW_B_ID (aws ec2 create-internet-gateway | jq -r '.InternetGateway.InternetGatewayId')
aws ec2 attach-internet-gateway --internet-gateway-id $IGW_B_ID --vpc-id $VPC_B_ID

# Route table
set RTB_B_ID (aws ec2 create-route-table --vpc-id $VPC_B_ID | jq -r '.RouteTable.RouteTableId')
aws ec2 create-route --route-table-id $RTB_B_ID --destination-cidr-block 0.0.0.0/0 --gateway-id $IGW_B_ID
set RTBASSOC_B_ID (aws ec2 associate-route-table --subnet-id $SUBNET_B_ID --route-table-id $RTB_B_ID | jq -r '.AssociationId')

# Allow inbound SSH + 1234 + ICMP to beta
aws ec2 authorize-security-group-ingress --group-id $SG_B_ID --protocol tcp --port 22 --cidr 0.0.0.0/0
aws ec2 authorize-security-group-ingress --group-id $SG_B_ID --protocol tcp --port 1234 --cidr 0.0.0.0/0
aws ec2 authorize-security-group-ingress --group-id $SG_B_ID --protocol icmp --port -1 --cidr 0.0.0.0/0

# Key pair
# https://github.com/aws/aws-cli/issues/41#issuecomment-22034081
set KEYFILE "~/.ssh/kube_aws_rsa"
set KEYFILE_PUB "$KEYFILE.pub"
aws ec2 import-key-pair --key-name test-key --public-key-material "file://$KEYFILE_PUB"

# Image ID
set IMAGE_ID "ami-87cb11f4"

# Alpha instance
aws ec2 run-instances --image-id $IMAGE_ID --count 1 --instance-type t2.micro --key-name test-key --security-group-ids $SG_A_ID --subnet-id $SUBNET_A_ID --associate-public-ip-address
set ALPHA_INSTANCE_ID (aws ec2 describe-instances --filters "Name=instance.group-id,Values=$SG_A_ID" | jq -r '.Reservations[0].Instances[0].InstanceId')
set ALPHA_PUBLIC_IP null ; while test $ALPHA_PUBLIC_IP = "null" ; set ALPHA_PUBLIC_IP (aws ec2 describe-instances --instance-ids $ALPHA_INSTANCE_ID | jq -r '.Reservations[0].Instances[0].PublicIpAddress') ; echo $ALPHA_PUBLIC_IP ; end
set ALPHA_PRIVATE_IP null ; while test $ALPHA_PRIVATE_IP = "null" ; set ALPHA_PRIVATE_IP (aws ec2 describe-instances --instance-ids $ALPHA_INSTANCE_ID | jq -r '.Reservations[0].Instances[0].PrivateIpAddress') ; echo $ALPHA_PRIVATE_IP ; end

# Beta instance
aws ec2 run-instances --image-id $IMAGE_ID --count 1 --instance-type t2.micro --key-name test-key --security-group-ids $SG_B_ID --subnet-id $SUBNET_B_ID --associate-public-ip-address
set BETA_INSTANCE_ID (aws ec2 describe-instances --filters "Name=instance.group-id,Values=$SG_B_ID" | jq -r '.Reservations[0].Instances[0].InstanceId')
set BETA_PUBLIC_IP null ; while test $BETA_PUBLIC_IP = "null" ; set BETA_PUBLIC_IP (aws ec2 describe-instances --instance-ids $BETA_INSTANCE_ID | jq -r '.Reservations[0].Instances[0].PublicIpAddress') ; echo $BETA_PUBLIC_IP ; end
set BETA_PRIVATE_IP null ; while test $BETA_PRIVATE_IP = "null" ; set BETA_PRIVATE_IP (aws ec2 describe-instances --instance-ids $BETA_INSTANCE_ID | jq -r '.Reservations[0].Instances[0].PrivateIpAddress') ; echo $BETA_PRIVATE_IP ; end

# VPC peering connection
set PCX_ID (aws ec2 create-vpc-peering-connection --vpc-id $VPC_A_ID --peer-vpc-id $VPC_B_ID | jq -r '.VpcPeeringConnection.VpcPeeringConnectionId')
aws ec2 accept-vpc-peering-connection --vpc-peering-connection-id $PCX_ID
aws ec2 create-route --route-table-id $RTB_A_ID --destination-cidr-block $VPC_B_CIDR --vpc-peering-connection-id $PCX_ID
aws ec2 create-route --route-table-id $RTB_B_ID --destination-cidr-block $VPC_A_CIDR --vpc-peering-connection-id $PCX_ID

echo
echo You can try this now:
echo
echo " ssh -i $KEYFILE ubuntu@$ALPHA_PUBLIC_IP -- nc -lkvnp 1234 "
echo " echo laptop - internet - public IP | nc $ALPHA_PUBLIC_IP 1234 "
echo " ssh -i $KEYFILE ubuntu@$BETA_PUBLIC_IP -- \"echo ec2 - internet - public IP | nc $ALPHA_PUBLIC_IP 1234\" "
echo " ssh -i $KEYFILE ubuntu@$BETA_PUBLIC_IP -- \"echo ec2 - vpc peer - private IP | nc $ALPHA_PRIVATE_IP 1234\" "
echo
echo Press enter to tear down the test context.
echo
read CONTINUE

aws ec2 delete-vpc-peering-connection --vpc-peering-connection-id $PCX_ID

aws ec2 terminate-instances --instance-id $ALPHA_INSTANCE_ID
false ; while test $status -ne 0 ; sleep 3 ; aws ec2 detach-internet-gateway --internet-gateway-id $IGW_A_ID --vpc-id $VPC_A_ID ; end
aws ec2 delete-internet-gateway --internet-gateway-id $IGW_A_ID
aws ec2 disassociate-route-table --association-id $RTBASSOC_A_ID
aws ec2 delete-route-table --route-table-id $RTB_A_ID
false ; while test $status -ne 0 ; sleep 3 ; aws ec2 delete-subnet --subnet-id $SUBNET_A_ID ; end
aws ec2 delete-security-group --group-id $SG_A_ID
aws ec2 delete-vpc --vpc-id $VPC_A_ID

aws ec2 terminate-instances --instance-id $BETA_INSTANCE_ID
false ; while test $status -ne 0 ; sleep 3 ; aws ec2 detach-internet-gateway --internet-gateway-id $IGW_B_ID --vpc-id $VPC_B_ID ; end
aws ec2 delete-internet-gateway --internet-gateway-id $IGW_B_ID
aws ec2 disassociate-route-table --association-id $RTBASSOC_B_ID
aws ec2 delete-route-table --route-table-id $RTB_B_ID
false ; while test $status -ne 0 ; sleep 3 ; aws ec2 delete-subnet --subnet-id $SUBNET_B_ID ; end
aws ec2 delete-security-group --group-id $SG_B_ID
aws ec2 delete-vpc --vpc-id $VPC_B_ID

aws ec2 delete-key-pair --key-name "test-key"
